// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Notcurses binding for Dart
class NcFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NcFfi(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NcFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int8> notcurses_version() {
    return _notcurses_version();
  }

  late final _notcurses_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'notcurses_version');
  late final _notcurses_version =
      _notcurses_versionPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  void notcurses_version_components(
    ffi.Pointer<ffi.Int32> major,
    ffi.Pointer<ffi.Int32> minor,
    ffi.Pointer<ffi.Int32> patch,
    ffi.Pointer<ffi.Int32> tweak,
  ) {
    return _notcurses_version_components(
      major,
      minor,
      patch,
      tweak,
    );
  }

  late final _notcurses_version_componentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('notcurses_version_components');
  late final _notcurses_version_components =
      _notcurses_version_componentsPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  int ncstrwidth(
    ffi.Pointer<ffi.Int8> egcs,
    ffi.Pointer<ffi.Int32> validbytes,
    ffi.Pointer<ffi.Int32> validwidth,
  ) {
    return _ncstrwidth(
      egcs,
      validbytes,
      validwidth,
    );
  }

  late final _ncstrwidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('ncstrwidth');
  late final _ncstrwidth = _ncstrwidthPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  int notcurses_ucs32_to_utf8(
    ffi.Pointer<ffi.Uint32> ucs32,
    int ucs32count,
    ffi.Pointer<ffi.Uint8> resultbuf,
    int buflen,
  ) {
    return _notcurses_ucs32_to_utf8(
      ucs32,
      ucs32count,
      resultbuf,
      buflen,
    );
  }

  late final _notcurses_ucs32_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32,
              ffi.Pointer<ffi.Uint8>, size_t)>>('notcurses_ucs32_to_utf8');
  late final _notcurses_ucs32_to_utf8 = _notcurses_ucs32_to_utf8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int nccell_load(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    ffi.Pointer<ffi.Int8> gcluster,
  ) {
    return _nccell_load(
      n,
      c,
      gcluster,
    );
  }

  late final _nccell_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>,
              ffi.Pointer<ffi.Int8>)>>('nccell_load');
  late final _nccell_load = _nccell_loadPtr.asFunction<
      int Function(
          ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<ffi.Int8>)>();

  int nccell_duplicate(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> targ,
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_duplicate(
      n,
      targ,
      c,
    );
  }

  late final _nccell_duplicatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>,
              ffi.Pointer<nccell>)>>('nccell_duplicate');
  late final _nccell_duplicate = _nccell_duplicatePtr.asFunction<
      int Function(
          ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<nccell>)>();

  void nccell_release(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_release(
      n,
      c,
    );
  }

  late final _nccell_releasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>>('nccell_release');
  late final _nccell_release = _nccell_releasePtr
      .asFunction<void Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>();

  ffi.Pointer<ffi.Int8> nccell_extended_gcluster(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_extended_gcluster(
      n,
      c,
    );
  }

  late final _nccell_extended_gclusterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<nccell>)>>('nccell_extended_gcluster');
  late final _nccell_extended_gcluster =
      _nccell_extended_gclusterPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>();

  int notcurses_lex_margins(
    ffi.Pointer<ffi.Int8> op,
    ffi.Pointer<notcurses_options> opts,
  ) {
    return _notcurses_lex_margins(
      op,
      opts,
    );
  }

  late final _notcurses_lex_marginsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<notcurses_options>)>>('notcurses_lex_margins');
  late final _notcurses_lex_margins = _notcurses_lex_marginsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<notcurses_options>)>();

  int notcurses_lex_blitter(
    ffi.Pointer<ffi.Int8> op,
    ffi.Pointer<ffi.Int32> blitter,
  ) {
    return _notcurses_lex_blitter(
      op,
      blitter,
    );
  }

  late final _notcurses_lex_blitterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>>('notcurses_lex_blitter');
  late final _notcurses_lex_blitter = _notcurses_lex_blitterPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> notcurses_str_blitter(
    int blitter,
  ) {
    return _notcurses_str_blitter(
      blitter,
    );
  }

  late final _notcurses_str_blitterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'notcurses_str_blitter');
  late final _notcurses_str_blitter = _notcurses_str_blitterPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int notcurses_lex_scalemode(
    ffi.Pointer<ffi.Int8> op,
    ffi.Pointer<ffi.Int32> scalemode,
  ) {
    return _notcurses_lex_scalemode(
      op,
      scalemode,
    );
  }

  late final _notcurses_lex_scalemodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>>('notcurses_lex_scalemode');
  late final _notcurses_lex_scalemode = _notcurses_lex_scalemodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> notcurses_str_scalemode(
    int scalemode,
  ) {
    return _notcurses_str_scalemode(
      scalemode,
    );
  }

  late final _notcurses_str_scalemodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'notcurses_str_scalemode');
  late final _notcurses_str_scalemode = _notcurses_str_scalemodePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<notcurses> notcurses_init(
    ffi.Pointer<notcurses_options> opts,
    ffi.Pointer<FILE> fp,
  ) {
    return _notcurses_init(
      opts,
      fp,
    );
  }

  late final _notcurses_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<notcurses> Function(ffi.Pointer<notcurses_options>,
              ffi.Pointer<FILE>)>>('notcurses_init');
  late final _notcurses_init = _notcurses_initPtr.asFunction<
      ffi.Pointer<notcurses> Function(
          ffi.Pointer<notcurses_options>, ffi.Pointer<FILE>)>();

  ffi.Pointer<notcurses> notcurses_core_init(
    ffi.Pointer<notcurses_options> opts,
    ffi.Pointer<FILE> fp,
  ) {
    return _notcurses_core_init(
      opts,
      fp,
    );
  }

  late final _notcurses_core_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<notcurses> Function(ffi.Pointer<notcurses_options>,
              ffi.Pointer<FILE>)>>('notcurses_core_init');
  late final _notcurses_core_init = _notcurses_core_initPtr.asFunction<
      ffi.Pointer<notcurses> Function(
          ffi.Pointer<notcurses_options>, ffi.Pointer<FILE>)>();

  int notcurses_stop(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_stop(
      nc,
    );
  }

  late final _notcurses_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_stop');
  late final _notcurses_stop =
      _notcurses_stopPtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_enter_alternate_screen(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_enter_alternate_screen(
      nc,
    );
  }

  late final _notcurses_enter_alternate_screenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_enter_alternate_screen');
  late final _notcurses_enter_alternate_screen =
      _notcurses_enter_alternate_screenPtr
          .asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_leave_alternate_screen(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_leave_alternate_screen(
      nc,
    );
  }

  late final _notcurses_leave_alternate_screenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_leave_alternate_screen');
  late final _notcurses_leave_alternate_screen =
      _notcurses_leave_alternate_screenPtr
          .asFunction<int Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<ncplane> notcurses_stdplane(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_stdplane(
      nc,
    );
  }

  late final _notcurses_stdplanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<notcurses>)>>('notcurses_stdplane');
  late final _notcurses_stdplane = _notcurses_stdplanePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<ncplane> notcurses_stdplane_const(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_stdplane_const(
      nc,
    );
  }

  late final _notcurses_stdplane_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<notcurses>)>>('notcurses_stdplane_const');
  late final _notcurses_stdplane_const = _notcurses_stdplane_constPtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<ncplane> ncpile_top(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncpile_top(
      n,
    );
  }

  late final _ncpile_topPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>)>>('ncpile_top');
  late final _ncpile_top = _ncpile_topPtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncplane> ncpile_bottom(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncpile_bottom(
      n,
    );
  }

  late final _ncpile_bottomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncplane>)>>('ncpile_bottom');
  late final _ncpile_bottom = _ncpile_bottomPtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>)>();

  int ncpile_render(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncpile_render(
      n,
    );
  }

  late final _ncpile_renderPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncpile_render');
  late final _ncpile_render =
      _ncpile_renderPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncpile_rasterize(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncpile_rasterize(
      n,
    );
  }

  late final _ncpile_rasterizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncpile_rasterize');
  late final _ncpile_rasterize =
      _ncpile_rasterizePtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncpile_render_to_buffer(
    ffi.Pointer<ncplane> p,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
    ffi.Pointer<size_t> buflen,
  ) {
    return _ncpile_render_to_buffer(
      p,
      buf,
      buflen,
    );
  }

  late final _ncpile_render_to_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>)>>('ncpile_render_to_buffer');
  late final _ncpile_render_to_buffer = _ncpile_render_to_bufferPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<size_t>)>();

  int ncpile_render_to_file(
    ffi.Pointer<ncplane> p,
    ffi.Pointer<FILE> fp,
  ) {
    return _ncpile_render_to_file(
      p,
      fp,
    );
  }

  late final _ncpile_render_to_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<FILE>)>>('ncpile_render_to_file');
  late final _ncpile_render_to_file = _ncpile_render_to_filePtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<FILE>)>();

  void notcurses_drop_planes(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_drop_planes(
      nc,
    );
  }

  late final _notcurses_drop_planesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<notcurses>)>>(
          'notcurses_drop_planes');
  late final _notcurses_drop_planes = _notcurses_drop_planesPtr
      .asFunction<void Function(ffi.Pointer<notcurses>)>();

  int notcurses_get(
    ffi.Pointer<notcurses> n,
    ffi.Pointer<timespec> ts,
    ffi.Pointer<ncinput> ni,
  ) {
    return _notcurses_get(
      n,
      ts,
      ni,
    );
  }

  late final _notcurses_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<notcurses>, ffi.Pointer<timespec>,
              ffi.Pointer<ncinput>)>>('notcurses_get');
  late final _notcurses_get = _notcurses_getPtr.asFunction<
      int Function(ffi.Pointer<notcurses>, ffi.Pointer<timespec>,
          ffi.Pointer<ncinput>)>();

  int notcurses_getvec(
    ffi.Pointer<notcurses> n,
    ffi.Pointer<timespec> ts,
    ffi.Pointer<ncinput> ni,
    int vcount,
  ) {
    return _notcurses_getvec(
      n,
      ts,
      ni,
      vcount,
    );
  }

  late final _notcurses_getvecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<notcurses>, ffi.Pointer<timespec>,
              ffi.Pointer<ncinput>, ffi.Int32)>>('notcurses_getvec');
  late final _notcurses_getvec = _notcurses_getvecPtr.asFunction<
      int Function(ffi.Pointer<notcurses>, ffi.Pointer<timespec>,
          ffi.Pointer<ncinput>, int)>();

  int notcurses_inputready_fd(
    ffi.Pointer<notcurses> n,
  ) {
    return _notcurses_inputready_fd(
      n,
    );
  }

  late final _notcurses_inputready_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_inputready_fd');
  late final _notcurses_inputready_fd = _notcurses_inputready_fdPtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_mice_enable(
    ffi.Pointer<notcurses> n,
    int eventmask,
  ) {
    return _notcurses_mice_enable(
      n,
      eventmask,
    );
  }

  late final _notcurses_mice_enablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<notcurses>, ffi.Uint32)>>('notcurses_mice_enable');
  late final _notcurses_mice_enable = _notcurses_mice_enablePtr
      .asFunction<int Function(ffi.Pointer<notcurses>, int)>();

  int notcurses_linesigs_disable(
    ffi.Pointer<notcurses> n,
  ) {
    return _notcurses_linesigs_disable(
      n,
    );
  }

  late final _notcurses_linesigs_disablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_linesigs_disable');
  late final _notcurses_linesigs_disable = _notcurses_linesigs_disablePtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_linesigs_enable(
    ffi.Pointer<notcurses> n,
  ) {
    return _notcurses_linesigs_enable(
      n,
    );
  }

  late final _notcurses_linesigs_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_linesigs_enable');
  late final _notcurses_linesigs_enable = _notcurses_linesigs_enablePtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_refresh(
    ffi.Pointer<notcurses> n,
    ffi.Pointer<ffi.Uint32> y,
    ffi.Pointer<ffi.Uint32> x,
  ) {
    return _notcurses_refresh(
      n,
      y,
      x,
    );
  }

  late final _notcurses_refreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('notcurses_refresh');
  late final _notcurses_refresh = _notcurses_refreshPtr.asFunction<
      int Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<notcurses> ncplane_notcurses(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_notcurses(
      n,
    );
  }

  late final _ncplane_notcursesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<notcurses> Function(
              ffi.Pointer<ncplane>)>>('ncplane_notcurses');
  late final _ncplane_notcurses = _ncplane_notcursesPtr
      .asFunction<ffi.Pointer<notcurses> Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<notcurses> ncplane_notcurses_const(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_notcurses_const(
      n,
    );
  }

  late final _ncplane_notcurses_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<notcurses> Function(
              ffi.Pointer<ncplane>)>>('ncplane_notcurses_const');
  late final _ncplane_notcurses_const = _ncplane_notcurses_constPtr
      .asFunction<ffi.Pointer<notcurses> Function(ffi.Pointer<ncplane>)>();

  void ncplane_dim_yx(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Uint32> y,
    ffi.Pointer<ffi.Uint32> x,
  ) {
    return _ncplane_dim_yx(
      n,
      y,
      x,
    );
  }

  late final _ncplane_dim_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncplane_dim_yx');
  late final _ncplane_dim_yx = _ncplane_dim_yxPtr.asFunction<
      void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  void ncplane_pixel_geom(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Uint32> pxy,
    ffi.Pointer<ffi.Uint32> pxx,
    ffi.Pointer<ffi.Uint32> celldimy,
    ffi.Pointer<ffi.Uint32> celldimx,
    ffi.Pointer<ffi.Uint32> maxbmapy,
    ffi.Pointer<ffi.Uint32> maxbmapx,
  ) {
    return _ncplane_pixel_geom(
      n,
      pxy,
      pxx,
      celldimy,
      celldimx,
      maxbmapy,
      maxbmapx,
    );
  }

  late final _ncplane_pixel_geomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncplane_pixel_geom');
  late final _ncplane_pixel_geom = _ncplane_pixel_geomPtr.asFunction<
      void Function(
          ffi.Pointer<ncplane>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<ffi.Int8> notcurses_at_yx(
    ffi.Pointer<notcurses> nc,
    int yoff,
    int xoff,
    ffi.Pointer<ffi.Uint16> stylemask,
    ffi.Pointer<ffi.Uint64> channels,
  ) {
    return _notcurses_at_yx(
      nc,
      yoff,
      xoff,
      stylemask,
      channels,
    );
  }

  late final _notcurses_at_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<notcurses>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint64>)>>('notcurses_at_yx');
  late final _notcurses_at_yx = _notcurses_at_yxPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<notcurses>, int, int,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint64>)>();

  ffi.Pointer<ncplane> ncplane_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane_options> nopts,
  ) {
    return _ncplane_create(
      n,
      nopts,
    );
  }

  late final _ncplane_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane_options>)>>('ncplane_create');
  late final _ncplane_create = _ncplane_createPtr.asFunction<
      ffi.Pointer<ncplane> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncplane_options>)>();

  ffi.Pointer<ncplane> ncpile_create(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ncplane_options> nopts,
  ) {
    return _ncpile_create(
      nc,
      nopts,
    );
  }

  late final _ncpile_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>,
              ffi.Pointer<ncplane_options>)>>('ncpile_create');
  late final _ncpile_create = _ncpile_createPtr.asFunction<
      ffi.Pointer<ncplane> Function(
          ffi.Pointer<notcurses>, ffi.Pointer<ncplane_options>)>();

  int ncplane_resize_maximize(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_resize_maximize(
      n,
    );
  }

  late final _ncplane_resize_maximizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_resize_maximize');
  late final _ncplane_resize_maximize = _ncplane_resize_maximizePtr
      .asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_resize_marginalized(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_resize_marginalized(
      n,
    );
  }

  late final _ncplane_resize_marginalizedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_resize_marginalized');
  late final _ncplane_resize_marginalized = _ncplane_resize_marginalizedPtr
      .asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_resize_realign(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_resize_realign(
      n,
    );
  }

  late final _ncplane_resize_realignPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_resize_realign');
  late final _ncplane_resize_realign = _ncplane_resize_realignPtr
      .asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_resize_placewithin(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_resize_placewithin(
      n,
    );
  }

  late final _ncplane_resize_placewithinPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_resize_placewithin');
  late final _ncplane_resize_placewithin = _ncplane_resize_placewithinPtr
      .asFunction<int Function(ffi.Pointer<ncplane>)>();

  void ncplane_set_resizecb(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>
        resizecb,
  ) {
    return _ncplane_set_resizecb(
      n,
      resizecb,
    );
  }

  late final _ncplane_set_resizecbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(
                          ffi.Pointer<ncplane>)>>)>>('ncplane_set_resizecb');
  late final _ncplane_set_resizecb = _ncplane_set_resizecbPtr.asFunction<
      void Function(
          ffi.Pointer<ncplane>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>
      ncplane_resizecb(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_resizecb(
      n,
    );
  }

  late final _ncplane_resizecbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>
              Function(ffi.Pointer<ncplane>)>>('ncplane_resizecb');
  late final _ncplane_resizecb = _ncplane_resizecbPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>
          Function(ffi.Pointer<ncplane>)>();

  int ncplane_set_name(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _ncplane_set_name(
      n,
      name,
    );
  }

  late final _ncplane_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ffi.Int8>)>>('ncplane_set_name');
  late final _ncplane_set_name = _ncplane_set_namePtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ncplane_name(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_name(
      n,
    );
  }

  late final _ncplane_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncplane>)>>('ncplane_name');
  late final _ncplane_name = _ncplane_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncplane> ncplane_reparent(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane> newparent,
  ) {
    return _ncplane_reparent(
      n,
      newparent,
    );
  }

  late final _ncplane_reparentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>>('ncplane_reparent');
  late final _ncplane_reparent = _ncplane_reparentPtr.asFunction<
      ffi.Pointer<ncplane> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncplane> ncplane_reparent_family(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane> newparent,
  ) {
    return _ncplane_reparent_family(
      n,
      newparent,
    );
  }

  late final _ncplane_reparent_familyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>)>>('ncplane_reparent_family');
  late final _ncplane_reparent_family = _ncplane_reparent_familyPtr.asFunction<
      ffi.Pointer<ncplane> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncplane> ncplane_dup(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Void> opaque,
  ) {
    return _ncplane_dup(
      n,
      opaque,
    );
  }

  late final _ncplane_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncplane>, ffi.Pointer<ffi.Void>)>>('ncplane_dup');
  late final _ncplane_dup = _ncplane_dupPtr.asFunction<
      ffi.Pointer<ncplane> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ffi.Void>)>();

  void ncplane_translate(
    ffi.Pointer<ncplane> src,
    ffi.Pointer<ncplane> dst,
    ffi.Pointer<ffi.Int32> y,
    ffi.Pointer<ffi.Int32> x,
  ) {
    return _ncplane_translate(
      src,
      dst,
      y,
      x,
    );
  }

  late final _ncplane_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('ncplane_translate');
  late final _ncplane_translate = _ncplane_translatePtr.asFunction<
      void Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>,
          ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  int ncplane_translate_abs(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int32> y,
    ffi.Pointer<ffi.Int32> x,
  ) {
    return _ncplane_translate_abs(
      n,
      y,
      x,
    );
  }

  late final _ncplane_translate_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('ncplane_translate_abs');
  late final _ncplane_translate_abs = _ncplane_translate_absPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  int ncplane_set_scrolling(
    ffi.Pointer<ncplane> n,
    int scrollp,
  ) {
    return _ncplane_set_scrolling(
      n,
      scrollp,
    );
  }

  late final _ncplane_set_scrollingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_scrolling');
  late final _ncplane_set_scrolling = _ncplane_set_scrollingPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_scrolling_p(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_scrolling_p(
      n,
    );
  }

  late final _ncplane_scrolling_pPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_scrolling_p');
  late final _ncplane_scrolling_p =
      _ncplane_scrolling_pPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_set_autogrow(
    ffi.Pointer<ncplane> n,
    int growp,
  ) {
    return _ncplane_set_autogrow(
      n,
      growp,
    );
  }

  late final _ncplane_set_autogrowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_autogrow');
  late final _ncplane_set_autogrow = _ncplane_set_autogrowPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_autogrow_p(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_autogrow_p(
      n,
    );
  }

  late final _ncplane_autogrow_pPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_autogrow_p');
  late final _ncplane_autogrow_p =
      _ncplane_autogrow_pPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncpalette> ncpalette_new(
    ffi.Pointer<notcurses> nc,
  ) {
    return _ncpalette_new(
      nc,
    );
  }

  late final _ncpalette_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncpalette> Function(
              ffi.Pointer<notcurses>)>>('ncpalette_new');
  late final _ncpalette_new = _ncpalette_newPtr
      .asFunction<ffi.Pointer<ncpalette> Function(ffi.Pointer<notcurses>)>();

  int ncpalette_use(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ncpalette> p,
  ) {
    return _ncpalette_use(
      nc,
      p,
    );
  }

  late final _ncpalette_usePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<notcurses>,
              ffi.Pointer<ncpalette>)>>('ncpalette_use');
  late final _ncpalette_use = _ncpalette_usePtr.asFunction<
      int Function(ffi.Pointer<notcurses>, ffi.Pointer<ncpalette>)>();

  void ncpalette_free(
    ffi.Pointer<ncpalette> p,
  ) {
    return _ncpalette_free(
      p,
    );
  }

  late final _ncpalette_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncpalette>)>>(
          'ncpalette_free');
  late final _ncpalette_free =
      _ncpalette_freePtr.asFunction<void Function(ffi.Pointer<ncpalette>)>();

  int notcurses_supported_styles(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_supported_styles(
      nc,
    );
  }

  late final _notcurses_supported_stylesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_supported_styles');
  late final _notcurses_supported_styles = _notcurses_supported_stylesPtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_palette_size(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_palette_size(
      nc,
    );
  }

  late final _notcurses_palette_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_palette_size');
  late final _notcurses_palette_size = _notcurses_palette_sizePtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<ffi.Int8> notcurses_detected_terminal(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_detected_terminal(
      nc,
    );
  }

  late final _notcurses_detected_terminalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<notcurses>)>>('notcurses_detected_terminal');
  late final _notcurses_detected_terminal = _notcurses_detected_terminalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<nccapabilities> notcurses_capabilities(
    ffi.Pointer<notcurses> n,
  ) {
    return _notcurses_capabilities(
      n,
    );
  }

  late final _notcurses_capabilitiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nccapabilities> Function(
              ffi.Pointer<notcurses>)>>('notcurses_capabilities');
  late final _notcurses_capabilities = _notcurses_capabilitiesPtr.asFunction<
      ffi.Pointer<nccapabilities> Function(ffi.Pointer<notcurses>)>();

  int notcurses_check_pixel_support(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_check_pixel_support(
      nc,
    );
  }

  late final _notcurses_check_pixel_supportPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_check_pixel_support');
  late final _notcurses_check_pixel_support = _notcurses_check_pixel_supportPtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_canopen_images(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_canopen_images(
      nc,
    );
  }

  late final _notcurses_canopen_imagesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_canopen_images');
  late final _notcurses_canopen_images = _notcurses_canopen_imagesPtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_canopen_videos(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_canopen_videos(
      nc,
    );
  }

  late final _notcurses_canopen_videosPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_canopen_videos');
  late final _notcurses_canopen_videos = _notcurses_canopen_videosPtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<ncstats> notcurses_stats_alloc(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_stats_alloc(
      nc,
    );
  }

  late final _notcurses_stats_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncstats> Function(
              ffi.Pointer<notcurses>)>>('notcurses_stats_alloc');
  late final _notcurses_stats_alloc = _notcurses_stats_allocPtr
      .asFunction<ffi.Pointer<ncstats> Function(ffi.Pointer<notcurses>)>();

  void notcurses_stats(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ncstats> stats,
  ) {
    return _notcurses_stats(
      nc,
      stats,
    );
  }

  late final _notcurses_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<notcurses>,
              ffi.Pointer<ncstats>)>>('notcurses_stats');
  late final _notcurses_stats = _notcurses_statsPtr.asFunction<
      void Function(ffi.Pointer<notcurses>, ffi.Pointer<ncstats>)>();

  void notcurses_stats_reset(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ncstats> stats,
  ) {
    return _notcurses_stats_reset(
      nc,
      stats,
    );
  }

  late final _notcurses_stats_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<notcurses>,
              ffi.Pointer<ncstats>)>>('notcurses_stats_reset');
  late final _notcurses_stats_reset = _notcurses_stats_resetPtr.asFunction<
      void Function(ffi.Pointer<notcurses>, ffi.Pointer<ncstats>)>();

  int ncplane_resize(
    ffi.Pointer<ncplane> n,
    int keepy,
    int keepx,
    int keepleny,
    int keeplenx,
    int yoff,
    int xoff,
    int ylen,
    int xlen,
  ) {
    return _ncplane_resize(
      n,
      keepy,
      keepx,
      keepleny,
      keeplenx,
      yoff,
      xoff,
      ylen,
      xlen,
    );
  }

  late final _ncplane_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32)>>('ncplane_resize');
  late final _ncplane_resize = _ncplane_resizePtr.asFunction<
      int Function(
          ffi.Pointer<ncplane>, int, int, int, int, int, int, int, int)>();

  int ncplane_destroy(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_destroy(
      n,
    );
  }

  late final _ncplane_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_destroy');
  late final _ncplane_destroy =
      _ncplane_destroyPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_set_base_cell(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
  ) {
    return _ncplane_set_base_cell(
      n,
      c,
    );
  }

  late final _ncplane_set_base_cellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<nccell>)>>('ncplane_set_base_cell');
  late final _ncplane_set_base_cell = _ncplane_set_base_cellPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>();

  int ncplane_set_base(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> egc,
    int stylemask,
    int channels,
  ) {
    return _ncplane_set_base(
      n,
      egc,
      stylemask,
      channels,
    );
  }

  late final _ncplane_set_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>,
              ffi.Uint16, ffi.Uint64)>>('ncplane_set_base');
  late final _ncplane_set_base = _ncplane_set_basePtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>, int, int)>();

  int ncplane_base(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
  ) {
    return _ncplane_base(
      n,
      c,
    );
  }

  late final _ncplane_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>>('ncplane_base');
  late final _ncplane_base = _ncplane_basePtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>();

  void ncplane_yx(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int32> y,
    ffi.Pointer<ffi.Int32> x,
  ) {
    return _ncplane_yx(
      n,
      y,
      x,
    );
  }

  late final _ncplane_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('ncplane_yx');
  late final _ncplane_yx = _ncplane_yxPtr.asFunction<
      void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  int ncplane_y(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_y(
      n,
    );
  }

  late final _ncplane_yPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_y');
  late final _ncplane_y =
      _ncplane_yPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_x(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_x(
      n,
    );
  }

  late final _ncplane_xPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_x');
  late final _ncplane_x =
      _ncplane_xPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_move_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
  ) {
    return _ncplane_move_yx(
      n,
      y,
      x,
    );
  }

  late final _ncplane_move_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32)>>('ncplane_move_yx');
  late final _ncplane_move_yx = _ncplane_move_yxPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int, int)>();

  void ncplane_abs_yx(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int32> y,
    ffi.Pointer<ffi.Int32> x,
  ) {
    return _ncplane_abs_yx(
      n,
      y,
      x,
    );
  }

  late final _ncplane_abs_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('ncplane_abs_yx');
  late final _ncplane_abs_yx = _ncplane_abs_yxPtr.asFunction<
      void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  int ncplane_abs_y(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_abs_y(
      n,
    );
  }

  late final _ncplane_abs_yPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_abs_y');
  late final _ncplane_abs_y =
      _ncplane_abs_yPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_abs_x(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_abs_x(
      n,
    );
  }

  late final _ncplane_abs_xPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_abs_x');
  late final _ncplane_abs_x =
      _ncplane_abs_xPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncplane> ncplane_parent(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_parent(
      n,
    );
  }

  late final _ncplane_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncplane>)>>('ncplane_parent');
  late final _ncplane_parent = _ncplane_parentPtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncplane> ncplane_parent_const(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_parent_const(
      n,
    );
  }

  late final _ncplane_parent_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncplane>)>>('ncplane_parent_const');
  late final _ncplane_parent_const = _ncplane_parent_constPtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>)>();

  int ncplane_move_above(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane> above,
  ) {
    return _ncplane_move_above(
      n,
      above,
    );
  }

  late final _ncplane_move_abovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>)>>('ncplane_move_above');
  late final _ncplane_move_above = _ncplane_move_abovePtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  int ncplane_move_below(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane> below,
  ) {
    return _ncplane_move_below(
      n,
      below,
    );
  }

  late final _ncplane_move_belowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>)>>('ncplane_move_below');
  late final _ncplane_move_below = _ncplane_move_belowPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  int ncplane_move_family_above(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane> targ,
  ) {
    return _ncplane_move_family_above(
      n,
      targ,
    );
  }

  late final _ncplane_move_family_abovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>)>>('ncplane_move_family_above');
  late final _ncplane_move_family_above = _ncplane_move_family_abovePtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  int ncplane_move_family_below(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane> targ,
  ) {
    return _ncplane_move_family_below(
      n,
      targ,
    );
  }

  late final _ncplane_move_family_belowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>)>>('ncplane_move_family_below');
  late final _ncplane_move_family_below = _ncplane_move_family_belowPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncplane> ncplane_below(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_below(
      n,
    );
  }

  late final _ncplane_belowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncplane>)>>('ncplane_below');
  late final _ncplane_below = _ncplane_belowPtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncplane> ncplane_above(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_above(
      n,
    );
  }

  late final _ncplane_abovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncplane>)>>('ncplane_above');
  late final _ncplane_above = _ncplane_abovePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>)>();

  int ncplane_scrollup(
    ffi.Pointer<ncplane> n,
    int r,
  ) {
    return _ncplane_scrollup(
      n,
      r,
    );
  }

  late final _ncplane_scrollupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Int32)>>('ncplane_scrollup');
  late final _ncplane_scrollup = _ncplane_scrollupPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_scrollup_child(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane> child,
  ) {
    return _ncplane_scrollup_child(
      n,
      child,
    );
  }

  late final _ncplane_scrollup_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>)>>('ncplane_scrollup_child');
  late final _ncplane_scrollup_child = _ncplane_scrollup_childPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  int ncplane_rotate_cw(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_rotate_cw(
      n,
    );
  }

  late final _ncplane_rotate_cwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_rotate_cw');
  late final _ncplane_rotate_cw =
      _ncplane_rotate_cwPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_rotate_ccw(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_rotate_ccw(
      n,
    );
  }

  late final _ncplane_rotate_ccwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_rotate_ccw');
  late final _ncplane_rotate_ccw =
      _ncplane_rotate_ccwPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<ffi.Int8> ncplane_at_cursor(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Uint16> stylemask,
    ffi.Pointer<ffi.Uint64> channels,
  ) {
    return _ncplane_at_cursor(
      n,
      stylemask,
      channels,
    );
  }

  late final _ncplane_at_cursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint64>)>>('ncplane_at_cursor');
  late final _ncplane_at_cursor = _ncplane_at_cursorPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncplane>,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint64>)>();

  int ncplane_at_cursor_cell(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
  ) {
    return _ncplane_at_cursor_cell(
      n,
      c,
    );
  }

  late final _ncplane_at_cursor_cellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<nccell>)>>('ncplane_at_cursor_cell');
  late final _ncplane_at_cursor_cell = _ncplane_at_cursor_cellPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>();

  ffi.Pointer<ffi.Int8> ncplane_at_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<ffi.Uint16> stylemask,
    ffi.Pointer<ffi.Uint64> channels,
  ) {
    return _ncplane_at_yx(
      n,
      y,
      x,
      stylemask,
      channels,
    );
  }

  late final _ncplane_at_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint64>)>>('ncplane_at_yx');
  late final _ncplane_at_yx = _ncplane_at_yxPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncplane>, int, int,
          ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint64>)>();

  int ncplane_at_yx_cell(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<nccell> c,
  ) {
    return _ncplane_at_yx_cell(
      n,
      y,
      x,
      c,
    );
  }

  late final _ncplane_at_yx_cellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32,
              ffi.Pointer<nccell>)>>('ncplane_at_yx_cell');
  late final _ncplane_at_yx_cell = _ncplane_at_yx_cellPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>)>();

  ffi.Pointer<ffi.Int8> ncplane_contents(
    ffi.Pointer<ncplane> n,
    int begy,
    int begx,
    int leny,
    int lenx,
  ) {
    return _ncplane_contents(
      n,
      begy,
      begx,
      leny,
      lenx,
    );
  }

  late final _ncplane_contentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncplane>, ffi.Int32,
              ffi.Int32, ffi.Uint32, ffi.Uint32)>>('ncplane_contents');
  late final _ncplane_contents = _ncplane_contentsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ncplane>, int, int, int, int)>();

  ffi.Pointer<ffi.Void> ncplane_set_userptr(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Void> opaque,
  ) {
    return _ncplane_set_userptr(
      n,
      opaque,
    );
  }

  late final _ncplane_set_userptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ffi.Void>)>>('ncplane_set_userptr');
  late final _ncplane_set_userptr = _ncplane_set_userptrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ncplane_userptr(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_userptr(
      n,
    );
  }

  late final _ncplane_userptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ncplane>)>>('ncplane_userptr');
  late final _ncplane_userptr = _ncplane_userptrPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ncplane>)>();

  void ncplane_center_abs(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int32> y,
    ffi.Pointer<ffi.Int32> x,
  ) {
    return _ncplane_center_abs(
      n,
      y,
      x,
    );
  }

  late final _ncplane_center_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('ncplane_center_abs');
  late final _ncplane_center_abs = _ncplane_center_absPtr.asFunction<
      void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Uint32> ncplane_as_rgba(
    ffi.Pointer<ncplane> n,
    int blit,
    int begy,
    int begx,
    int leny,
    int lenx,
    ffi.Pointer<ffi.Uint32> pxdimy,
    ffi.Pointer<ffi.Uint32> pxdimx,
  ) {
    return _ncplane_as_rgba(
      n,
      blit,
      begy,
      begx,
      leny,
      lenx,
      pxdimy,
      pxdimx,
    );
  }

  late final _ncplane_as_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncplane_as_rgba');
  late final _ncplane_as_rgba = _ncplane_as_rgbaPtr.asFunction<
      ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<ncplane>, int, int, int, int,
          int, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int ncplane_cursor_move_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
  ) {
    return _ncplane_cursor_move_yx(
      n,
      y,
      x,
    );
  }

  late final _ncplane_cursor_move_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32,
              ffi.Int32)>>('ncplane_cursor_move_yx');
  late final _ncplane_cursor_move_yx = _ncplane_cursor_move_yxPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int, int)>();

  int ncplane_cursor_move_rel(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
  ) {
    return _ncplane_cursor_move_rel(
      n,
      y,
      x,
    );
  }

  late final _ncplane_cursor_move_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32,
              ffi.Int32)>>('ncplane_cursor_move_rel');
  late final _ncplane_cursor_move_rel = _ncplane_cursor_move_relPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int, int)>();

  void ncplane_home(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_home(
      n,
    );
  }

  late final _ncplane_homePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>(
          'ncplane_home');
  late final _ncplane_home =
      _ncplane_homePtr.asFunction<void Function(ffi.Pointer<ncplane>)>();

  void ncplane_cursor_yx(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Uint32> y,
    ffi.Pointer<ffi.Uint32> x,
  ) {
    return _ncplane_cursor_yx(
      n,
      y,
      x,
    );
  }

  late final _ncplane_cursor_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncplane_cursor_yx');
  late final _ncplane_cursor_yx = _ncplane_cursor_yxPtr.asFunction<
      void Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  int ncplane_channels(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_channels(
      n,
    );
  }

  late final _ncplane_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_channels');
  late final _ncplane_channels =
      _ncplane_channelsPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_styles(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_styles(
      n,
    );
  }

  late final _ncplane_stylesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<ncplane>)>>(
          'ncplane_styles');
  late final _ncplane_styles =
      _ncplane_stylesPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_putc_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<nccell> c,
  ) {
    return _ncplane_putc_yx(
      n,
      y,
      x,
      c,
    );
  }

  late final _ncplane_putc_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32,
              ffi.Pointer<nccell>)>>('ncplane_putc_yx');
  late final _ncplane_putc_yx = _ncplane_putc_yxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>)>();

  int ncplane_putchar_stained(
    ffi.Pointer<ncplane> n,
    int c,
  ) {
    return _ncplane_putchar_stained(
      n,
      c,
    );
  }

  late final _ncplane_putchar_stainedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Int8)>>('ncplane_putchar_stained');
  late final _ncplane_putchar_stained = _ncplane_putchar_stainedPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_putegc_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<ffi.Int8> gclust,
    ffi.Pointer<size_t> sbytes,
  ) {
    return _ncplane_putegc_yx(
      n,
      y,
      x,
      gclust,
      sbytes,
    );
  }

  late final _ncplane_putegc_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<size_t>)>>('ncplane_putegc_yx');
  late final _ncplane_putegc_yx = _ncplane_putegc_yxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<size_t>)>();

  int ncplane_putegc_stained(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> gclust,
    ffi.Pointer<size_t> sbytes,
  ) {
    return _ncplane_putegc_stained(
      n,
      gclust,
      sbytes,
    );
  }

  late final _ncplane_putegc_stainedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<size_t>)>>('ncplane_putegc_stained');
  late final _ncplane_putegc_stained = _ncplane_putegc_stainedPtr.asFunction<
      int Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>, ffi.Pointer<size_t>)>();

  int ncplane_putwegc_stained(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<wchar_t> gclust,
    ffi.Pointer<size_t> sbytes,
  ) {
    return _ncplane_putwegc_stained(
      n,
      gclust,
      sbytes,
    );
  }

  late final _ncplane_putwegc_stainedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>,
              ffi.Pointer<size_t>)>>('ncplane_putwegc_stained');
  late final _ncplane_putwegc_stained = _ncplane_putwegc_stainedPtr.asFunction<
      int Function(
          ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>, ffi.Pointer<size_t>)>();

  int ncplane_putnstr_aligned(
    ffi.Pointer<ncplane> n,
    int y,
    int align,
    int s,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _ncplane_putnstr_aligned(
      n,
      y,
      align,
      s,
      str,
    );
  }

  late final _ncplane_putnstr_alignedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, size_t,
              ffi.Pointer<ffi.Int8>)>>('ncplane_putnstr_aligned');
  late final _ncplane_putnstr_aligned = _ncplane_putnstr_alignedPtr.asFunction<
      int Function(
          ffi.Pointer<ncplane>, int, int, int, ffi.Pointer<ffi.Int8>)>();

  int ncplane_putwstr_stained(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<wchar_t> gclustarr,
  ) {
    return _ncplane_putwstr_stained(
      n,
      gclustarr,
    );
  }

  late final _ncplane_putwstr_stainedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<wchar_t>)>>('ncplane_putwstr_stained');
  late final _ncplane_putwstr_stained = _ncplane_putwstr_stainedPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>)>();

  int ncplane_vprintf_aligned(
    ffi.Pointer<ncplane> n,
    int y,
    int align,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> ap,
  ) {
    return _ncplane_vprintf_aligned(
      n,
      y,
      align,
      format,
      ap,
    );
  }

  late final _ncplane_vprintf_alignedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('ncplane_vprintf_aligned');
  late final _ncplane_vprintf_aligned = _ncplane_vprintf_alignedPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int ncplane_vprintf_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> ap,
  ) {
    return _ncplane_vprintf_yx(
      n,
      y,
      x,
      format,
      ap,
    );
  }

  late final _ncplane_vprintf_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('ncplane_vprintf_yx');
  late final _ncplane_vprintf_yx = _ncplane_vprintf_yxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int ncplane_vprintf_stained(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> ap,
  ) {
    return _ncplane_vprintf_stained(
      n,
      format,
      ap,
    );
  }

  late final _ncplane_vprintf_stainedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('ncplane_vprintf_stained');
  late final _ncplane_vprintf_stained = _ncplane_vprintf_stainedPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int ncplane_puttext(
    ffi.Pointer<ncplane> n,
    int y,
    int align,
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<size_t> bytes,
  ) {
    return _ncplane_puttext(
      n,
      y,
      align,
      text,
      bytes,
    );
  }

  late final _ncplane_puttextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<size_t>)>>('ncplane_puttext');
  late final _ncplane_puttext = _ncplane_puttextPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<size_t>)>();

  int ncplane_hline_interp(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    int len,
    int c1,
    int c2,
  ) {
    return _ncplane_hline_interp(
      n,
      c,
      len,
      c1,
      c2,
    );
  }

  late final _ncplane_hline_interpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>,
              ffi.Uint32, ffi.Uint64, ffi.Uint64)>>('ncplane_hline_interp');
  late final _ncplane_hline_interp = _ncplane_hline_interpPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, int, int, int)>();

  int ncplane_vline_interp(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    int len,
    int c1,
    int c2,
  ) {
    return _ncplane_vline_interp(
      n,
      c,
      len,
      c1,
      c2,
    );
  }

  late final _ncplane_vline_interpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>,
              ffi.Uint32, ffi.Uint64, ffi.Uint64)>>('ncplane_vline_interp');
  late final _ncplane_vline_interp = _ncplane_vline_interpPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, int, int, int)>();

  int ncplane_box(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hline,
    ffi.Pointer<nccell> vline,
    int ystop,
    int xstop,
    int ctlword,
  ) {
    return _ncplane_box(
      n,
      ul,
      ur,
      ll,
      lr,
      hline,
      vline,
      ystop,
      xstop,
      ctlword,
    );
  }

  late final _ncplane_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ncplane_box');
  late final _ncplane_box = _ncplane_boxPtr.asFunction<
      int Function(
          ffi.Pointer<ncplane>,
          ffi.Pointer<nccell>,
          ffi.Pointer<nccell>,
          ffi.Pointer<nccell>,
          ffi.Pointer<nccell>,
          ffi.Pointer<nccell>,
          ffi.Pointer<nccell>,
          int,
          int,
          int)>();

  int ncplane_polyfill_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<nccell> c,
  ) {
    return _ncplane_polyfill_yx(
      n,
      y,
      x,
      c,
    );
  }

  late final _ncplane_polyfill_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32,
              ffi.Pointer<nccell>)>>('ncplane_polyfill_yx');
  late final _ncplane_polyfill_yx = _ncplane_polyfill_yxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>)>();

  int ncplane_gradient(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    int ylen,
    int xlen,
    ffi.Pointer<ffi.Int8> egc,
    int styles,
    int ul,
    int ur,
    int ll,
    int lr,
  ) {
    return _ncplane_gradient(
      n,
      y,
      x,
      ylen,
      xlen,
      egc,
      styles,
      ul,
      ur,
      ll,
      lr,
    );
  }

  late final _ncplane_gradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              ffi.Uint16,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('ncplane_gradient');
  late final _ncplane_gradient = _ncplane_gradientPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, int, int,
          ffi.Pointer<ffi.Int8>, int, int, int, int, int)>();

  int ncplane_gradient2x1(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    int ylen,
    int xlen,
    int ul,
    int ur,
    int ll,
    int lr,
  ) {
    return _ncplane_gradient2x1(
      n,
      y,
      x,
      ylen,
      xlen,
      ul,
      ur,
      ll,
      lr,
    );
  }

  late final _ncplane_gradient2x1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ncplane_gradient2x1');
  late final _ncplane_gradient2x1 = _ncplane_gradient2x1Ptr.asFunction<
      int Function(
          ffi.Pointer<ncplane>, int, int, int, int, int, int, int, int)>();

  int ncplane_format(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    int ylen,
    int xlen,
    int stylemask,
  ) {
    return _ncplane_format(
      n,
      y,
      x,
      ylen,
      xlen,
      stylemask,
    );
  }

  late final _ncplane_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32,
              ffi.Uint32, ffi.Uint32, ffi.Uint16)>>('ncplane_format');
  late final _ncplane_format = _ncplane_formatPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, int, int, int)>();

  int ncplane_stain(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    int ylen,
    int xlen,
    int ul,
    int ur,
    int ll,
    int lr,
  ) {
    return _ncplane_stain(
      n,
      y,
      x,
      ylen,
      xlen,
      ul,
      ur,
      ll,
      lr,
    );
  }

  late final _ncplane_stainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('ncplane_stain');
  late final _ncplane_stain = _ncplane_stainPtr.asFunction<
      int Function(
          ffi.Pointer<ncplane>, int, int, int, int, int, int, int, int)>();

  int ncplane_mergedown_simple(
    ffi.Pointer<ncplane> src,
    ffi.Pointer<ncplane> dst,
  ) {
    return _ncplane_mergedown_simple(
      src,
      dst,
    );
  }

  late final _ncplane_mergedown_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>)>>('ncplane_mergedown_simple');
  late final _ncplane_mergedown_simple = _ncplane_mergedown_simplePtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  int ncplane_mergedown(
    ffi.Pointer<ncplane> src,
    ffi.Pointer<ncplane> dst,
    int begsrcy,
    int begsrcx,
    int leny,
    int lenx,
    int dsty,
    int dstx,
  ) {
    return _ncplane_mergedown(
      src,
      dst,
      begsrcy,
      begsrcx,
      leny,
      lenx,
      dsty,
      dstx,
    );
  }

  late final _ncplane_mergedownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32)>>('ncplane_mergedown');
  late final _ncplane_mergedown = _ncplane_mergedownPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>, int, int, int,
          int, int, int)>();

  void ncplane_erase(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_erase(
      n,
    );
  }

  late final _ncplane_erasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>(
          'ncplane_erase');
  late final _ncplane_erase =
      _ncplane_erasePtr.asFunction<void Function(ffi.Pointer<ncplane>)>();

  int ncplane_erase_region(
    ffi.Pointer<ncplane> n,
    int ystart,
    int xstart,
    int ylen,
    int xlen,
  ) {
    return _ncplane_erase_region(
      n,
      ystart,
      xstart,
      ylen,
      xlen,
    );
  }

  late final _ncplane_erase_regionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('ncplane_erase_region');
  late final _ncplane_erase_region = _ncplane_erase_regionPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int, int, int, int)>();

  void ncplane_set_channels(
    ffi.Pointer<ncplane> n,
    int channels,
  ) {
    return _ncplane_set_channels(
      n,
      channels,
    );
  }

  late final _ncplane_set_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ncplane>, ffi.Uint64)>>('ncplane_set_channels');
  late final _ncplane_set_channels = _ncplane_set_channelsPtr
      .asFunction<void Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_set_bchannel(
    ffi.Pointer<ncplane> n,
    int channel,
  ) {
    return _ncplane_set_bchannel(
      n,
      channel,
    );
  }

  late final _ncplane_set_bchannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_bchannel');
  late final _ncplane_set_bchannel = _ncplane_set_bchannelPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_set_fchannel(
    ffi.Pointer<ncplane> n,
    int channel,
  ) {
    return _ncplane_set_fchannel(
      n,
      channel,
    );
  }

  late final _ncplane_set_fchannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_fchannel');
  late final _ncplane_set_fchannel = _ncplane_set_fchannelPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  void ncplane_set_styles(
    ffi.Pointer<ncplane> n,
    int stylebits,
  ) {
    return _ncplane_set_styles(
      n,
      stylebits,
    );
  }

  late final _ncplane_set_stylesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_styles');
  late final _ncplane_set_styles = _ncplane_set_stylesPtr
      .asFunction<void Function(ffi.Pointer<ncplane>, int)>();

  void ncplane_on_styles(
    ffi.Pointer<ncplane> n,
    int stylebits,
  ) {
    return _ncplane_on_styles(
      n,
      stylebits,
    );
  }

  late final _ncplane_on_stylesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_on_styles');
  late final _ncplane_on_styles = _ncplane_on_stylesPtr
      .asFunction<void Function(ffi.Pointer<ncplane>, int)>();

  void ncplane_off_styles(
    ffi.Pointer<ncplane> n,
    int stylebits,
  ) {
    return _ncplane_off_styles(
      n,
      stylebits,
    );
  }

  late final _ncplane_off_stylesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_off_styles');
  late final _ncplane_off_styles = _ncplane_off_stylesPtr
      .asFunction<void Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_set_fg_rgb8(
    ffi.Pointer<ncplane> n,
    int r,
    int g,
    int b,
  ) {
    return _ncplane_set_fg_rgb8(
      n,
      r,
      g,
      b,
    );
  }

  late final _ncplane_set_fg_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('ncplane_set_fg_rgb8');
  late final _ncplane_set_fg_rgb8 = _ncplane_set_fg_rgb8Ptr
      .asFunction<int Function(ffi.Pointer<ncplane>, int, int, int)>();

  int ncplane_set_bg_rgb8(
    ffi.Pointer<ncplane> n,
    int r,
    int g,
    int b,
  ) {
    return _ncplane_set_bg_rgb8(
      n,
      r,
      g,
      b,
    );
  }

  late final _ncplane_set_bg_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('ncplane_set_bg_rgb8');
  late final _ncplane_set_bg_rgb8 = _ncplane_set_bg_rgb8Ptr
      .asFunction<int Function(ffi.Pointer<ncplane>, int, int, int)>();

  void ncplane_set_bg_rgb8_clipped(
    ffi.Pointer<ncplane> n,
    int r,
    int g,
    int b,
  ) {
    return _ncplane_set_bg_rgb8_clipped(
      n,
      r,
      g,
      b,
    );
  }

  late final _ncplane_set_bg_rgb8_clippedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('ncplane_set_bg_rgb8_clipped');
  late final _ncplane_set_bg_rgb8_clipped = _ncplane_set_bg_rgb8_clippedPtr
      .asFunction<void Function(ffi.Pointer<ncplane>, int, int, int)>();

  void ncplane_set_fg_rgb8_clipped(
    ffi.Pointer<ncplane> n,
    int r,
    int g,
    int b,
  ) {
    return _ncplane_set_fg_rgb8_clipped(
      n,
      r,
      g,
      b,
    );
  }

  late final _ncplane_set_fg_rgb8_clippedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('ncplane_set_fg_rgb8_clipped');
  late final _ncplane_set_fg_rgb8_clipped = _ncplane_set_fg_rgb8_clippedPtr
      .asFunction<void Function(ffi.Pointer<ncplane>, int, int, int)>();

  int ncplane_set_fg_rgb(
    ffi.Pointer<ncplane> n,
    int channel,
  ) {
    return _ncplane_set_fg_rgb(
      n,
      channel,
    );
  }

  late final _ncplane_set_fg_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_fg_rgb');
  late final _ncplane_set_fg_rgb = _ncplane_set_fg_rgbPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_set_bg_rgb(
    ffi.Pointer<ncplane> n,
    int channel,
  ) {
    return _ncplane_set_bg_rgb(
      n,
      channel,
    );
  }

  late final _ncplane_set_bg_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_bg_rgb');
  late final _ncplane_set_bg_rgb = _ncplane_set_bg_rgbPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  void ncplane_set_fg_default(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_set_fg_default(
      n,
    );
  }

  late final _ncplane_set_fg_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>(
          'ncplane_set_fg_default');
  late final _ncplane_set_fg_default = _ncplane_set_fg_defaultPtr
      .asFunction<void Function(ffi.Pointer<ncplane>)>();

  void ncplane_set_bg_default(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_set_bg_default(
      n,
    );
  }

  late final _ncplane_set_bg_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>(
          'ncplane_set_bg_default');
  late final _ncplane_set_bg_default = _ncplane_set_bg_defaultPtr
      .asFunction<void Function(ffi.Pointer<ncplane>)>();

  int ncplane_set_fg_palindex(
    ffi.Pointer<ncplane> n,
    int idx,
  ) {
    return _ncplane_set_fg_palindex(
      n,
      idx,
    );
  }

  late final _ncplane_set_fg_palindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_fg_palindex');
  late final _ncplane_set_fg_palindex = _ncplane_set_fg_palindexPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_set_bg_palindex(
    ffi.Pointer<ncplane> n,
    int idx,
  ) {
    return _ncplane_set_bg_palindex(
      n,
      idx,
    );
  }

  late final _ncplane_set_bg_palindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Uint32)>>('ncplane_set_bg_palindex');
  late final _ncplane_set_bg_palindex = _ncplane_set_bg_palindexPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_set_fg_alpha(
    ffi.Pointer<ncplane> n,
    int alpha,
  ) {
    return _ncplane_set_fg_alpha(
      n,
      alpha,
    );
  }

  late final _ncplane_set_fg_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Int32)>>('ncplane_set_fg_alpha');
  late final _ncplane_set_fg_alpha = _ncplane_set_fg_alphaPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_set_bg_alpha(
    ffi.Pointer<ncplane> n,
    int alpha,
  ) {
    return _ncplane_set_bg_alpha(
      n,
      alpha,
    );
  }

  late final _ncplane_set_bg_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Int32)>>('ncplane_set_bg_alpha');
  late final _ncplane_set_bg_alpha = _ncplane_set_bg_alphaPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_fadeout(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<timespec> ts,
    fadecb fader,
    ffi.Pointer<ffi.Void> curry,
  ) {
    return _ncplane_fadeout(
      n,
      ts,
      fader,
      curry,
    );
  }

  late final _ncplane_fadeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<timespec>,
              fadecb, ffi.Pointer<ffi.Void>)>>('ncplane_fadeout');
  late final _ncplane_fadeout = _ncplane_fadeoutPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<timespec>, fadecb,
          ffi.Pointer<ffi.Void>)>();

  int ncplane_fadein(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<timespec> ts,
    fadecb fader,
    ffi.Pointer<ffi.Void> curry,
  ) {
    return _ncplane_fadein(
      n,
      ts,
      fader,
      curry,
    );
  }

  late final _ncplane_fadeinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<timespec>,
              fadecb, ffi.Pointer<ffi.Void>)>>('ncplane_fadein');
  late final _ncplane_fadein = _ncplane_fadeinPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<timespec>, fadecb,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ncfadectx> ncfadectx_setup(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncfadectx_setup(
      n,
    );
  }

  late final _ncfadectx_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncfadectx> Function(
              ffi.Pointer<ncplane>)>>('ncfadectx_setup');
  late final _ncfadectx_setup = _ncfadectx_setupPtr
      .asFunction<ffi.Pointer<ncfadectx> Function(ffi.Pointer<ncplane>)>();

  int ncfadectx_iterations(
    ffi.Pointer<ncfadectx> nctx,
  ) {
    return _ncfadectx_iterations(
      nctx,
    );
  }

  late final _ncfadectx_iterationsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncfadectx>)>>(
          'ncfadectx_iterations');
  late final _ncfadectx_iterations = _ncfadectx_iterationsPtr
      .asFunction<int Function(ffi.Pointer<ncfadectx>)>();

  int ncplane_fadeout_iteration(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncfadectx> nctx,
    int iter,
    fadecb fader,
    ffi.Pointer<ffi.Void> curry,
  ) {
    return _ncplane_fadeout_iteration(
      n,
      nctx,
      iter,
      fader,
      curry,
    );
  }

  late final _ncplane_fadeout_iterationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncfadectx>,
              ffi.Int32,
              fadecb,
              ffi.Pointer<ffi.Void>)>>('ncplane_fadeout_iteration');
  late final _ncplane_fadeout_iteration =
      _ncplane_fadeout_iterationPtr.asFunction<
          int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncfadectx>, int,
              fadecb, ffi.Pointer<ffi.Void>)>();

  int ncplane_fadein_iteration(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncfadectx> nctx,
    int iter,
    fadecb fader,
    ffi.Pointer<ffi.Void> curry,
  ) {
    return _ncplane_fadein_iteration(
      n,
      nctx,
      iter,
      fader,
      curry,
    );
  }

  late final _ncplane_fadein_iterationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncfadectx>,
              ffi.Int32,
              fadecb,
              ffi.Pointer<ffi.Void>)>>('ncplane_fadein_iteration');
  late final _ncplane_fadein_iteration =
      _ncplane_fadein_iterationPtr.asFunction<
          int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncfadectx>, int,
              fadecb, ffi.Pointer<ffi.Void>)>();

  int ncplane_pulse(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<timespec> ts,
    fadecb fader,
    ffi.Pointer<ffi.Void> curry,
  ) {
    return _ncplane_pulse(
      n,
      ts,
      fader,
      curry,
    );
  }

  late final _ncplane_pulsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<timespec>,
              fadecb, ffi.Pointer<ffi.Void>)>>('ncplane_pulse');
  late final _ncplane_pulse = _ncplane_pulsePtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<timespec>, fadecb,
          ffi.Pointer<ffi.Void>)>();

  void ncfadectx_free(
    ffi.Pointer<ncfadectx> nctx,
  ) {
    return _ncfadectx_free(
      nctx,
    );
  }

  late final _ncfadectx_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncfadectx>)>>(
          'ncfadectx_free');
  late final _ncfadectx_free =
      _ncfadectx_freePtr.asFunction<void Function(ffi.Pointer<ncfadectx>)>();

  ffi.Pointer<ncvisual> ncvisual_from_file(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _ncvisual_from_file(
      file,
    );
  }

  late final _ncvisual_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncvisual> Function(
              ffi.Pointer<ffi.Int8>)>>('ncvisual_from_file');
  late final _ncvisual_from_file = _ncvisual_from_filePtr
      .asFunction<ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ncvisual> ncvisual_from_rgba(
    ffi.Pointer<ffi.Void> rgba,
    int rows,
    int rowstride,
    int cols,
  ) {
    return _ncvisual_from_rgba(
      rgba,
      rows,
      rowstride,
      cols,
    );
  }

  late final _ncvisual_from_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('ncvisual_from_rgba');
  late final _ncvisual_from_rgba = _ncvisual_from_rgbaPtr.asFunction<
      ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ncvisual> ncvisual_from_rgb_packed(
    ffi.Pointer<ffi.Void> rgba,
    int rows,
    int rowstride,
    int cols,
    int alpha,
  ) {
    return _ncvisual_from_rgb_packed(
      rgba,
      rows,
      rowstride,
      cols,
      alpha,
    );
  }

  late final _ncvisual_from_rgb_packedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('ncvisual_from_rgb_packed');
  late final _ncvisual_from_rgb_packed =
      _ncvisual_from_rgb_packedPtr.asFunction<
          ffi.Pointer<ncvisual> Function(
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  ffi.Pointer<ncvisual> ncvisual_from_rgb_loose(
    ffi.Pointer<ffi.Void> rgba,
    int rows,
    int rowstride,
    int cols,
    int alpha,
  ) {
    return _ncvisual_from_rgb_loose(
      rgba,
      rows,
      rowstride,
      cols,
      alpha,
    );
  }

  late final _ncvisual_from_rgb_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('ncvisual_from_rgb_loose');
  late final _ncvisual_from_rgb_loose = _ncvisual_from_rgb_loosePtr.asFunction<
      ffi.Pointer<ncvisual> Function(
          ffi.Pointer<ffi.Void>, int, int, int, int)>();

  ffi.Pointer<ncvisual> ncvisual_from_bgra(
    ffi.Pointer<ffi.Void> bgra,
    int rows,
    int rowstride,
    int cols,
  ) {
    return _ncvisual_from_bgra(
      bgra,
      rows,
      rowstride,
      cols,
    );
  }

  late final _ncvisual_from_bgraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('ncvisual_from_bgra');
  late final _ncvisual_from_bgra = _ncvisual_from_bgraPtr.asFunction<
      ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ncvisual> ncvisual_from_palidx(
    ffi.Pointer<ffi.Void> data,
    int rows,
    int rowstride,
    int cols,
    int palsize,
    int pstride,
    ffi.Pointer<ffi.Uint32> palette,
  ) {
    return _ncvisual_from_palidx(
      data,
      rows,
      rowstride,
      cols,
      palsize,
      pstride,
      palette,
    );
  }

  late final _ncvisual_from_palidxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncvisual> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Uint32>)>>('ncvisual_from_palidx');
  late final _ncvisual_from_palidx = _ncvisual_from_palidxPtr.asFunction<
      ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Void>, int, int, int, int,
          int, ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<ncvisual> ncvisual_from_plane(
    ffi.Pointer<ncplane> n,
    int blit,
    int begy,
    int begx,
    int leny,
    int lenx,
  ) {
    return _ncvisual_from_plane(
      n,
      blit,
      begy,
      begx,
      leny,
      lenx,
    );
  }

  late final _ncvisual_from_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncvisual> Function(
              ffi.Pointer<ncplane>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32)>>('ncvisual_from_plane');
  late final _ncvisual_from_plane = _ncvisual_from_planePtr.asFunction<
      ffi.Pointer<ncvisual> Function(
          ffi.Pointer<ncplane>, int, int, int, int, int)>();

  ffi.Pointer<ncvisual> ncvisual_from_sixel(
    ffi.Pointer<ffi.Int8> s,
    int leny,
    int lenx,
  ) {
    return _ncvisual_from_sixel(
      s,
      leny,
      lenx,
    );
  }

  late final _ncvisual_from_sixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Int8>, ffi.Uint32,
              ffi.Uint32)>>('ncvisual_from_sixel');
  late final _ncvisual_from_sixel = _ncvisual_from_sixelPtr.asFunction<
      ffi.Pointer<ncvisual> Function(ffi.Pointer<ffi.Int8>, int, int)>();

  int ncvisual_geom(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ncvisual> n,
    ffi.Pointer<ncvisual_options> vopts,
    ffi.Pointer<ncvgeom> geom,
  ) {
    return _ncvisual_geom(
      nc,
      n,
      vopts,
      geom,
    );
  }

  late final _ncvisual_geomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<notcurses>,
              ffi.Pointer<ncvisual>,
              ffi.Pointer<ncvisual_options>,
              ffi.Pointer<ncvgeom>)>>('ncvisual_geom');
  late final _ncvisual_geom = _ncvisual_geomPtr.asFunction<
      int Function(ffi.Pointer<notcurses>, ffi.Pointer<ncvisual>,
          ffi.Pointer<ncvisual_options>, ffi.Pointer<ncvgeom>)>();

  void ncvisual_destroy(
    ffi.Pointer<ncvisual> ncv,
  ) {
    return _ncvisual_destroy(
      ncv,
    );
  }

  late final _ncvisual_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncvisual>)>>(
          'ncvisual_destroy');
  late final _ncvisual_destroy =
      _ncvisual_destroyPtr.asFunction<void Function(ffi.Pointer<ncvisual>)>();

  int ncvisual_decode(
    ffi.Pointer<ncvisual> nc,
  ) {
    return _ncvisual_decode(
      nc,
    );
  }

  late final _ncvisual_decodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncvisual>)>>(
          'ncvisual_decode');
  late final _ncvisual_decode =
      _ncvisual_decodePtr.asFunction<int Function(ffi.Pointer<ncvisual>)>();

  int ncvisual_decode_loop(
    ffi.Pointer<ncvisual> nc,
  ) {
    return _ncvisual_decode_loop(
      nc,
    );
  }

  late final _ncvisual_decode_loopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncvisual>)>>(
          'ncvisual_decode_loop');
  late final _ncvisual_decode_loop = _ncvisual_decode_loopPtr
      .asFunction<int Function(ffi.Pointer<ncvisual>)>();

  int ncvisual_rotate(
    ffi.Pointer<ncvisual> n,
    double rads,
  ) {
    return _ncvisual_rotate(
      n,
      rads,
    );
  }

  late final _ncvisual_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncvisual>, ffi.Double)>>('ncvisual_rotate');
  late final _ncvisual_rotate = _ncvisual_rotatePtr
      .asFunction<int Function(ffi.Pointer<ncvisual>, double)>();

  int ncvisual_resize(
    ffi.Pointer<ncvisual> n,
    int rows,
    int cols,
  ) {
    return _ncvisual_resize(
      n,
      rows,
      cols,
    );
  }

  late final _ncvisual_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncvisual>, ffi.Int32, ffi.Int32)>>('ncvisual_resize');
  late final _ncvisual_resize = _ncvisual_resizePtr
      .asFunction<int Function(ffi.Pointer<ncvisual>, int, int)>();

  int ncvisual_resize_noninterpolative(
    ffi.Pointer<ncvisual> n,
    int rows,
    int cols,
  ) {
    return _ncvisual_resize_noninterpolative(
      n,
      rows,
      cols,
    );
  }

  late final _ncvisual_resize_noninterpolativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncvisual>, ffi.Int32,
              ffi.Int32)>>('ncvisual_resize_noninterpolative');
  late final _ncvisual_resize_noninterpolative =
      _ncvisual_resize_noninterpolativePtr
          .asFunction<int Function(ffi.Pointer<ncvisual>, int, int)>();

  int ncvisual_polyfill_yx(
    ffi.Pointer<ncvisual> n,
    int y,
    int x,
    int rgba,
  ) {
    return _ncvisual_polyfill_yx(
      n,
      y,
      x,
      rgba,
    );
  }

  late final _ncvisual_polyfill_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncvisual>, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('ncvisual_polyfill_yx');
  late final _ncvisual_polyfill_yx = _ncvisual_polyfill_yxPtr
      .asFunction<int Function(ffi.Pointer<ncvisual>, int, int, int)>();

  int ncvisual_at_yx(
    ffi.Pointer<ncvisual> n,
    int y,
    int x,
    ffi.Pointer<ffi.Uint32> pixel,
  ) {
    return _ncvisual_at_yx(
      n,
      y,
      x,
      pixel,
    );
  }

  late final _ncvisual_at_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncvisual>, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('ncvisual_at_yx');
  late final _ncvisual_at_yx = _ncvisual_at_yxPtr.asFunction<
      int Function(ffi.Pointer<ncvisual>, int, int, ffi.Pointer<ffi.Uint32>)>();

  int ncvisual_set_yx(
    ffi.Pointer<ncvisual> n,
    int y,
    int x,
    int pixel,
  ) {
    return _ncvisual_set_yx(
      n,
      y,
      x,
      pixel,
    );
  }

  late final _ncvisual_set_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncvisual>, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('ncvisual_set_yx');
  late final _ncvisual_set_yx = _ncvisual_set_yxPtr
      .asFunction<int Function(ffi.Pointer<ncvisual>, int, int, int)>();

  ffi.Pointer<ncplane> ncvisual_blit(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ncvisual> ncv,
    ffi.Pointer<ncvisual_options> vopts,
  ) {
    return _ncvisual_blit(
      nc,
      ncv,
      vopts,
    );
  }

  late final _ncvisual_blitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<notcurses>,
              ffi.Pointer<ncvisual>,
              ffi.Pointer<ncvisual_options>)>>('ncvisual_blit');
  late final _ncvisual_blit = _ncvisual_blitPtr.asFunction<
      ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>,
          ffi.Pointer<ncvisual>, ffi.Pointer<ncvisual_options>)>();

  ffi.Pointer<ncplane> ncvisual_subtitle_plane(
    ffi.Pointer<ncplane> parent,
    ffi.Pointer<ncvisual> ncv,
  ) {
    return _ncvisual_subtitle_plane(
      parent,
      ncv,
    );
  }

  late final _ncvisual_subtitle_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncvisual>)>>('ncvisual_subtitle_plane');
  late final _ncvisual_subtitle_plane = _ncvisual_subtitle_planePtr.asFunction<
      ffi.Pointer<ncplane> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncvisual>)>();

  int ncvisual_media_defblitter(
    ffi.Pointer<notcurses> nc,
    int scale,
  ) {
    return _ncvisual_media_defblitter(
      nc,
      scale,
    );
  }

  late final _ncvisual_media_defblitterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<notcurses>, ffi.Int32)>>('ncvisual_media_defblitter');
  late final _ncvisual_media_defblitter = _ncvisual_media_defblitterPtr
      .asFunction<int Function(ffi.Pointer<notcurses>, int)>();

  int ncvisual_simple_streamer(
    ffi.Pointer<ncvisual> ncv,
    ffi.Pointer<ncvisual_options> vopts,
    ffi.Pointer<timespec> tspec,
    ffi.Pointer<ffi.Void> curry,
  ) {
    return _ncvisual_simple_streamer(
      ncv,
      vopts,
      tspec,
      curry,
    );
  }

  late final _ncvisual_simple_streamerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncvisual>,
              ffi.Pointer<ncvisual_options>,
              ffi.Pointer<timespec>,
              ffi.Pointer<ffi.Void>)>>('ncvisual_simple_streamer');
  late final _ncvisual_simple_streamer =
      _ncvisual_simple_streamerPtr.asFunction<
          int Function(ffi.Pointer<ncvisual>, ffi.Pointer<ncvisual_options>,
              ffi.Pointer<timespec>, ffi.Pointer<ffi.Void>)>();

  int ncvisual_stream(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ncvisual> ncv,
    double timescale,
    ncstreamcb streamer,
    ffi.Pointer<ncvisual_options> vopts,
    ffi.Pointer<ffi.Void> curry,
  ) {
    return _ncvisual_stream(
      nc,
      ncv,
      timescale,
      streamer,
      vopts,
      curry,
    );
  }

  late final _ncvisual_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<notcurses>,
              ffi.Pointer<ncvisual>,
              ffi.Float,
              ncstreamcb,
              ffi.Pointer<ncvisual_options>,
              ffi.Pointer<ffi.Void>)>>('ncvisual_stream');
  late final _ncvisual_stream = _ncvisual_streamPtr.asFunction<
      int Function(ffi.Pointer<notcurses>, ffi.Pointer<ncvisual>, double,
          ncstreamcb, ffi.Pointer<ncvisual_options>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ncreel> ncreel_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncreel_options> popts,
  ) {
    return _ncreel_create(
      n,
      popts,
    );
  }

  late final _ncreel_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncreel> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncreel_options>)>>('ncreel_create');
  late final _ncreel_create = _ncreel_createPtr.asFunction<
      ffi.Pointer<ncreel> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncreel_options>)>();

  ffi.Pointer<ncplane> ncreel_plane(
    ffi.Pointer<ncreel> nr,
  ) {
    return _ncreel_plane(
      nr,
    );
  }

  late final _ncreel_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<ncreel>)>>('ncreel_plane');
  late final _ncreel_plane = _ncreel_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncreel>)>();

  ffi.Pointer<nctablet> ncreel_add(
    ffi.Pointer<ncreel> nr,
    ffi.Pointer<nctablet> after,
    ffi.Pointer<nctablet> before,
    tabletcb cb,
    ffi.Pointer<ffi.Void> opaque,
  ) {
    return _ncreel_add(
      nr,
      after,
      before,
      cb,
      opaque,
    );
  }

  late final _ncreel_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctablet> Function(
              ffi.Pointer<ncreel>,
              ffi.Pointer<nctablet>,
              ffi.Pointer<nctablet>,
              tabletcb,
              ffi.Pointer<ffi.Void>)>>('ncreel_add');
  late final _ncreel_add = _ncreel_addPtr.asFunction<
      ffi.Pointer<nctablet> Function(ffi.Pointer<ncreel>, ffi.Pointer<nctablet>,
          ffi.Pointer<nctablet>, tabletcb, ffi.Pointer<ffi.Void>)>();

  int ncreel_tabletcount(
    ffi.Pointer<ncreel> nr,
  ) {
    return _ncreel_tabletcount(
      nr,
    );
  }

  late final _ncreel_tabletcountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncreel>)>>(
          'ncreel_tabletcount');
  late final _ncreel_tabletcount =
      _ncreel_tabletcountPtr.asFunction<int Function(ffi.Pointer<ncreel>)>();

  int ncreel_del(
    ffi.Pointer<ncreel> nr,
    ffi.Pointer<nctablet> t,
  ) {
    return _ncreel_del(
      nr,
      t,
    );
  }

  late final _ncreel_delPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncreel>, ffi.Pointer<nctablet>)>>('ncreel_del');
  late final _ncreel_del = _ncreel_delPtr
      .asFunction<int Function(ffi.Pointer<ncreel>, ffi.Pointer<nctablet>)>();

  int ncreel_redraw(
    ffi.Pointer<ncreel> nr,
  ) {
    return _ncreel_redraw(
      nr,
    );
  }

  late final _ncreel_redrawPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncreel>)>>(
          'ncreel_redraw');
  late final _ncreel_redraw =
      _ncreel_redrawPtr.asFunction<int Function(ffi.Pointer<ncreel>)>();

  int ncreel_offer_input(
    ffi.Pointer<ncreel> nr,
    ffi.Pointer<ncinput> ni,
  ) {
    return _ncreel_offer_input(
      nr,
      ni,
    );
  }

  late final _ncreel_offer_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ncreel>,
              ffi.Pointer<ncinput>)>>('ncreel_offer_input');
  late final _ncreel_offer_input = _ncreel_offer_inputPtr
      .asFunction<int Function(ffi.Pointer<ncreel>, ffi.Pointer<ncinput>)>();

  ffi.Pointer<nctablet> ncreel_focused(
    ffi.Pointer<ncreel> nr,
  ) {
    return _ncreel_focused(
      nr,
    );
  }

  late final _ncreel_focusedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctablet> Function(
              ffi.Pointer<ncreel>)>>('ncreel_focused');
  late final _ncreel_focused = _ncreel_focusedPtr
      .asFunction<ffi.Pointer<nctablet> Function(ffi.Pointer<ncreel>)>();

  ffi.Pointer<nctablet> ncreel_next(
    ffi.Pointer<ncreel> nr,
  ) {
    return _ncreel_next(
      nr,
    );
  }

  late final _ncreel_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctablet> Function(ffi.Pointer<ncreel>)>>('ncreel_next');
  late final _ncreel_next = _ncreel_nextPtr
      .asFunction<ffi.Pointer<nctablet> Function(ffi.Pointer<ncreel>)>();

  ffi.Pointer<nctablet> ncreel_prev(
    ffi.Pointer<ncreel> nr,
  ) {
    return _ncreel_prev(
      nr,
    );
  }

  late final _ncreel_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctablet> Function(ffi.Pointer<ncreel>)>>('ncreel_prev');
  late final _ncreel_prev = _ncreel_prevPtr
      .asFunction<ffi.Pointer<nctablet> Function(ffi.Pointer<ncreel>)>();

  void ncreel_destroy(
    ffi.Pointer<ncreel> nr,
  ) {
    return _ncreel_destroy(
      nr,
    );
  }

  late final _ncreel_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncreel>)>>(
          'ncreel_destroy');
  late final _ncreel_destroy =
      _ncreel_destroyPtr.asFunction<void Function(ffi.Pointer<ncreel>)>();

  ffi.Pointer<ffi.Void> nctablet_userptr(
    ffi.Pointer<nctablet> t,
  ) {
    return _nctablet_userptr(
      t,
    );
  }

  late final _nctablet_userptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<nctablet>)>>('nctablet_userptr');
  late final _nctablet_userptr = _nctablet_userptrPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctablet>)>();

  ffi.Pointer<ncplane> nctablet_plane(
    ffi.Pointer<nctablet> t,
  ) {
    return _nctablet_plane(
      t,
    );
  }

  late final _nctablet_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<nctablet>)>>('nctablet_plane');
  late final _nctablet_plane = _nctablet_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<nctablet>)>();

  int notcurses_default_foreground(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ffi.Uint32> fg,
  ) {
    return _notcurses_default_foreground(
      nc,
      fg,
    );
  }

  late final _notcurses_default_foregroundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<notcurses>,
              ffi.Pointer<ffi.Uint32>)>>('notcurses_default_foreground');
  late final _notcurses_default_foreground =
      _notcurses_default_foregroundPtr.asFunction<
          int Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>)>();

  int notcurses_default_background(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ffi.Uint32> bg,
  ) {
    return _notcurses_default_background(
      nc,
      bg,
    );
  }

  late final _notcurses_default_backgroundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<notcurses>,
              ffi.Pointer<ffi.Uint32>)>>('notcurses_default_background');
  late final _notcurses_default_background =
      _notcurses_default_backgroundPtr.asFunction<
          int Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>)>();

  int notcurses_cursor_enable(
    ffi.Pointer<notcurses> nc,
    int y,
    int x,
  ) {
    return _notcurses_cursor_enable(
      nc,
      y,
      x,
    );
  }

  late final _notcurses_cursor_enablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<notcurses>, ffi.Int32,
              ffi.Int32)>>('notcurses_cursor_enable');
  late final _notcurses_cursor_enable = _notcurses_cursor_enablePtr
      .asFunction<int Function(ffi.Pointer<notcurses>, int, int)>();

  int notcurses_cursor_disable(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_cursor_disable(
      nc,
    );
  }

  late final _notcurses_cursor_disablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>(
          'notcurses_cursor_disable');
  late final _notcurses_cursor_disable = _notcurses_cursor_disablePtr
      .asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_cursor_yx(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ffi.Int32> y,
    ffi.Pointer<ffi.Int32> x,
  ) {
    return _notcurses_cursor_yx(
      nc,
      y,
      x,
    );
  }

  late final _notcurses_cursor_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('notcurses_cursor_yx');
  late final _notcurses_cursor_yx = _notcurses_cursor_yxPtr.asFunction<
      int Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  void ncplane_greyscale(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_greyscale(
      n,
    );
  }

  late final _ncplane_greyscalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>(
          'ncplane_greyscale');
  late final _ncplane_greyscale =
      _ncplane_greyscalePtr.asFunction<void Function(ffi.Pointer<ncplane>)>();

  ffi.Pointer<ncselector> ncselector_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncselector_options> opts,
  ) {
    return _ncselector_create(
      n,
      opts,
    );
  }

  late final _ncselector_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncselector> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncselector_options>)>>('ncselector_create');
  late final _ncselector_create = _ncselector_createPtr.asFunction<
      ffi.Pointer<ncselector> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncselector_options>)>();

  int ncselector_additem(
    ffi.Pointer<ncselector> n,
    ffi.Pointer<ncselector_item> item,
  ) {
    return _ncselector_additem(
      n,
      item,
    );
  }

  late final _ncselector_additemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncselector>,
              ffi.Pointer<ncselector_item>)>>('ncselector_additem');
  late final _ncselector_additem = _ncselector_additemPtr.asFunction<
      int Function(ffi.Pointer<ncselector>, ffi.Pointer<ncselector_item>)>();

  int ncselector_delitem(
    ffi.Pointer<ncselector> n,
    ffi.Pointer<ffi.Int8> item,
  ) {
    return _ncselector_delitem(
      n,
      item,
    );
  }

  late final _ncselector_delitemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncselector>,
              ffi.Pointer<ffi.Int8>)>>('ncselector_delitem');
  late final _ncselector_delitem = _ncselector_delitemPtr.asFunction<
      int Function(ffi.Pointer<ncselector>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ncselector_selected(
    ffi.Pointer<ncselector> n,
  ) {
    return _ncselector_selected(
      n,
    );
  }

  late final _ncselector_selectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncselector>)>>('ncselector_selected');
  late final _ncselector_selected = _ncselector_selectedPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncselector>)>();

  ffi.Pointer<ncplane> ncselector_plane(
    ffi.Pointer<ncselector> n,
  ) {
    return _ncselector_plane(
      n,
    );
  }

  late final _ncselector_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncselector>)>>('ncselector_plane');
  late final _ncselector_plane = _ncselector_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncselector>)>();

  ffi.Pointer<ffi.Int8> ncselector_previtem(
    ffi.Pointer<ncselector> n,
  ) {
    return _ncselector_previtem(
      n,
    );
  }

  late final _ncselector_previtemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncselector>)>>('ncselector_previtem');
  late final _ncselector_previtem = _ncselector_previtemPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncselector>)>();

  ffi.Pointer<ffi.Int8> ncselector_nextitem(
    ffi.Pointer<ncselector> n,
  ) {
    return _ncselector_nextitem(
      n,
    );
  }

  late final _ncselector_nextitemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncselector>)>>('ncselector_nextitem');
  late final _ncselector_nextitem = _ncselector_nextitemPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncselector>)>();

  int ncselector_offer_input(
    ffi.Pointer<ncselector> n,
    ffi.Pointer<ncinput> nc,
  ) {
    return _ncselector_offer_input(
      n,
      nc,
    );
  }

  late final _ncselector_offer_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ncselector>,
              ffi.Pointer<ncinput>)>>('ncselector_offer_input');
  late final _ncselector_offer_input = _ncselector_offer_inputPtr.asFunction<
      int Function(ffi.Pointer<ncselector>, ffi.Pointer<ncinput>)>();

  void ncselector_destroy(
    ffi.Pointer<ncselector> n,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> item,
  ) {
    return _ncselector_destroy(
      n,
      item,
    );
  }

  late final _ncselector_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncselector>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('ncselector_destroy');
  late final _ncselector_destroy = _ncselector_destroyPtr.asFunction<
      void Function(
          ffi.Pointer<ncselector>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ncmultiselector> ncmultiselector_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncmultiselector_options> opts,
  ) {
    return _ncmultiselector_create(
      n,
      opts,
    );
  }

  late final _ncmultiselector_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncmultiselector> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncmultiselector_options>)>>('ncmultiselector_create');
  late final _ncmultiselector_create = _ncmultiselector_createPtr.asFunction<
      ffi.Pointer<ncmultiselector> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncmultiselector_options>)>();

  int ncmultiselector_selected(
    ffi.Pointer<ncmultiselector> n,
    ffi.Pointer<ffi.Uint8> selected,
    int count,
  ) {
    return _ncmultiselector_selected(
      n,
      selected,
      count,
    );
  }

  late final _ncmultiselector_selectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncmultiselector>,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('ncmultiselector_selected');
  late final _ncmultiselector_selected =
      _ncmultiselector_selectedPtr.asFunction<
          int Function(
              ffi.Pointer<ncmultiselector>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ncplane> ncmultiselector_plane(
    ffi.Pointer<ncmultiselector> n,
  ) {
    return _ncmultiselector_plane(
      n,
    );
  }

  late final _ncmultiselector_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncmultiselector>)>>('ncmultiselector_plane');
  late final _ncmultiselector_plane = _ncmultiselector_planePtr.asFunction<
      ffi.Pointer<ncplane> Function(ffi.Pointer<ncmultiselector>)>();

  int ncmultiselector_offer_input(
    ffi.Pointer<ncmultiselector> n,
    ffi.Pointer<ncinput> nc,
  ) {
    return _ncmultiselector_offer_input(
      n,
      nc,
    );
  }

  late final _ncmultiselector_offer_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ncmultiselector>,
              ffi.Pointer<ncinput>)>>('ncmultiselector_offer_input');
  late final _ncmultiselector_offer_input =
      _ncmultiselector_offer_inputPtr.asFunction<
          int Function(ffi.Pointer<ncmultiselector>, ffi.Pointer<ncinput>)>();

  void ncmultiselector_destroy(
    ffi.Pointer<ncmultiselector> n,
  ) {
    return _ncmultiselector_destroy(
      n,
    );
  }

  late final _ncmultiselector_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncmultiselector>)>>(
      'ncmultiselector_destroy');
  late final _ncmultiselector_destroy = _ncmultiselector_destroyPtr
      .asFunction<void Function(ffi.Pointer<ncmultiselector>)>();

  ffi.Pointer<nctree> nctree_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nctree_options> opts,
  ) {
    return _nctree_create(
      n,
      opts,
    );
  }

  late final _nctree_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctree> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<nctree_options>)>>('nctree_create');
  late final _nctree_create = _nctree_createPtr.asFunction<
      ffi.Pointer<nctree> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<nctree_options>)>();

  ffi.Pointer<ncplane> nctree_plane(
    ffi.Pointer<nctree> n,
  ) {
    return _nctree_plane(
      n,
    );
  }

  late final _nctree_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<nctree>)>>('nctree_plane');
  late final _nctree_plane = _nctree_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<nctree>)>();

  int nctree_redraw(
    ffi.Pointer<nctree> n,
  ) {
    return _nctree_redraw(
      n,
    );
  }

  late final _nctree_redrawPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nctree>)>>(
          'nctree_redraw');
  late final _nctree_redraw =
      _nctree_redrawPtr.asFunction<int Function(ffi.Pointer<nctree>)>();

  int nctree_offer_input(
    ffi.Pointer<nctree> n,
    ffi.Pointer<ncinput> ni,
  ) {
    return _nctree_offer_input(
      n,
      ni,
    );
  }

  late final _nctree_offer_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<nctree>,
              ffi.Pointer<ncinput>)>>('nctree_offer_input');
  late final _nctree_offer_input = _nctree_offer_inputPtr
      .asFunction<int Function(ffi.Pointer<nctree>, ffi.Pointer<ncinput>)>();

  ffi.Pointer<ffi.Void> nctree_focused(
    ffi.Pointer<nctree> n,
  ) {
    return _nctree_focused(
      n,
    );
  }

  late final _nctree_focusedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<nctree>)>>('nctree_focused');
  late final _nctree_focused = _nctree_focusedPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctree>)>();

  ffi.Pointer<ffi.Void> nctree_next(
    ffi.Pointer<nctree> n,
  ) {
    return _nctree_next(
      n,
    );
  }

  late final _nctree_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctree>)>>('nctree_next');
  late final _nctree_next = _nctree_nextPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctree>)>();

  ffi.Pointer<ffi.Void> nctree_prev(
    ffi.Pointer<nctree> n,
  ) {
    return _nctree_prev(
      n,
    );
  }

  late final _nctree_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctree>)>>('nctree_prev');
  late final _nctree_prev = _nctree_prevPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctree>)>();

  ffi.Pointer<ffi.Void> nctree_goto(
    ffi.Pointer<nctree> n,
    ffi.Pointer<ffi.Uint32> spec,
    ffi.Pointer<ffi.Int32> failspec,
  ) {
    return _nctree_goto(
      n,
      spec,
      failspec,
    );
  }

  late final _nctree_gotoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctree>,
              ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Int32>)>>('nctree_goto');
  late final _nctree_goto = _nctree_gotoPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctree>,
          ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Int32>)>();

  int nctree_add(
    ffi.Pointer<nctree> n,
    ffi.Pointer<ffi.Uint32> spec,
    ffi.Pointer<nctree_item> add,
  ) {
    return _nctree_add(
      n,
      spec,
      add,
    );
  }

  late final _nctree_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<nctree>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<nctree_item>)>>('nctree_add');
  late final _nctree_add = _nctree_addPtr.asFunction<
      int Function(ffi.Pointer<nctree>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<nctree_item>)>();

  int nctree_del(
    ffi.Pointer<nctree> n,
    ffi.Pointer<ffi.Uint32> spec,
  ) {
    return _nctree_del(
      n,
      spec,
    );
  }

  late final _nctree_delPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<nctree>, ffi.Pointer<ffi.Uint32>)>>('nctree_del');
  late final _nctree_del = _nctree_delPtr
      .asFunction<int Function(ffi.Pointer<nctree>, ffi.Pointer<ffi.Uint32>)>();

  void nctree_destroy(
    ffi.Pointer<nctree> n,
  ) {
    return _nctree_destroy(
      n,
    );
  }

  late final _nctree_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nctree>)>>(
          'nctree_destroy');
  late final _nctree_destroy =
      _nctree_destroyPtr.asFunction<void Function(ffi.Pointer<nctree>)>();

  ffi.Pointer<ncmenu> ncmenu_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncmenu_options> opts,
  ) {
    return _ncmenu_create(
      n,
      opts,
    );
  }

  late final _ncmenu_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncmenu> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncmenu_options>)>>('ncmenu_create');
  late final _ncmenu_create = _ncmenu_createPtr.asFunction<
      ffi.Pointer<ncmenu> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncmenu_options>)>();

  int ncmenu_unroll(
    ffi.Pointer<ncmenu> n,
    int sectionidx,
  ) {
    return _ncmenu_unroll(
      n,
      sectionidx,
    );
  }

  late final _ncmenu_unrollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncmenu>, ffi.Int32)>>('ncmenu_unroll');
  late final _ncmenu_unroll =
      _ncmenu_unrollPtr.asFunction<int Function(ffi.Pointer<ncmenu>, int)>();

  int ncmenu_rollup(
    ffi.Pointer<ncmenu> n,
  ) {
    return _ncmenu_rollup(
      n,
    );
  }

  late final _ncmenu_rollupPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncmenu>)>>(
          'ncmenu_rollup');
  late final _ncmenu_rollup =
      _ncmenu_rollupPtr.asFunction<int Function(ffi.Pointer<ncmenu>)>();

  int ncmenu_nextsection(
    ffi.Pointer<ncmenu> n,
  ) {
    return _ncmenu_nextsection(
      n,
    );
  }

  late final _ncmenu_nextsectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncmenu>)>>(
          'ncmenu_nextsection');
  late final _ncmenu_nextsection =
      _ncmenu_nextsectionPtr.asFunction<int Function(ffi.Pointer<ncmenu>)>();

  int ncmenu_prevsection(
    ffi.Pointer<ncmenu> n,
  ) {
    return _ncmenu_prevsection(
      n,
    );
  }

  late final _ncmenu_prevsectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncmenu>)>>(
          'ncmenu_prevsection');
  late final _ncmenu_prevsection =
      _ncmenu_prevsectionPtr.asFunction<int Function(ffi.Pointer<ncmenu>)>();

  int ncmenu_nextitem(
    ffi.Pointer<ncmenu> n,
  ) {
    return _ncmenu_nextitem(
      n,
    );
  }

  late final _ncmenu_nextitemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncmenu>)>>(
          'ncmenu_nextitem');
  late final _ncmenu_nextitem =
      _ncmenu_nextitemPtr.asFunction<int Function(ffi.Pointer<ncmenu>)>();

  int ncmenu_previtem(
    ffi.Pointer<ncmenu> n,
  ) {
    return _ncmenu_previtem(
      n,
    );
  }

  late final _ncmenu_previtemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncmenu>)>>(
          'ncmenu_previtem');
  late final _ncmenu_previtem =
      _ncmenu_previtemPtr.asFunction<int Function(ffi.Pointer<ncmenu>)>();

  int ncmenu_item_set_status(
    ffi.Pointer<ncmenu> n,
    ffi.Pointer<ffi.Int8> section,
    ffi.Pointer<ffi.Int8> item,
    int enabled,
  ) {
    return _ncmenu_item_set_status(
      n,
      section,
      item,
      enabled,
    );
  }

  late final _ncmenu_item_set_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncmenu>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Uint8)>>('ncmenu_item_set_status');
  late final _ncmenu_item_set_status = _ncmenu_item_set_statusPtr.asFunction<
      int Function(ffi.Pointer<ncmenu>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> ncmenu_selected(
    ffi.Pointer<ncmenu> n,
    ffi.Pointer<ncinput> ni,
  ) {
    return _ncmenu_selected(
      n,
      ni,
    );
  }

  late final _ncmenu_selectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncmenu>, ffi.Pointer<ncinput>)>>('ncmenu_selected');
  late final _ncmenu_selected = _ncmenu_selectedPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ncmenu>, ffi.Pointer<ncinput>)>();

  ffi.Pointer<ffi.Int8> ncmenu_mouse_selected(
    ffi.Pointer<ncmenu> n,
    ffi.Pointer<ncinput> click,
    ffi.Pointer<ncinput> ni,
  ) {
    return _ncmenu_mouse_selected(
      n,
      click,
      ni,
    );
  }

  late final _ncmenu_mouse_selectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncmenu>,
              ffi.Pointer<ncinput>,
              ffi.Pointer<ncinput>)>>('ncmenu_mouse_selected');
  late final _ncmenu_mouse_selected = _ncmenu_mouse_selectedPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ncmenu>, ffi.Pointer<ncinput>, ffi.Pointer<ncinput>)>();

  ffi.Pointer<ncplane> ncmenu_plane(
    ffi.Pointer<ncmenu> n,
  ) {
    return _ncmenu_plane(
      n,
    );
  }

  late final _ncmenu_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<ncmenu>)>>('ncmenu_plane');
  late final _ncmenu_plane = _ncmenu_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncmenu>)>();

  int ncmenu_offer_input(
    ffi.Pointer<ncmenu> n,
    ffi.Pointer<ncinput> nc,
  ) {
    return _ncmenu_offer_input(
      n,
      nc,
    );
  }

  late final _ncmenu_offer_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ncmenu>,
              ffi.Pointer<ncinput>)>>('ncmenu_offer_input');
  late final _ncmenu_offer_input = _ncmenu_offer_inputPtr
      .asFunction<int Function(ffi.Pointer<ncmenu>, ffi.Pointer<ncinput>)>();

  void ncmenu_destroy(
    ffi.Pointer<ncmenu> n,
  ) {
    return _ncmenu_destroy(
      n,
    );
  }

  late final _ncmenu_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncmenu>)>>(
          'ncmenu_destroy');
  late final _ncmenu_destroy =
      _ncmenu_destroyPtr.asFunction<void Function(ffi.Pointer<ncmenu>)>();

  ffi.Pointer<ncprogbar> ncprogbar_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncprogbar_options> opts,
  ) {
    return _ncprogbar_create(
      n,
      opts,
    );
  }

  late final _ncprogbar_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncprogbar> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncprogbar_options>)>>('ncprogbar_create');
  late final _ncprogbar_create = _ncprogbar_createPtr.asFunction<
      ffi.Pointer<ncprogbar> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncprogbar_options>)>();

  ffi.Pointer<ncplane> ncprogbar_plane(
    ffi.Pointer<ncprogbar> n,
  ) {
    return _ncprogbar_plane(
      n,
    );
  }

  late final _ncprogbar_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncprogbar>)>>('ncprogbar_plane');
  late final _ncprogbar_plane = _ncprogbar_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncprogbar>)>();

  int ncprogbar_set_progress(
    ffi.Pointer<ncprogbar> n,
    double p,
  ) {
    return _ncprogbar_set_progress(
      n,
      p,
    );
  }

  late final _ncprogbar_set_progressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncprogbar>, ffi.Double)>>('ncprogbar_set_progress');
  late final _ncprogbar_set_progress = _ncprogbar_set_progressPtr
      .asFunction<int Function(ffi.Pointer<ncprogbar>, double)>();

  double ncprogbar_progress(
    ffi.Pointer<ncprogbar> n,
  ) {
    return _ncprogbar_progress(
      n,
    );
  }

  late final _ncprogbar_progressPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ncprogbar>)>>(
          'ncprogbar_progress');
  late final _ncprogbar_progress = _ncprogbar_progressPtr
      .asFunction<double Function(ffi.Pointer<ncprogbar>)>();

  void ncprogbar_destroy(
    ffi.Pointer<ncprogbar> n,
  ) {
    return _ncprogbar_destroy(
      n,
    );
  }

  late final _ncprogbar_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncprogbar>)>>(
          'ncprogbar_destroy');
  late final _ncprogbar_destroy =
      _ncprogbar_destroyPtr.asFunction<void Function(ffi.Pointer<ncprogbar>)>();

  ffi.Pointer<nctabbed> nctabbed_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nctabbed_options> opts,
  ) {
    return _nctabbed_create(
      n,
      opts,
    );
  }

  late final _nctabbed_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctabbed> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<nctabbed_options>)>>('nctabbed_create');
  late final _nctabbed_create = _nctabbed_createPtr.asFunction<
      ffi.Pointer<nctabbed> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<nctabbed_options>)>();

  void nctabbed_destroy(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_destroy(
      nt,
    );
  }

  late final _nctabbed_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nctabbed>)>>(
          'nctabbed_destroy');
  late final _nctabbed_destroy =
      _nctabbed_destroyPtr.asFunction<void Function(ffi.Pointer<nctabbed>)>();

  void nctabbed_redraw(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_redraw(
      nt,
    );
  }

  late final _nctabbed_redrawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nctabbed>)>>(
          'nctabbed_redraw');
  late final _nctabbed_redraw =
      _nctabbed_redrawPtr.asFunction<void Function(ffi.Pointer<nctabbed>)>();

  void nctabbed_ensure_selected_header_visible(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_ensure_selected_header_visible(
      nt,
    );
  }

  late final _nctabbed_ensure_selected_header_visiblePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nctabbed>)>>(
          'nctabbed_ensure_selected_header_visible');
  late final _nctabbed_ensure_selected_header_visible =
      _nctabbed_ensure_selected_header_visiblePtr
          .asFunction<void Function(ffi.Pointer<nctabbed>)>();

  ffi.Pointer<nctab> nctabbed_selected(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_selected(
      nt,
    );
  }

  late final _nctabbed_selectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctab> Function(
              ffi.Pointer<nctabbed>)>>('nctabbed_selected');
  late final _nctabbed_selected = _nctabbed_selectedPtr
      .asFunction<ffi.Pointer<nctab> Function(ffi.Pointer<nctabbed>)>();

  ffi.Pointer<nctab> nctabbed_leftmost(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_leftmost(
      nt,
    );
  }

  late final _nctabbed_leftmostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctab> Function(
              ffi.Pointer<nctabbed>)>>('nctabbed_leftmost');
  late final _nctabbed_leftmost = _nctabbed_leftmostPtr
      .asFunction<ffi.Pointer<nctab> Function(ffi.Pointer<nctabbed>)>();

  int nctabbed_tabcount(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_tabcount(
      nt,
    );
  }

  late final _nctabbed_tabcountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nctabbed>)>>(
          'nctabbed_tabcount');
  late final _nctabbed_tabcount =
      _nctabbed_tabcountPtr.asFunction<int Function(ffi.Pointer<nctabbed>)>();

  ffi.Pointer<ncplane> nctabbed_plane(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_plane(
      nt,
    );
  }

  late final _nctabbed_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<nctabbed>)>>('nctabbed_plane');
  late final _nctabbed_plane = _nctabbed_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<nctabbed>)>();

  ffi.Pointer<ncplane> nctabbed_content_plane(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_content_plane(
      nt,
    );
  }

  late final _nctabbed_content_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<nctabbed>)>>('nctabbed_content_plane');
  late final _nctabbed_content_plane = _nctabbed_content_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<nctabbed>)>();

  tabcb nctab_cb(
    ffi.Pointer<nctab> t,
  ) {
    return _nctab_cb(
      t,
    );
  }

  late final _nctab_cbPtr =
      _lookup<ffi.NativeFunction<tabcb Function(ffi.Pointer<nctab>)>>(
          'nctab_cb');
  late final _nctab_cb =
      _nctab_cbPtr.asFunction<tabcb Function(ffi.Pointer<nctab>)>();

  ffi.Pointer<ffi.Int8> nctab_name(
    ffi.Pointer<nctab> t,
  ) {
    return _nctab_name(
      t,
    );
  }

  late final _nctab_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<nctab>)>>('nctab_name');
  late final _nctab_name = _nctab_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<nctab>)>();

  int nctab_name_width(
    ffi.Pointer<nctab> t,
  ) {
    return _nctab_name_width(
      t,
    );
  }

  late final _nctab_name_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nctab>)>>(
          'nctab_name_width');
  late final _nctab_name_width =
      _nctab_name_widthPtr.asFunction<int Function(ffi.Pointer<nctab>)>();

  ffi.Pointer<ffi.Void> nctab_userptr(
    ffi.Pointer<nctab> t,
  ) {
    return _nctab_userptr(
      t,
    );
  }

  late final _nctab_userptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctab>)>>('nctab_userptr');
  late final _nctab_userptr = _nctab_userptrPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<nctab>)>();

  ffi.Pointer<nctab> nctab_next(
    ffi.Pointer<nctab> t,
  ) {
    return _nctab_next(
      t,
    );
  }

  late final _nctab_nextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<nctab> Function(ffi.Pointer<nctab>)>>(
      'nctab_next');
  late final _nctab_next = _nctab_nextPtr
      .asFunction<ffi.Pointer<nctab> Function(ffi.Pointer<nctab>)>();

  ffi.Pointer<nctab> nctab_prev(
    ffi.Pointer<nctab> t,
  ) {
    return _nctab_prev(
      t,
    );
  }

  late final _nctab_prevPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<nctab> Function(ffi.Pointer<nctab>)>>(
      'nctab_prev');
  late final _nctab_prev = _nctab_prevPtr
      .asFunction<ffi.Pointer<nctab> Function(ffi.Pointer<nctab>)>();

  ffi.Pointer<nctab> nctabbed_add(
    ffi.Pointer<nctabbed> nt,
    ffi.Pointer<nctab> after,
    ffi.Pointer<nctab> before,
    tabcb tcb,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Void> opaque,
  ) {
    return _nctabbed_add(
      nt,
      after,
      before,
      tcb,
      name,
      opaque,
    );
  }

  late final _nctabbed_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctab> Function(
              ffi.Pointer<nctabbed>,
              ffi.Pointer<nctab>,
              ffi.Pointer<nctab>,
              tabcb,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>)>>('nctabbed_add');
  late final _nctabbed_add = _nctabbed_addPtr.asFunction<
      ffi.Pointer<nctab> Function(
          ffi.Pointer<nctabbed>,
          ffi.Pointer<nctab>,
          ffi.Pointer<nctab>,
          tabcb,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Void>)>();

  int nctabbed_del(
    ffi.Pointer<nctabbed> nt,
    ffi.Pointer<nctab> t,
  ) {
    return _nctabbed_del(
      nt,
      t,
    );
  }

  late final _nctabbed_delPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<nctabbed>, ffi.Pointer<nctab>)>>('nctabbed_del');
  late final _nctabbed_del = _nctabbed_delPtr
      .asFunction<int Function(ffi.Pointer<nctabbed>, ffi.Pointer<nctab>)>();

  int nctab_move(
    ffi.Pointer<nctabbed> nt,
    ffi.Pointer<nctab> t,
    ffi.Pointer<nctab> after,
    ffi.Pointer<nctab> before,
  ) {
    return _nctab_move(
      nt,
      t,
      after,
      before,
    );
  }

  late final _nctab_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<nctabbed>, ffi.Pointer<nctab>,
              ffi.Pointer<nctab>, ffi.Pointer<nctab>)>>('nctab_move');
  late final _nctab_move = _nctab_movePtr.asFunction<
      int Function(ffi.Pointer<nctabbed>, ffi.Pointer<nctab>,
          ffi.Pointer<nctab>, ffi.Pointer<nctab>)>();

  void nctab_move_right(
    ffi.Pointer<nctabbed> nt,
    ffi.Pointer<nctab> t,
  ) {
    return _nctab_move_right(
      nt,
      t,
    );
  }

  late final _nctab_move_rightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nctabbed>, ffi.Pointer<nctab>)>>('nctab_move_right');
  late final _nctab_move_right = _nctab_move_rightPtr
      .asFunction<void Function(ffi.Pointer<nctabbed>, ffi.Pointer<nctab>)>();

  void nctab_move_left(
    ffi.Pointer<nctabbed> nt,
    ffi.Pointer<nctab> t,
  ) {
    return _nctab_move_left(
      nt,
      t,
    );
  }

  late final _nctab_move_leftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nctabbed>, ffi.Pointer<nctab>)>>('nctab_move_left');
  late final _nctab_move_left = _nctab_move_leftPtr
      .asFunction<void Function(ffi.Pointer<nctabbed>, ffi.Pointer<nctab>)>();

  void nctabbed_rotate(
    ffi.Pointer<nctabbed> nt,
    int amt,
  ) {
    return _nctabbed_rotate(
      nt,
      amt,
    );
  }

  late final _nctabbed_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nctabbed>, ffi.Int32)>>('nctabbed_rotate');
  late final _nctabbed_rotate = _nctabbed_rotatePtr
      .asFunction<void Function(ffi.Pointer<nctabbed>, int)>();

  ffi.Pointer<nctab> nctabbed_next(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_next(
      nt,
    );
  }

  late final _nctabbed_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctab> Function(ffi.Pointer<nctabbed>)>>('nctabbed_next');
  late final _nctabbed_next = _nctabbed_nextPtr
      .asFunction<ffi.Pointer<nctab> Function(ffi.Pointer<nctabbed>)>();

  ffi.Pointer<nctab> nctabbed_prev(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_prev(
      nt,
    );
  }

  late final _nctabbed_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctab> Function(ffi.Pointer<nctabbed>)>>('nctabbed_prev');
  late final _nctabbed_prev = _nctabbed_prevPtr
      .asFunction<ffi.Pointer<nctab> Function(ffi.Pointer<nctabbed>)>();

  ffi.Pointer<nctab> nctabbed_select(
    ffi.Pointer<nctabbed> nt,
    ffi.Pointer<nctab> t,
  ) {
    return _nctabbed_select(
      nt,
      t,
    );
  }

  late final _nctabbed_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nctab> Function(
              ffi.Pointer<nctabbed>, ffi.Pointer<nctab>)>>('nctabbed_select');
  late final _nctabbed_select = _nctabbed_selectPtr.asFunction<
      ffi.Pointer<nctab> Function(ffi.Pointer<nctabbed>, ffi.Pointer<nctab>)>();

  void nctabbed_channels(
    ffi.Pointer<nctabbed> nt,
    ffi.Pointer<ffi.Uint64> hdrchan,
    ffi.Pointer<ffi.Uint64> selchan,
    ffi.Pointer<ffi.Uint64> sepchan,
  ) {
    return _nctabbed_channels(
      nt,
      hdrchan,
      selchan,
      sepchan,
    );
  }

  late final _nctabbed_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nctabbed>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>)>>('nctabbed_channels');
  late final _nctabbed_channels = _nctabbed_channelsPtr.asFunction<
      void Function(ffi.Pointer<nctabbed>, ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint64>)>();

  ffi.Pointer<ffi.Int8> nctabbed_separator(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_separator(
      nt,
    );
  }

  late final _nctabbed_separatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<nctabbed>)>>('nctabbed_separator');
  late final _nctabbed_separator = _nctabbed_separatorPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<nctabbed>)>();

  int nctabbed_separator_width(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_separator_width(
      nt,
    );
  }

  late final _nctabbed_separator_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nctabbed>)>>(
          'nctabbed_separator_width');
  late final _nctabbed_separator_width = _nctabbed_separator_widthPtr
      .asFunction<int Function(ffi.Pointer<nctabbed>)>();

  void nctabbed_set_hdrchan(
    ffi.Pointer<nctabbed> nt,
    int chan,
  ) {
    return _nctabbed_set_hdrchan(
      nt,
      chan,
    );
  }

  late final _nctabbed_set_hdrchanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nctabbed>, ffi.Uint64)>>('nctabbed_set_hdrchan');
  late final _nctabbed_set_hdrchan = _nctabbed_set_hdrchanPtr
      .asFunction<void Function(ffi.Pointer<nctabbed>, int)>();

  void nctabbed_set_selchan(
    ffi.Pointer<nctabbed> nt,
    int chan,
  ) {
    return _nctabbed_set_selchan(
      nt,
      chan,
    );
  }

  late final _nctabbed_set_selchanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nctabbed>, ffi.Uint64)>>('nctabbed_set_selchan');
  late final _nctabbed_set_selchan = _nctabbed_set_selchanPtr
      .asFunction<void Function(ffi.Pointer<nctabbed>, int)>();

  void nctabbed_set_sepchan(
    ffi.Pointer<nctabbed> nt,
    int chan,
  ) {
    return _nctabbed_set_sepchan(
      nt,
      chan,
    );
  }

  late final _nctabbed_set_sepchanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nctabbed>, ffi.Uint64)>>('nctabbed_set_sepchan');
  late final _nctabbed_set_sepchan = _nctabbed_set_sepchanPtr
      .asFunction<void Function(ffi.Pointer<nctabbed>, int)>();

  tabcb nctab_set_cb(
    ffi.Pointer<nctab> t,
    tabcb newcb,
  ) {
    return _nctab_set_cb(
      t,
      newcb,
    );
  }

  late final _nctab_set_cbPtr =
      _lookup<ffi.NativeFunction<tabcb Function(ffi.Pointer<nctab>, tabcb)>>(
          'nctab_set_cb');
  late final _nctab_set_cb =
      _nctab_set_cbPtr.asFunction<tabcb Function(ffi.Pointer<nctab>, tabcb)>();

  int nctab_set_name(
    ffi.Pointer<nctab> t,
    ffi.Pointer<ffi.Int8> newname,
  ) {
    return _nctab_set_name(
      t,
      newname,
    );
  }

  late final _nctab_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<nctab>, ffi.Pointer<ffi.Int8>)>>('nctab_set_name');
  late final _nctab_set_name = _nctab_set_namePtr
      .asFunction<int Function(ffi.Pointer<nctab>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> nctab_set_userptr(
    ffi.Pointer<nctab> t,
    ffi.Pointer<ffi.Void> newopaque,
  ) {
    return _nctab_set_userptr(
      t,
      newopaque,
    );
  }

  late final _nctab_set_userptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<nctab>, ffi.Pointer<ffi.Void>)>>('nctab_set_userptr');
  late final _nctab_set_userptr = _nctab_set_userptrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<nctab>, ffi.Pointer<ffi.Void>)>();

  int nctabbed_set_separator(
    ffi.Pointer<nctabbed> nt,
    ffi.Pointer<ffi.Int8> separator,
  ) {
    return _nctabbed_set_separator(
      nt,
      separator,
    );
  }

  late final _nctabbed_set_separatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<nctabbed>,
              ffi.Pointer<ffi.Int8>)>>('nctabbed_set_separator');
  late final _nctabbed_set_separator = _nctabbed_set_separatorPtr
      .asFunction<int Function(ffi.Pointer<nctabbed>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ncuplot> ncuplot_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplot_options> opts,
    int miny,
    int maxy,
  ) {
    return _ncuplot_create(
      n,
      opts,
      miny,
      maxy,
    );
  }

  late final _ncuplot_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncuplot> Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncplot_options>,
              ffi.Uint64,
              ffi.Uint64)>>('ncuplot_create');
  late final _ncuplot_create = _ncuplot_createPtr.asFunction<
      ffi.Pointer<ncuplot> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncplot_options>, int, int)>();

  ffi.Pointer<ncplane> ncuplot_plane(
    ffi.Pointer<ncuplot> n,
  ) {
    return _ncuplot_plane(
      n,
    );
  }

  late final _ncuplot_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncuplot>)>>('ncuplot_plane');
  late final _ncuplot_plane = _ncuplot_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncuplot>)>();

  int ncuplot_add_sample(
    ffi.Pointer<ncuplot> n,
    int x,
    int y,
  ) {
    return _ncuplot_add_sample(
      n,
      x,
      y,
    );
  }

  late final _ncuplot_add_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncuplot>, ffi.Uint64,
              ffi.Uint64)>>('ncuplot_add_sample');
  late final _ncuplot_add_sample = _ncuplot_add_samplePtr
      .asFunction<int Function(ffi.Pointer<ncuplot>, int, int)>();

  int ncuplot_set_sample(
    ffi.Pointer<ncuplot> n,
    int x,
    int y,
  ) {
    return _ncuplot_set_sample(
      n,
      x,
      y,
    );
  }

  late final _ncuplot_set_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncuplot>, ffi.Uint64,
              ffi.Uint64)>>('ncuplot_set_sample');
  late final _ncuplot_set_sample = _ncuplot_set_samplePtr
      .asFunction<int Function(ffi.Pointer<ncuplot>, int, int)>();

  int ncuplot_sample(
    ffi.Pointer<ncuplot> n,
    int x,
    ffi.Pointer<ffi.Uint64> y,
  ) {
    return _ncuplot_sample(
      n,
      x,
      y,
    );
  }

  late final _ncuplot_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncuplot>, ffi.Uint64,
              ffi.Pointer<ffi.Uint64>)>>('ncuplot_sample');
  late final _ncuplot_sample = _ncuplot_samplePtr.asFunction<
      int Function(ffi.Pointer<ncuplot>, int, ffi.Pointer<ffi.Uint64>)>();

  void ncuplot_destroy(
    ffi.Pointer<ncuplot> n,
  ) {
    return _ncuplot_destroy(
      n,
    );
  }

  late final _ncuplot_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncuplot>)>>(
          'ncuplot_destroy');
  late final _ncuplot_destroy =
      _ncuplot_destroyPtr.asFunction<void Function(ffi.Pointer<ncuplot>)>();

  ffi.Pointer<ncfdplane> ncfdplane_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncfdplane_options> opts,
    int fd,
    ncfdplane_callback cbfxn,
    ncfdplane_done_cb donecbfxn,
  ) {
    return _ncfdplane_create(
      n,
      opts,
      fd,
      cbfxn,
      donecbfxn,
    );
  }

  late final _ncfdplane_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncfdplane> Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncfdplane_options>,
              ffi.Int32,
              ncfdplane_callback,
              ncfdplane_done_cb)>>('ncfdplane_create');
  late final _ncfdplane_create = _ncfdplane_createPtr.asFunction<
      ffi.Pointer<ncfdplane> Function(
          ffi.Pointer<ncplane>,
          ffi.Pointer<ncfdplane_options>,
          int,
          ncfdplane_callback,
          ncfdplane_done_cb)>();

  ffi.Pointer<ncplane> ncfdplane_plane(
    ffi.Pointer<ncfdplane> n,
  ) {
    return _ncfdplane_plane(
      n,
    );
  }

  late final _ncfdplane_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncfdplane>)>>('ncfdplane_plane');
  late final _ncfdplane_plane = _ncfdplane_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncfdplane>)>();

  int ncfdplane_destroy(
    ffi.Pointer<ncfdplane> n,
  ) {
    return _ncfdplane_destroy(
      n,
    );
  }

  late final _ncfdplane_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncfdplane>)>>(
          'ncfdplane_destroy');
  late final _ncfdplane_destroy =
      _ncfdplane_destroyPtr.asFunction<int Function(ffi.Pointer<ncfdplane>)>();

  ffi.Pointer<ncsubproc> ncsubproc_createv(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncsubproc_options> opts,
    ffi.Pointer<ffi.Int8> bin,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg,
    ncfdplane_callback cbfxn,
    ncfdplane_done_cb donecbfxn,
  ) {
    return _ncsubproc_createv(
      n,
      opts,
      bin,
      arg,
      cbfxn,
      donecbfxn,
    );
  }

  late final _ncsubproc_createvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncsubproc> Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncsubproc_options>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ncfdplane_callback,
              ncfdplane_done_cb)>>('ncsubproc_createv');
  late final _ncsubproc_createv = _ncsubproc_createvPtr.asFunction<
      ffi.Pointer<ncsubproc> Function(
          ffi.Pointer<ncplane>,
          ffi.Pointer<ncsubproc_options>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ncfdplane_callback,
          ncfdplane_done_cb)>();

  ffi.Pointer<ncsubproc> ncsubproc_createvp(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncsubproc_options> opts,
    ffi.Pointer<ffi.Int8> bin,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg,
    ncfdplane_callback cbfxn,
    ncfdplane_done_cb donecbfxn,
  ) {
    return _ncsubproc_createvp(
      n,
      opts,
      bin,
      arg,
      cbfxn,
      donecbfxn,
    );
  }

  late final _ncsubproc_createvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncsubproc> Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncsubproc_options>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ncfdplane_callback,
              ncfdplane_done_cb)>>('ncsubproc_createvp');
  late final _ncsubproc_createvp = _ncsubproc_createvpPtr.asFunction<
      ffi.Pointer<ncsubproc> Function(
          ffi.Pointer<ncplane>,
          ffi.Pointer<ncsubproc_options>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ncfdplane_callback,
          ncfdplane_done_cb)>();

  ffi.Pointer<ncsubproc> ncsubproc_createvpe(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncsubproc_options> opts,
    ffi.Pointer<ffi.Int8> bin,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> env,
    ncfdplane_callback cbfxn,
    ncfdplane_done_cb donecbfxn,
  ) {
    return _ncsubproc_createvpe(
      n,
      opts,
      bin,
      arg,
      env,
      cbfxn,
      donecbfxn,
    );
  }

  late final _ncsubproc_createvpePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncsubproc> Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ncsubproc_options>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ncfdplane_callback,
              ncfdplane_done_cb)>>('ncsubproc_createvpe');
  late final _ncsubproc_createvpe = _ncsubproc_createvpePtr.asFunction<
      ffi.Pointer<ncsubproc> Function(
          ffi.Pointer<ncplane>,
          ffi.Pointer<ncsubproc_options>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ncfdplane_callback,
          ncfdplane_done_cb)>();

  ffi.Pointer<ncplane> ncsubproc_plane(
    ffi.Pointer<ncsubproc> n,
  ) {
    return _ncsubproc_plane(
      n,
    );
  }

  late final _ncsubproc_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncsubproc>)>>('ncsubproc_plane');
  late final _ncsubproc_plane = _ncsubproc_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncsubproc>)>();

  int ncsubproc_destroy(
    ffi.Pointer<ncsubproc> n,
  ) {
    return _ncsubproc_destroy(
      n,
    );
  }

  late final _ncsubproc_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncsubproc>)>>(
          'ncsubproc_destroy');
  late final _ncsubproc_destroy =
      _ncsubproc_destroyPtr.asFunction<int Function(ffi.Pointer<ncsubproc>)>();

  int ncplane_qrcode(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Uint32> ymax,
    ffi.Pointer<ffi.Uint32> xmax,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ncplane_qrcode(
      n,
      ymax,
      xmax,
      data,
      len,
    );
  }

  late final _ncplane_qrcodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Void>,
              size_t)>>('ncplane_qrcode');
  late final _ncplane_qrcode = _ncplane_qrcodePtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ncreader> ncreader_create(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncreader_options> opts,
  ) {
    return _ncreader_create(
      n,
      opts,
    );
  }

  late final _ncreader_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncreader> Function(ffi.Pointer<ncplane>,
              ffi.Pointer<ncreader_options>)>>('ncreader_create');
  late final _ncreader_create = _ncreader_createPtr.asFunction<
      ffi.Pointer<ncreader> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<ncreader_options>)>();

  int ncreader_clear(
    ffi.Pointer<ncreader> n,
  ) {
    return _ncreader_clear(
      n,
    );
  }

  late final _ncreader_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncreader>)>>(
          'ncreader_clear');
  late final _ncreader_clear =
      _ncreader_clearPtr.asFunction<int Function(ffi.Pointer<ncreader>)>();

  ffi.Pointer<ncplane> ncreader_plane(
    ffi.Pointer<ncreader> n,
  ) {
    return _ncreader_plane(
      n,
    );
  }

  late final _ncreader_planePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<ncreader>)>>('ncreader_plane');
  late final _ncreader_plane = _ncreader_planePtr
      .asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<ncreader>)>();

  int ncreader_offer_input(
    ffi.Pointer<ncreader> n,
    ffi.Pointer<ncinput> ni,
  ) {
    return _ncreader_offer_input(
      n,
      ni,
    );
  }

  late final _ncreader_offer_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ncreader>,
              ffi.Pointer<ncinput>)>>('ncreader_offer_input');
  late final _ncreader_offer_input = _ncreader_offer_inputPtr
      .asFunction<int Function(ffi.Pointer<ncreader>, ffi.Pointer<ncinput>)>();

  int ncreader_move_left(
    ffi.Pointer<ncreader> n,
  ) {
    return _ncreader_move_left(
      n,
    );
  }

  late final _ncreader_move_leftPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncreader>)>>(
          'ncreader_move_left');
  late final _ncreader_move_left =
      _ncreader_move_leftPtr.asFunction<int Function(ffi.Pointer<ncreader>)>();

  int ncreader_move_right(
    ffi.Pointer<ncreader> n,
  ) {
    return _ncreader_move_right(
      n,
    );
  }

  late final _ncreader_move_rightPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncreader>)>>(
          'ncreader_move_right');
  late final _ncreader_move_right =
      _ncreader_move_rightPtr.asFunction<int Function(ffi.Pointer<ncreader>)>();

  int ncreader_move_up(
    ffi.Pointer<ncreader> n,
  ) {
    return _ncreader_move_up(
      n,
    );
  }

  late final _ncreader_move_upPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncreader>)>>(
          'ncreader_move_up');
  late final _ncreader_move_up =
      _ncreader_move_upPtr.asFunction<int Function(ffi.Pointer<ncreader>)>();

  int ncreader_move_down(
    ffi.Pointer<ncreader> n,
  ) {
    return _ncreader_move_down(
      n,
    );
  }

  late final _ncreader_move_downPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncreader>)>>(
          'ncreader_move_down');
  late final _ncreader_move_down =
      _ncreader_move_downPtr.asFunction<int Function(ffi.Pointer<ncreader>)>();

  int ncreader_write_egc(
    ffi.Pointer<ncreader> n,
    ffi.Pointer<ffi.Int8> egc,
  ) {
    return _ncreader_write_egc(
      n,
      egc,
    );
  }

  late final _ncreader_write_egcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncreader>,
              ffi.Pointer<ffi.Int8>)>>('ncreader_write_egc');
  late final _ncreader_write_egc = _ncreader_write_egcPtr
      .asFunction<int Function(ffi.Pointer<ncreader>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ncreader_contents(
    ffi.Pointer<ncreader> n,
  ) {
    return _ncreader_contents(
      n,
    );
  }

  late final _ncreader_contentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncreader>)>>('ncreader_contents');
  late final _ncreader_contents = _ncreader_contentsPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncreader>)>();

  void ncreader_destroy(
    ffi.Pointer<ncreader> n,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> contents,
  ) {
    return _ncreader_destroy(
      n,
      contents,
    );
  }

  late final _ncreader_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ncreader>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('ncreader_destroy');
  late final _ncreader_destroy = _ncreader_destroyPtr.asFunction<
      void Function(
          ffi.Pointer<ncreader>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ffi.Int8> notcurses_accountname() {
    return _notcurses_accountname();
  }

  late final _notcurses_accountnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'notcurses_accountname');
  late final _notcurses_accountname =
      _notcurses_accountnamePtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  ffi.Pointer<ffi.Int8> notcurses_hostname() {
    return _notcurses_hostname();
  }

  late final _notcurses_hostnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'notcurses_hostname');
  late final _notcurses_hostname =
      _notcurses_hostnamePtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  ffi.Pointer<ffi.Int8> notcurses_osversion() {
    return _notcurses_osversion();
  }

  late final _notcurses_osversionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'notcurses_osversion');
  late final _notcurses_osversion =
      _notcurses_osversionPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  void notcurses_debug(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<FILE> debugfp,
  ) {
    return _notcurses_debug(
      nc,
      debugfp,
    );
  }

  late final _notcurses_debugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<notcurses>, ffi.Pointer<FILE>)>>('notcurses_debug');
  late final _notcurses_debug = _notcurses_debugPtr
      .asFunction<void Function(ffi.Pointer<notcurses>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ncdirect> ncdirect_init(
    ffi.Pointer<ffi.Int8> termtype,
    ffi.Pointer<FILE> fp,
    int flags,
  ) {
    return _ncdirect_init(
      termtype,
      fp,
      flags,
    );
  }

  late final _ncdirect_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncdirect> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<FILE>, ffi.Uint64)>>('ncdirect_init');
  late final _ncdirect_init = _ncdirect_initPtr.asFunction<
      ffi.Pointer<ncdirect> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>, int)>();

  ffi.Pointer<ncdirect> ncdirect_core_init(
    ffi.Pointer<ffi.Int8> termtype,
    ffi.Pointer<FILE> fp,
    int flags,
  ) {
    return _ncdirect_core_init(
      termtype,
      fp,
      flags,
    );
  }

  late final _ncdirect_core_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncdirect> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<FILE>, ffi.Uint64)>>('ncdirect_core_init');
  late final _ncdirect_core_init = _ncdirect_core_initPtr.asFunction<
      ffi.Pointer<ncdirect> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>, int)>();

  ffi.Pointer<ffi.Int8> ncdirect_readline(
    ffi.Pointer<ncdirect> nc,
    ffi.Pointer<ffi.Int8> prompt,
  ) {
    return _ncdirect_readline(
      nc,
      prompt,
    );
  }

  late final _ncdirect_readlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncdirect>,
              ffi.Pointer<ffi.Int8>)>>('ncdirect_readline');
  late final _ncdirect_readline = _ncdirect_readlinePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>)>();

  int ncdirect_set_fg_rgb(
    ffi.Pointer<ncdirect> nc,
    int rgb,
  ) {
    return _ncdirect_set_fg_rgb(
      nc,
      rgb,
    );
  }

  late final _ncdirect_set_fg_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Uint32)>>('ncdirect_set_fg_rgb');
  late final _ncdirect_set_fg_rgb = _ncdirect_set_fg_rgbPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_set_bg_rgb(
    ffi.Pointer<ncdirect> nc,
    int rgb,
  ) {
    return _ncdirect_set_bg_rgb(
      nc,
      rgb,
    );
  }

  late final _ncdirect_set_bg_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Uint32)>>('ncdirect_set_bg_rgb');
  late final _ncdirect_set_bg_rgb = _ncdirect_set_bg_rgbPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_set_fg_palindex(
    ffi.Pointer<ncdirect> nc,
    int pidx,
  ) {
    return _ncdirect_set_fg_palindex(
      nc,
      pidx,
    );
  }

  late final _ncdirect_set_fg_palindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Int32)>>('ncdirect_set_fg_palindex');
  late final _ncdirect_set_fg_palindex = _ncdirect_set_fg_palindexPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_set_bg_palindex(
    ffi.Pointer<ncdirect> nc,
    int pidx,
  ) {
    return _ncdirect_set_bg_palindex(
      nc,
      pidx,
    );
  }

  late final _ncdirect_set_bg_palindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Int32)>>('ncdirect_set_bg_palindex');
  late final _ncdirect_set_bg_palindex = _ncdirect_set_bg_palindexPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_palette_size(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_palette_size(
      nc,
    );
  }

  late final _ncdirect_palette_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_palette_size');
  late final _ncdirect_palette_size = _ncdirect_palette_sizePtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_putstr(
    ffi.Pointer<ncdirect> nc,
    int channels,
    ffi.Pointer<ffi.Int8> utf8,
  ) {
    return _ncdirect_putstr(
      nc,
      channels,
      utf8,
    );
  }

  late final _ncdirect_putstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Uint64,
              ffi.Pointer<ffi.Int8>)>>('ncdirect_putstr');
  late final _ncdirect_putstr = _ncdirect_putstrPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, int, ffi.Pointer<ffi.Int8>)>();

  int ncdirect_putegc(
    ffi.Pointer<ncdirect> nc,
    int channels,
    ffi.Pointer<ffi.Int8> utf8,
    ffi.Pointer<ffi.Int32> sbytes,
  ) {
    return _ncdirect_putegc(
      nc,
      channels,
      utf8,
      sbytes,
    );
  }

  late final _ncdirect_putegcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>,
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>>('ncdirect_putegc');
  late final _ncdirect_putegc = _ncdirect_putegcPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int32>)>();

  int ncdirect_printf_aligned(
    ffi.Pointer<ncdirect> n,
    int y,
    int align,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _ncdirect_printf_aligned(
      n,
      y,
      align,
      fmt,
    );
  }

  late final _ncdirect_printf_alignedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('ncdirect_printf_aligned');
  late final _ncdirect_printf_aligned = _ncdirect_printf_alignedPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, int, int, ffi.Pointer<ffi.Int8>)>();

  int ncdirect_flush(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_flush(
      nc,
    );
  }

  late final _ncdirect_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_flush');
  late final _ncdirect_flush =
      _ncdirect_flushPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_set_fg_default(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_set_fg_default(
      nc,
    );
  }

  late final _ncdirect_set_fg_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_set_fg_default');
  late final _ncdirect_set_fg_default = _ncdirect_set_fg_defaultPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_set_bg_default(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_set_bg_default(
      nc,
    );
  }

  late final _ncdirect_set_bg_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_set_bg_default');
  late final _ncdirect_set_bg_default = _ncdirect_set_bg_defaultPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_dim_x(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_dim_x(
      nc,
    );
  }

  late final _ncdirect_dim_xPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_dim_x');
  late final _ncdirect_dim_x =
      _ncdirect_dim_xPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_dim_y(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_dim_y(
      nc,
    );
  }

  late final _ncdirect_dim_yPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_dim_y');
  late final _ncdirect_dim_y =
      _ncdirect_dim_yPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_supported_styles(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_supported_styles(
      nc,
    );
  }

  late final _ncdirect_supported_stylesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_supported_styles');
  late final _ncdirect_supported_styles = _ncdirect_supported_stylesPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_set_styles(
    ffi.Pointer<ncdirect> n,
    int stylebits,
  ) {
    return _ncdirect_set_styles(
      n,
      stylebits,
    );
  }

  late final _ncdirect_set_stylesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Uint32)>>('ncdirect_set_styles');
  late final _ncdirect_set_styles = _ncdirect_set_stylesPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_on_styles(
    ffi.Pointer<ncdirect> n,
    int stylebits,
  ) {
    return _ncdirect_on_styles(
      n,
      stylebits,
    );
  }

  late final _ncdirect_on_stylesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Uint32)>>('ncdirect_on_styles');
  late final _ncdirect_on_styles = _ncdirect_on_stylesPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_off_styles(
    ffi.Pointer<ncdirect> n,
    int stylebits,
  ) {
    return _ncdirect_off_styles(
      n,
      stylebits,
    );
  }

  late final _ncdirect_off_stylesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Uint32)>>('ncdirect_off_styles');
  late final _ncdirect_off_styles = _ncdirect_off_stylesPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_styles(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_styles(
      n,
    );
  }

  late final _ncdirect_stylesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_styles');
  late final _ncdirect_styles =
      _ncdirect_stylesPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_cursor_move_yx(
    ffi.Pointer<ncdirect> n,
    int y,
    int x,
  ) {
    return _ncdirect_cursor_move_yx(
      n,
      y,
      x,
    );
  }

  late final _ncdirect_cursor_move_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Int32,
              ffi.Int32)>>('ncdirect_cursor_move_yx');
  late final _ncdirect_cursor_move_yx = _ncdirect_cursor_move_yxPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int, int)>();

  int ncdirect_cursor_enable(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_cursor_enable(
      nc,
    );
  }

  late final _ncdirect_cursor_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_cursor_enable');
  late final _ncdirect_cursor_enable = _ncdirect_cursor_enablePtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_cursor_disable(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_cursor_disable(
      nc,
    );
  }

  late final _ncdirect_cursor_disablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_cursor_disable');
  late final _ncdirect_cursor_disable = _ncdirect_cursor_disablePtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_cursor_up(
    ffi.Pointer<ncdirect> nc,
    int num,
  ) {
    return _ncdirect_cursor_up(
      nc,
      num,
    );
  }

  late final _ncdirect_cursor_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Int32)>>('ncdirect_cursor_up');
  late final _ncdirect_cursor_up = _ncdirect_cursor_upPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_cursor_left(
    ffi.Pointer<ncdirect> nc,
    int num,
  ) {
    return _ncdirect_cursor_left(
      nc,
      num,
    );
  }

  late final _ncdirect_cursor_leftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Int32)>>('ncdirect_cursor_left');
  late final _ncdirect_cursor_left = _ncdirect_cursor_leftPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_cursor_right(
    ffi.Pointer<ncdirect> nc,
    int num,
  ) {
    return _ncdirect_cursor_right(
      nc,
      num,
    );
  }

  late final _ncdirect_cursor_rightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Int32)>>('ncdirect_cursor_right');
  late final _ncdirect_cursor_right = _ncdirect_cursor_rightPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_cursor_down(
    ffi.Pointer<ncdirect> nc,
    int num,
  ) {
    return _ncdirect_cursor_down(
      nc,
      num,
    );
  }

  late final _ncdirect_cursor_downPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>, ffi.Int32)>>('ncdirect_cursor_down');
  late final _ncdirect_cursor_down = _ncdirect_cursor_downPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>, int)>();

  int ncdirect_cursor_yx(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ffi.Uint32> y,
    ffi.Pointer<ffi.Uint32> x,
  ) {
    return _ncdirect_cursor_yx(
      n,
      y,
      x,
    );
  }

  late final _ncdirect_cursor_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncdirect_cursor_yx');
  late final _ncdirect_cursor_yx = _ncdirect_cursor_yxPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  int ncdirect_cursor_push(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_cursor_push(
      n,
    );
  }

  late final _ncdirect_cursor_pushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_cursor_push');
  late final _ncdirect_cursor_push = _ncdirect_cursor_pushPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_cursor_pop(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_cursor_pop(
      n,
    );
  }

  late final _ncdirect_cursor_popPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_cursor_pop');
  late final _ncdirect_cursor_pop =
      _ncdirect_cursor_popPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_clear(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_clear(
      nc,
    );
  }

  late final _ncdirect_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_clear');
  late final _ncdirect_clear =
      _ncdirect_clearPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  ffi.Pointer<nccapabilities> ncdirect_capabilities(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_capabilities(
      n,
    );
  }

  late final _ncdirect_capabilitiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nccapabilities> Function(
              ffi.Pointer<ncdirect>)>>('ncdirect_capabilities');
  late final _ncdirect_capabilities = _ncdirect_capabilitiesPtr.asFunction<
      ffi.Pointer<nccapabilities> Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_hline_interp(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ffi.Int8> egc,
    int len,
    int h1,
    int h2,
  ) {
    return _ncdirect_hline_interp(
      n,
      egc,
      len,
      h1,
      h2,
    );
  }

  late final _ncdirect_hline_interpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>,
              ffi.Uint32, ffi.Uint64, ffi.Uint64)>>('ncdirect_hline_interp');
  late final _ncdirect_hline_interp = _ncdirect_hline_interpPtr.asFunction<
      int Function(
          ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>, int, int, int)>();

  int ncdirect_vline_interp(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ffi.Int8> egc,
    int len,
    int h1,
    int h2,
  ) {
    return _ncdirect_vline_interp(
      n,
      egc,
      len,
      h1,
      h2,
    );
  }

  late final _ncdirect_vline_interpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>,
              ffi.Uint32, ffi.Uint64, ffi.Uint64)>>('ncdirect_vline_interp');
  late final _ncdirect_vline_interp = _ncdirect_vline_interpPtr.asFunction<
      int Function(
          ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>, int, int, int)>();

  int ncdirect_box(
    ffi.Pointer<ncdirect> n,
    int ul,
    int ur,
    int ll,
    int lr,
    ffi.Pointer<wchar_t> wchars,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncdirect_box(
      n,
      ul,
      ur,
      ll,
      lr,
      wchars,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncdirect_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ncdirect_box');
  late final _ncdirect_box = _ncdirect_boxPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, int, int, int, int,
          ffi.Pointer<wchar_t>, int, int, int)>();

  int ncdirect_rounded_box(
    ffi.Pointer<ncdirect> n,
    int ul,
    int ur,
    int ll,
    int lr,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncdirect_rounded_box(
      n,
      ul,
      ur,
      ll,
      lr,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncdirect_rounded_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ncdirect_rounded_box');
  late final _ncdirect_rounded_box = _ncdirect_rounded_boxPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, int, int, int, int, int, int, int)>();

  int ncdirect_double_box(
    ffi.Pointer<ncdirect> n,
    int ul,
    int ur,
    int ll,
    int lr,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncdirect_double_box(
      n,
      ul,
      ur,
      ll,
      lr,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncdirect_double_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ncdirect_double_box');
  late final _ncdirect_double_box = _ncdirect_double_boxPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, int, int, int, int, int, int, int)>();

  int ncdirect_get(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<timespec> absdl,
    ffi.Pointer<ncinput> ni,
  ) {
    return _ncdirect_get(
      n,
      absdl,
      ni,
    );
  }

  late final _ncdirect_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ncdirect>, ffi.Pointer<timespec>,
              ffi.Pointer<ncinput>)>>('ncdirect_get');
  late final _ncdirect_get = _ncdirect_getPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, ffi.Pointer<timespec>,
          ffi.Pointer<ncinput>)>();

  int ncdirect_inputready_fd(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_inputready_fd(
      n,
    );
  }

  late final _ncdirect_inputready_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_inputready_fd');
  late final _ncdirect_inputready_fd = _ncdirect_inputready_fdPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_stop(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_stop(
      nc,
    );
  }

  late final _ncdirect_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_stop');
  late final _ncdirect_stop =
      _ncdirect_stopPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_render_image(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ffi.Int8> filename,
    int align,
    int blitter,
    int scale,
  ) {
    return _ncdirect_render_image(
      n,
      filename,
      align,
      blitter,
      scale,
    );
  }

  late final _ncdirect_render_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('ncdirect_render_image');
  late final _ncdirect_render_image = _ncdirect_render_imagePtr.asFunction<
      int Function(
          ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>, int, int, int)>();

  ffi.Pointer<ncdirectv> ncdirect_render_frame(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ffi.Int8> filename,
    int blitter,
    int scale,
    int maxy,
    int maxx,
  ) {
    return _ncdirect_render_frame(
      n,
      filename,
      blitter,
      scale,
      maxy,
      maxx,
    );
  }

  late final _ncdirect_render_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncdirectv> Function(
              ffi.Pointer<ncdirect>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('ncdirect_render_frame');
  late final _ncdirect_render_frame = _ncdirect_render_framePtr.asFunction<
      ffi.Pointer<ncdirectv> Function(
          ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>, int, int, int, int)>();

  int ncdirect_raster_frame(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ncdirectv> ncdv,
    int align,
  ) {
    return _ncdirect_raster_frame(
      n,
      ncdv,
      align,
    );
  }

  late final _ncdirect_raster_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Pointer<ncdirectv>,
              ffi.Int32)>>('ncdirect_raster_frame');
  late final _ncdirect_raster_frame = _ncdirect_raster_framePtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, ffi.Pointer<ncdirectv>, int)>();

  ffi.Pointer<ncdirectf> ncdirectf_from_file(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _ncdirectf_from_file(
      n,
      filename,
    );
  }

  late final _ncdirectf_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncdirectf> Function(ffi.Pointer<ncdirect>,
              ffi.Pointer<ffi.Int8>)>>('ncdirectf_from_file');
  late final _ncdirectf_from_file = _ncdirectf_from_filePtr.asFunction<
      ffi.Pointer<ncdirectf> Function(
          ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>)>();

  void ncdirectf_free(
    ffi.Pointer<ncdirectf> frame,
  ) {
    return _ncdirectf_free(
      frame,
    );
  }

  late final _ncdirectf_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncdirectf>)>>(
          'ncdirectf_free');
  late final _ncdirectf_free =
      _ncdirectf_freePtr.asFunction<void Function(ffi.Pointer<ncdirectf>)>();

  ffi.Pointer<ncdirectv> ncdirectf_render(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ncdirectf> frame,
    ffi.Pointer<ncvisual_options> vopts,
  ) {
    return _ncdirectf_render(
      n,
      frame,
      vopts,
    );
  }

  late final _ncdirectf_renderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncdirectv> Function(
              ffi.Pointer<ncdirect>,
              ffi.Pointer<ncdirectf>,
              ffi.Pointer<ncvisual_options>)>>('ncdirectf_render');
  late final _ncdirectf_render = _ncdirectf_renderPtr.asFunction<
      ffi.Pointer<ncdirectv> Function(ffi.Pointer<ncdirect>,
          ffi.Pointer<ncdirectf>, ffi.Pointer<ncvisual_options>)>();

  int ncdirectf_geom(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ncdirectf> frame,
    ffi.Pointer<ncvisual_options> vopts,
    ffi.Pointer<ncvgeom> geom,
  ) {
    return _ncdirectf_geom(
      n,
      frame,
      vopts,
      geom,
    );
  }

  late final _ncdirectf_geomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>,
              ffi.Pointer<ncdirectf>,
              ffi.Pointer<ncvisual_options>,
              ffi.Pointer<ncvgeom>)>>('ncdirectf_geom');
  late final _ncdirectf_geom = _ncdirectf_geomPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, ffi.Pointer<ncdirectf>,
          ffi.Pointer<ncvisual_options>, ffi.Pointer<ncvgeom>)>();

  int ncdirect_stream(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ffi.Int8> filename,
    ncstreamcb streamer,
    ffi.Pointer<ncvisual_options> vopts,
    ffi.Pointer<ffi.Void> curry,
  ) {
    return _ncdirect_stream(
      n,
      filename,
      streamer,
      vopts,
      curry,
    );
  }

  late final _ncdirect_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncdirect>,
              ffi.Pointer<ffi.Int8>,
              ncstreamcb,
              ffi.Pointer<ncvisual_options>,
              ffi.Pointer<ffi.Void>)>>('ncdirect_stream');
  late final _ncdirect_stream = _ncdirect_streamPtr.asFunction<
      int Function(ffi.Pointer<ncdirect>, ffi.Pointer<ffi.Int8>, ncstreamcb,
          ffi.Pointer<ncvisual_options>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int8> ncdirect_detected_terminal(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_detected_terminal(
      n,
    );
  }

  late final _ncdirect_detected_terminalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ncdirect>)>>('ncdirect_detected_terminal');
  late final _ncdirect_detected_terminal = _ncdirect_detected_terminalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_canutf8(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_canutf8(
      n,
    );
  }

  late final _ncdirect_canutf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_canutf8');
  late final _ncdirect_canutf8 =
      _ncdirect_canutf8Ptr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_check_pixel_support(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_check_pixel_support(
      n,
    );
  }

  late final _ncdirect_check_pixel_supportPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_check_pixel_support');
  late final _ncdirect_check_pixel_support = _ncdirect_check_pixel_supportPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_canget_cursor(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_canget_cursor(
      nc,
    );
  }

  late final _ncdirect_canget_cursorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ncdirect>)>>(
          'ncdirect_canget_cursor');
  late final _ncdirect_canget_cursor = _ncdirect_canget_cursorPtr
      .asFunction<int Function(ffi.Pointer<ncdirect>)>();
}

class notcurses extends ffi.Opaque {}

class ncplane extends ffi.Opaque {}

class ncvisual extends ffi.Opaque {}

class ncuplot extends ffi.Opaque {}

class ncdplot extends ffi.Opaque {}

class ncprogbar extends ffi.Opaque {}

class ncfdplane extends ffi.Opaque {}

class ncsubproc extends ffi.Opaque {}

class ncselector extends ffi.Opaque {}

class ncmultiselector extends ffi.Opaque {}

class ncreader extends ffi.Opaque {}

class ncfadectx extends ffi.Opaque {}

class nctablet extends ffi.Opaque {}

class ncreel extends ffi.Opaque {}

class nctab extends ffi.Opaque {}

class nctabbed extends ffi.Opaque {}

class ncdirect extends ffi.Opaque {}

abstract class ncblitter_e {
  static const int NCBLIT_DEFAULT = 0;
  static const int NCBLIT_1x1 = 1;
  static const int NCBLIT_2x1 = 2;
  static const int NCBLIT_2x2 = 3;
  static const int NCBLIT_3x2 = 4;
  static const int NCBLIT_BRAILLE = 5;
  static const int NCBLIT_PIXEL = 6;
  static const int NCBLIT_4x1 = 7;
  static const int NCBLIT_8x1 = 8;
}

abstract class ncalign_e {
  static const int NCALIGN_UNALIGNED = 0;
  static const int NCALIGN_LEFT = 1;
  static const int NCALIGN_CENTER = 2;
  static const int NCALIGN_RIGHT = 3;
}

abstract class ncscale_e {
  static const int NCSCALE_NONE = 0;
  static const int NCSCALE_SCALE = 1;
  static const int NCSCALE_STRETCH = 2;
  static const int NCSCALE_NONE_HIRES = 3;
  static const int NCSCALE_SCALE_HIRES = 4;
}

typedef size_t = ffi.Uint64;

class nccell extends ffi.Struct {
  @ffi.Uint32()
  external int gcluster;

  @ffi.Uint8()
  external int gcluster_backstop;

  @ffi.Uint8()
  external int width;

  @ffi.Uint16()
  external int stylemask;

  @ffi.Uint64()
  external int channels;
}

abstract class ncloglevel_e {
  static const int NCLOGLEVEL_SILENT = -1;
  static const int NCLOGLEVEL_PANIC = 0;
  static const int NCLOGLEVEL_FATAL = 1;
  static const int NCLOGLEVEL_ERROR = 2;
  static const int NCLOGLEVEL_WARNING = 3;
  static const int NCLOGLEVEL_INFO = 4;
  static const int NCLOGLEVEL_VERBOSE = 5;
  static const int NCLOGLEVEL_DEBUG = 6;
  static const int NCLOGLEVEL_TRACE = 7;
}

class notcurses_options extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> termtype;

  @ffi.Int32()
  external int loglevel;

  @ffi.Uint32()
  external int margin_t;

  @ffi.Uint32()
  external int margin_r;

  @ffi.Uint32()
  external int margin_b;

  @ffi.Uint32()
  external int margin_l;

  @ffi.Uint64()
  external int flags;
}

typedef FILE = __sFILE;

class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _p;

  @ffi.Int32()
  external int _r;

  @ffi.Int32()
  external int _w;

  @ffi.Int16()
  external int _flags;

  @ffi.Int16()
  external int _file;

  external __sbuf _bf;

  @ffi.Int32()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>> _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int32)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int32()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint8> _nbuf;

  external __sbuf _lb;

  @ffi.Int32()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _base;

  @ffi.Int32()
  external int _size;
}

typedef fpos_t = ffi.Int64;

class __sFILEX extends ffi.Opaque {}

abstract class ncintype_e {
  static const int NCTYPE_UNKNOWN = 0;
  static const int NCTYPE_PRESS = 1;
  static const int NCTYPE_REPEAT = 2;
  static const int NCTYPE_RELEASE = 3;
}

class ncinput extends ffi.Struct {
  @ffi.Uint32()
  external int id;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int x;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Int8> utf8;

  @ffi.Uint8()
  external int alt;

  @ffi.Uint8()
  external int shift;

  @ffi.Uint8()
  external int ctrl;

  @ffi.Int32()
  external int evtype;

  @ffi.Uint32()
  external int modifiers;

  @ffi.Int32()
  external int ypx;

  @ffi.Int32()
  external int xpx;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class ncplane_options extends ffi.Struct {
  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int x;

  @ffi.Uint32()
  external int rows;

  @ffi.Uint32()
  external int cols;

  external ffi.Pointer<ffi.Void> userptr;

  external ffi.Pointer<ffi.Int8> name;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>)>>
      resizecb;

  @ffi.Uint64()
  external int flags;

  @ffi.Uint32()
  external int margin_b;

  @ffi.Uint32()
  external int margin_r;
}

class ncpalette extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Uint32> chans;
}

class nccapabilities extends ffi.Struct {
  @ffi.Uint32()
  external int colors;

  @ffi.Uint8()
  external int utf8;

  @ffi.Uint8()
  external int rgb;

  @ffi.Uint8()
  external int can_change_colors;

  @ffi.Uint8()
  external int halfblocks;

  @ffi.Uint8()
  external int quadrants;

  @ffi.Uint8()
  external int sextants;

  @ffi.Uint8()
  external int braille;
}

abstract class ncpixelimpl_e {
  static const int NCPIXEL_NONE = 0;
  static const int NCPIXEL_SIXEL = 1;
  static const int NCPIXEL_LINUXFB = 2;
  static const int NCPIXEL_ITERM2 = 3;
  static const int NCPIXEL_KITTY_STATIC = 4;
  static const int NCPIXEL_KITTY_ANIMATED = 5;
  static const int NCPIXEL_KITTY_SELFREF = 6;
}

class ncstats extends ffi.Struct {
  @ffi.Uint64()
  external int renders;

  @ffi.Uint64()
  external int writeouts;

  @ffi.Uint64()
  external int failed_renders;

  @ffi.Uint64()
  external int failed_writeouts;

  @ffi.Uint64()
  external int raster_bytes;

  @ffi.Int64()
  external int raster_max_bytes;

  @ffi.Int64()
  external int raster_min_bytes;

  @ffi.Uint64()
  external int render_ns;

  @ffi.Int64()
  external int render_max_ns;

  @ffi.Int64()
  external int render_min_ns;

  @ffi.Uint64()
  external int raster_ns;

  @ffi.Int64()
  external int raster_max_ns;

  @ffi.Int64()
  external int raster_min_ns;

  @ffi.Uint64()
  external int writeout_ns;

  @ffi.Int64()
  external int writeout_max_ns;

  @ffi.Int64()
  external int writeout_min_ns;

  @ffi.Uint64()
  external int cellelisions;

  @ffi.Uint64()
  external int cellemissions;

  @ffi.Uint64()
  external int fgelisions;

  @ffi.Uint64()
  external int fgemissions;

  @ffi.Uint64()
  external int bgelisions;

  @ffi.Uint64()
  external int bgemissions;

  @ffi.Uint64()
  external int defaultelisions;

  @ffi.Uint64()
  external int defaultemissions;

  @ffi.Uint64()
  external int refreshes;

  @ffi.Uint64()
  external int sprixelemissions;

  @ffi.Uint64()
  external int sprixelelisions;

  @ffi.Uint64()
  external int sprixelbytes;

  @ffi.Uint64()
  external int appsync_updates;

  @ffi.Uint64()
  external int input_errors;

  @ffi.Uint64()
  external int input_events;

  @ffi.Uint64()
  external int hpa_gratuitous;

  @ffi.Uint64()
  external int cell_geo_changes;

  @ffi.Uint64()
  external int pixel_geo_changes;

  @ffi.Uint64()
  external int fbbytes;

  @ffi.Uint32()
  external int planes;
}

typedef wchar_t = ffi.Int32;

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef fadecb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<notcurses>, ffi.Pointer<ncplane>,
            ffi.Pointer<timespec>, ffi.Pointer<ffi.Void>)>>;

class ncvisual_options extends ffi.Struct {
  external ffi.Pointer<ncplane> n;

  @ffi.Int32()
  external int scaling;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int x;

  @ffi.Uint32()
  external int begy;

  @ffi.Uint32()
  external int begx;

  @ffi.Uint32()
  external int leny;

  @ffi.Uint32()
  external int lenx;

  @ffi.Int32()
  external int blitter;

  @ffi.Uint64()
  external int flags;

  @ffi.Uint32()
  external int transcolor;

  @ffi.Uint32()
  external int pxoffy;

  @ffi.Uint32()
  external int pxoffx;
}

class ncvgeom extends ffi.Struct {
  @ffi.Uint32()
  external int pixy;

  @ffi.Uint32()
  external int pixx;

  @ffi.Uint32()
  external int cdimy;

  @ffi.Uint32()
  external int cdimx;

  @ffi.Uint32()
  external int rpixy;

  @ffi.Uint32()
  external int rpixx;

  @ffi.Uint32()
  external int rcelly;

  @ffi.Uint32()
  external int rcellx;

  @ffi.Uint32()
  external int scaley;

  @ffi.Uint32()
  external int scalex;

  @ffi.Uint32()
  external int begy;

  @ffi.Uint32()
  external int begx;

  @ffi.Uint32()
  external int leny;

  @ffi.Uint32()
  external int lenx;

  @ffi.Uint32()
  external int maxpixely;

  @ffi.Uint32()
  external int maxpixelx;

  @ffi.Int32()
  external int blitter;
}

typedef ncstreamcb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ncvisual>, ffi.Pointer<ncvisual_options>,
            ffi.Pointer<timespec>, ffi.Pointer<ffi.Void>)>>;

class ncreel_options extends ffi.Struct {
  @ffi.Uint32()
  external int bordermask;

  @ffi.Uint64()
  external int borderchan;

  @ffi.Uint32()
  external int tabletmask;

  @ffi.Uint64()
  external int tabletchan;

  @ffi.Uint64()
  external int focusedchan;

  @ffi.Uint64()
  external int flags;
}

typedef tabletcb = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nctablet>, ffi.Uint8)>>;

class ncselector_item extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> option;

  external ffi.Pointer<ffi.Int8> desc;
}

class ncselector_options extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> title;

  external ffi.Pointer<ffi.Int8> secondary;

  external ffi.Pointer<ffi.Int8> footer;

  external ffi.Pointer<ncselector_item> items;

  @ffi.Uint32()
  external int defidx;

  @ffi.Uint32()
  external int maxdisplay;

  @ffi.Uint64()
  external int opchannels;

  @ffi.Uint64()
  external int descchannels;

  @ffi.Uint64()
  external int titlechannels;

  @ffi.Uint64()
  external int footchannels;

  @ffi.Uint64()
  external int boxchannels;

  @ffi.Uint64()
  external int flags;
}

class ncmselector_item extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> option;

  external ffi.Pointer<ffi.Int8> desc;

  @ffi.Uint8()
  external int selected;
}

class ncmultiselector_options extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> title;

  external ffi.Pointer<ffi.Int8> secondary;

  external ffi.Pointer<ffi.Int8> footer;

  external ffi.Pointer<ncmselector_item> items;

  @ffi.Uint32()
  external int maxdisplay;

  @ffi.Uint64()
  external int opchannels;

  @ffi.Uint64()
  external int descchannels;

  @ffi.Uint64()
  external int titlechannels;

  @ffi.Uint64()
  external int footchannels;

  @ffi.Uint64()
  external int boxchannels;

  @ffi.Uint64()
  external int flags;
}

class nctree_item extends ffi.Struct {
  external ffi.Pointer<ffi.Void> curry;

  external ffi.Pointer<nctree_item> subs;

  @ffi.Uint32()
  external int subcount;
}

class nctree_options extends ffi.Struct {
  external ffi.Pointer<nctree_item> items;

  @ffi.Uint32()
  external int count;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ncplane>, ffi.Pointer<ffi.Void>, ffi.Int32)>>
      nctreecb;

  @ffi.Int32()
  external int indentcols;

  @ffi.Uint64()
  external int flags;
}

class nctree extends ffi.Opaque {}

class ncmenu_item extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> desc;

  external ncinput shortcut;
}

class ncmenu_section extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int itemcount;

  external ffi.Pointer<ncmenu_item> items;

  external ncinput shortcut;
}

class ncmenu_options extends ffi.Struct {
  external ffi.Pointer<ncmenu_section> sections;

  @ffi.Int32()
  external int sectioncount;

  @ffi.Uint64()
  external int headerchannels;

  @ffi.Uint64()
  external int sectionchannels;

  @ffi.Uint64()
  external int flags;
}

class ncmenu extends ffi.Opaque {}

class ncprogbar_options extends ffi.Struct {
  @ffi.Uint32()
  external int ulchannel;

  @ffi.Uint32()
  external int urchannel;

  @ffi.Uint32()
  external int blchannel;

  @ffi.Uint32()
  external int brchannel;

  @ffi.Uint64()
  external int flags;
}

class nctabbed_options extends ffi.Struct {
  @ffi.Uint64()
  external int selchan;

  @ffi.Uint64()
  external int hdrchan;

  @ffi.Uint64()
  external int sepchan;

  external ffi.Pointer<ffi.Int8> separator;

  @ffi.Uint64()
  external int flags;
}

typedef tabcb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<nctab>, ffi.Pointer<ncplane>, ffi.Pointer<ffi.Void>)>>;

class ncplot_options extends ffi.Struct {
  @ffi.Uint64()
  external int maxchannels;

  @ffi.Uint64()
  external int minchannels;

  @ffi.Uint16()
  external int legendstyle;

  @ffi.Int32()
  external int gridtype;

  @ffi.Int32()
  external int rangex;

  external ffi.Pointer<ffi.Int8> title;

  @ffi.Uint64()
  external int flags;
}

class ncfdplane_options extends ffi.Struct {
  external ffi.Pointer<ffi.Void> curry;

  @ffi.Uint8()
  external int follow;

  @ffi.Uint64()
  external int flags;
}

typedef ncfdplane_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ncfdplane>, ffi.Pointer<ffi.Void>,
            size_t, ffi.Pointer<ffi.Void>)>>;
typedef ncfdplane_done_cb = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ncfdplane>, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class ncsubproc_options extends ffi.Struct {
  external ffi.Pointer<ffi.Void> curry;

  @ffi.Uint64()
  external int restart_period;

  @ffi.Uint64()
  external int flags;
}

class ncreader_options extends ffi.Struct {
  @ffi.Uint64()
  external int tchannels;

  @ffi.Uint32()
  external int tattrword;

  @ffi.Uint64()
  external int flags;
}

typedef ncdirectv = ncplane;
typedef ncdirectf = ncvisual;

const int NCALIGN_TOP = 1;

const int NCALIGN_BOTTOM = 3;

const int NCALPHA_HIGHCONTRAST = 805306368;

const int NCALPHA_TRANSPARENT = 536870912;

const int NCALPHA_BLEND = 268435456;

const int NCALPHA_OPAQUE = 0;

const int NCPALETTESIZE = 256;

const int NC_NOBACKGROUND_MASK = -8718968878589280256;

const int NC_BGDEFAULT_MASK = 1073741824;

const int NC_BG_RGB_MASK = 16777215;

const int NC_BG_PALETTE = 134217728;

const int NC_BG_ALPHA_MASK = 805306368;

const int WCHAR_MAX_UTF8BYTES = 4;

const int NCSTYLE_MASK = 65535;

const int NCSTYLE_ITALIC = 16;

const int NCSTYLE_UNDERLINE = 8;

const int NCSTYLE_UNDERCURL = 4;

const int NCSTYLE_BOLD = 2;

const int NCSTYLE_STRUCK = 1;

const int NCSTYLE_NONE = 0;

const int NCOPTION_INHIBIT_SETLOCALE = 1;

const int NCOPTION_NO_CLEAR_BITMAPS = 2;

const int NCOPTION_NO_WINCH_SIGHANDLER = 4;

const int NCOPTION_NO_QUIT_SIGHANDLERS = 8;

const int NCOPTION_PRESERVE_CURSOR = 16;

const int NCOPTION_SUPPRESS_BANNERS = 32;

const int NCOPTION_NO_ALTERNATE_SCREEN = 64;

const int NCOPTION_NO_FONT_CHANGES = 128;

const int NCOPTION_DRAIN_INPUT = 256;

const int NCOPTION_SCROLLING = 512;

const int NCOPTION_CLI_MODE = 594;

const int NCMICE_NO_EVENTS = 0;

const int NCMICE_MOVE_EVENT = 1;

const int NCMICE_BUTTON_EVENT = 2;

const int NCMICE_DRAG_EVENT = 4;

const int NCMICE_ALL_EVENTS = 7;

const int NCPLANE_OPTION_HORALIGNED = 1;

const int NCPLANE_OPTION_VERALIGNED = 2;

const int NCPLANE_OPTION_MARGINALIZED = 4;

const int NCPLANE_OPTION_FIXED = 8;

const int NCPLANE_OPTION_AUTOGROW = 16;

const int NCPLANE_OPTION_VSCROLL = 32;

const int NCBOXMASK_TOP = 1;

const int NCBOXMASK_RIGHT = 2;

const int NCBOXMASK_BOTTOM = 4;

const int NCBOXMASK_LEFT = 8;

const int NCBOXGRAD_TOP = 16;

const int NCBOXGRAD_RIGHT = 32;

const int NCBOXGRAD_BOTTOM = 64;

const int NCBOXGRAD_LEFT = 128;

const int NCBOXCORNER_MASK = 768;

const int NCBOXCORNER_SHIFT = 8;

const int NCVISUAL_OPTION_NODEGRADE = 1;

const int NCVISUAL_OPTION_BLEND = 2;

const int NCVISUAL_OPTION_HORALIGNED = 4;

const int NCVISUAL_OPTION_VERALIGNED = 8;

const int NCVISUAL_OPTION_ADDALPHA = 16;

const int NCVISUAL_OPTION_CHILDPLANE = 32;

const int NCVISUAL_OPTION_NOINTERPOLATE = 64;

const int NCREEL_OPTION_INFINITESCROLL = 1;

const int NCREEL_OPTION_CIRCULAR = 2;

const int NCPREFIXCOLUMNS = 7;

const int NCIPREFIXCOLUMNS = 8;

const int NCBPREFIXCOLUMNS = 9;

const int NCPREFIXSTRLEN = 8;

const int NCIPREFIXSTRLEN = 9;

const int NCBPREFIXSTRLEN = 10;

const int NCMENU_OPTION_BOTTOM = 1;

const int NCMENU_OPTION_HIDING = 2;

const int NCPROGBAR_OPTION_RETROGRADE = 1;

const int NCTABBED_OPTION_BOTTOM = 1;

const int NCPLOT_OPTION_LABELTICKSD = 1;

const int NCPLOT_OPTION_EXPONENTIALD = 2;

const int NCPLOT_OPTION_VERTICALI = 4;

const int NCPLOT_OPTION_NODEGRADE = 8;

const int NCPLOT_OPTION_DETECTMAXONLY = 16;

const int NCPLOT_OPTION_PRINTSAMPLE = 32;

const int NCREADER_OPTION_HORSCROLL = 1;

const int NCREADER_OPTION_VERSCROLL = 2;

const int NCREADER_OPTION_NOCMDKEYS = 4;

const int NCREADER_OPTION_CURSOR = 8;

const int NCDIRECT_OPTION_INHIBIT_SETLOCALE = 1;

const int NCDIRECT_OPTION_INHIBIT_CBREAK = 2;

const int NCDIRECT_OPTION_DRAIN_INPUT = 4;

const int NCDIRECT_OPTION_NO_QUIT_SIGHANDLERS = 8;

const int NCDIRECT_OPTION_VERBOSE = 16;

const int NCDIRECT_OPTION_VERY_VERBOSE = 32;
