// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
import './notcurses_g.dart';

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Notcurses binding for Dart
class NcFfiInline {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NcFfiInline(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NcFfiInline.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  int nccapability_canchangecolor(
    ffi.Pointer<nccapabilities> caps,
  ) {
    return _nccapability_canchangecolor(
      caps,
    );
  }

  late final _nccapability_canchangecolorPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<nccapabilities>)>>('nccapability_canchangecolor');
  late final _nccapability_canchangecolor =
      _nccapability_canchangecolorPtr.asFunction<int Function(ffi.Pointer<nccapabilities>)>();

  int nccell_bg_default_p(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_bg_default_p(
      cl,
    );
  }

  late final _nccell_bg_default_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<nccell>)>>('nccell_bg_default_p');
  late final _nccell_bg_default_p = _nccell_bg_default_pPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_bg_palindex_p(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_bg_palindex_p(
      cl,
    );
  }

  late final _nccell_bg_palindex_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<nccell>)>>('nccell_bg_palindex_p');
  late final _nccell_bg_palindex_p = _nccell_bg_palindex_pPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_double_wide_p(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_double_wide_p(
      c,
    );
  }

  late final _nccell_double_wide_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<nccell>)>>('nccell_double_wide_p');
  late final _nccell_double_wide_p = _nccell_double_wide_pPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_fg_default_p(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_fg_default_p(
      cl,
    );
  }

  late final _nccell_fg_default_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<nccell>)>>('nccell_fg_default_p');
  late final _nccell_fg_default_p = _nccell_fg_default_pPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_fg_palindex_p(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_fg_palindex_p(
      cl,
    );
  }

  late final _nccell_fg_palindex_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<nccell>)>>('nccell_fg_palindex_p');
  late final _nccell_fg_palindex_p = _nccell_fg_palindex_pPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_wide_left_p(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_wide_left_p(
      c,
    );
  }

  late final _nccell_wide_left_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<nccell>)>>('nccell_wide_left_p');
  late final _nccell_wide_left_p = _nccell_wide_left_pPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_wide_right_p(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_wide_right_p(
      c,
    );
  }

  late final _nccell_wide_right_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<nccell>)>>('nccell_wide_right_p');
  late final _nccell_wide_right_p = _nccell_wide_right_pPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccellcmp(
    ffi.Pointer<ncplane> n1,
    ffi.Pointer<nccell> c1,
    ffi.Pointer<ncplane> n2,
    ffi.Pointer<nccell> c2,
  ) {
    return _nccellcmp(
      n1,
      c1,
      n2,
      c2,
    );
  }

  late final _nccellcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>>('nccellcmp');
  late final _nccellcmp = _nccellcmpPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>();

  int ncchannel_default_p(
    int channel,
  ) {
    return _ncchannel_default_p(
      channel,
    );
  }

  late final _ncchannel_default_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint32)>>('ncchannel_default_p');
  late final _ncchannel_default_p = _ncchannel_default_pPtr.asFunction<int Function(int)>();

  int ncchannel_palindex_p(
    int channel,
  ) {
    return _ncchannel_palindex_p(
      channel,
    );
  }

  late final _ncchannel_palindex_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint32)>>('ncchannel_palindex_p');
  late final _ncchannel_palindex_p = _ncchannel_palindex_pPtr.asFunction<int Function(int)>();

  int ncchannel_rgb_p(
    int channel,
  ) {
    return _ncchannel_rgb_p(
      channel,
    );
  }

  late final _ncchannel_rgb_pPtr = _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint32)>>('ncchannel_rgb_p');
  late final _ncchannel_rgb_p = _ncchannel_rgb_pPtr.asFunction<int Function(int)>();

  int ncchannels_bg_default_p(
    int channels,
  ) {
    return _ncchannels_bg_default_p(
      channels,
    );
  }

  late final _ncchannels_bg_default_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint64)>>('ncchannels_bg_default_p');
  late final _ncchannels_bg_default_p = _ncchannels_bg_default_pPtr.asFunction<int Function(int)>();

  int ncchannels_bg_palindex_p(
    int channels,
  ) {
    return _ncchannels_bg_palindex_p(
      channels,
    );
  }

  late final _ncchannels_bg_palindex_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint64)>>('ncchannels_bg_palindex_p');
  late final _ncchannels_bg_palindex_p = _ncchannels_bg_palindex_pPtr.asFunction<int Function(int)>();

  int ncchannels_bg_rgb_p(
    int channels,
  ) {
    return _ncchannels_bg_rgb_p(
      channels,
    );
  }

  late final _ncchannels_bg_rgb_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint64)>>('ncchannels_bg_rgb_p');
  late final _ncchannels_bg_rgb_p = _ncchannels_bg_rgb_pPtr.asFunction<int Function(int)>();

  int ncchannels_fg_default_p(
    int channels,
  ) {
    return _ncchannels_fg_default_p(
      channels,
    );
  }

  late final _ncchannels_fg_default_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint64)>>('ncchannels_fg_default_p');
  late final _ncchannels_fg_default_p = _ncchannels_fg_default_pPtr.asFunction<int Function(int)>();

  int ncchannels_fg_palindex_p(
    int channels,
  ) {
    return _ncchannels_fg_palindex_p(
      channels,
    );
  }

  late final _ncchannels_fg_palindex_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint64)>>('ncchannels_fg_palindex_p');
  late final _ncchannels_fg_palindex_p = _ncchannels_fg_palindex_pPtr.asFunction<int Function(int)>();

  int ncchannels_fg_rgb_p(
    int channels,
  ) {
    return _ncchannels_fg_rgb_p(
      channels,
    );
  }

  late final _ncchannels_fg_rgb_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint64)>>('ncchannels_fg_rgb_p');
  late final _ncchannels_fg_rgb_p = _ncchannels_fg_rgb_pPtr.asFunction<int Function(int)>();

  int ncdirect_canbraille(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_canbraille(
      nc,
    );
  }

  late final _ncdirect_canbraillePtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_canbraille');
  late final _ncdirect_canbraille = _ncdirect_canbraillePtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_canchangecolor(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_canchangecolor(
      n,
    );
  }

  late final _ncdirect_canchangecolorPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_canchangecolor');
  late final _ncdirect_canchangecolor = _ncdirect_canchangecolorPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_canfade(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_canfade(
      n,
    );
  }

  late final _ncdirect_canfadePtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_canfade');
  late final _ncdirect_canfade = _ncdirect_canfadePtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_canhalfblock(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_canhalfblock(
      nc,
    );
  }

  late final _ncdirect_canhalfblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_canhalfblock');
  late final _ncdirect_canhalfblock = _ncdirect_canhalfblockPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_canopen_images(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_canopen_images(
      n,
    );
  }

  late final _ncdirect_canopen_imagesPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_canopen_images');
  late final _ncdirect_canopen_images = _ncdirect_canopen_imagesPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_canopen_videos(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_canopen_videos(
      n,
    );
  }

  late final _ncdirect_canopen_videosPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_canopen_videos');
  late final _ncdirect_canopen_videos = _ncdirect_canopen_videosPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_canquadrant(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_canquadrant(
      nc,
    );
  }

  late final _ncdirect_canquadrantPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_canquadrant');
  late final _ncdirect_canquadrant = _ncdirect_canquadrantPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_cansextant(
    ffi.Pointer<ncdirect> nc,
  ) {
    return _ncdirect_cansextant(
      nc,
    );
  }

  late final _ncdirect_cansextantPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_cansextant');
  late final _ncdirect_cansextant = _ncdirect_cansextantPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncdirect_cantruecolor(
    ffi.Pointer<ncdirect> n,
  ) {
    return _ncdirect_cantruecolor(
      n,
    );
  }

  late final _ncdirect_cantruecolorPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncdirect>)>>('ncdirect_cantruecolor');
  late final _ncdirect_cantruecolor = _ncdirect_cantruecolorPtr.asFunction<int Function(ffi.Pointer<ncdirect>)>();

  int ncinput_alt_p(
    ffi.Pointer<ncinput> n,
  ) {
    return _ncinput_alt_p(
      n,
    );
  }

  late final _ncinput_alt_pPtr = _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_alt_p');
  late final _ncinput_alt_p = _ncinput_alt_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int ncinput_capslock_p(
    ffi.Pointer<ncinput> n,
  ) {
    return _ncinput_capslock_p(
      n,
    );
  }

  late final _ncinput_capslock_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_capslock_p');
  late final _ncinput_capslock_p = _ncinput_capslock_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int ncinput_ctrl_p(
    ffi.Pointer<ncinput> n,
  ) {
    return _ncinput_ctrl_p(
      n,
    );
  }

  late final _ncinput_ctrl_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_ctrl_p');
  late final _ncinput_ctrl_p = _ncinput_ctrl_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int ncinput_equal_p(
    ffi.Pointer<ncinput> n1,
    ffi.Pointer<ncinput> n2,
  ) {
    return _ncinput_equal_p(
      n1,
      n2,
    );
  }

  late final _ncinput_equal_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>, ffi.Pointer<ncinput>)>>('ncinput_equal_p');
  late final _ncinput_equal_p =
      _ncinput_equal_pPtr.asFunction<int Function(ffi.Pointer<ncinput>, ffi.Pointer<ncinput>)>();

  int ncinput_hyper_p(
    ffi.Pointer<ncinput> n,
  ) {
    return _ncinput_hyper_p(
      n,
    );
  }

  late final _ncinput_hyper_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_hyper_p');
  late final _ncinput_hyper_p = _ncinput_hyper_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int ncinput_meta_p(
    ffi.Pointer<ncinput> n,
  ) {
    return _ncinput_meta_p(
      n,
    );
  }

  late final _ncinput_meta_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_meta_p');
  late final _ncinput_meta_p = _ncinput_meta_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int ncinput_nomod_p(
    ffi.Pointer<ncinput> ni,
  ) {
    return _ncinput_nomod_p(
      ni,
    );
  }

  late final _ncinput_nomod_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_nomod_p');
  late final _ncinput_nomod_p = _ncinput_nomod_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int ncinput_numlock_p(
    ffi.Pointer<ncinput> n,
  ) {
    return _ncinput_numlock_p(
      n,
    );
  }

  late final _ncinput_numlock_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_numlock_p');
  late final _ncinput_numlock_p = _ncinput_numlock_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int ncinput_shift_p(
    ffi.Pointer<ncinput> n,
  ) {
    return _ncinput_shift_p(
      n,
    );
  }

  late final _ncinput_shift_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_shift_p');
  late final _ncinput_shift_p = _ncinput_shift_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int ncinput_super_p(
    ffi.Pointer<ncinput> n,
  ) {
    return _ncinput_super_p(
      n,
    );
  }

  late final _ncinput_super_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncinput>)>>('ncinput_super_p');
  late final _ncinput_super_p = _ncinput_super_pPtr.asFunction<int Function(ffi.Pointer<ncinput>)>();

  int nckey_mouse_p(
    int r,
  ) {
    return _nckey_mouse_p(
      r,
    );
  }

  late final _nckey_mouse_pPtr = _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint32)>>('nckey_mouse_p');
  late final _nckey_mouse_p = _nckey_mouse_pPtr.asFunction<int Function(int)>();

  int nckey_pua_p(
    int w,
  ) {
    return _nckey_pua_p(
      w,
    );
  }

  late final _nckey_pua_pPtr = _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint32)>>('nckey_pua_p');
  late final _nckey_pua_p = _nckey_pua_pPtr.asFunction<int Function(int)>();

  int nckey_supppuaa_p(
    int w,
  ) {
    return _nckey_supppuaa_p(
      w,
    );
  }

  late final _nckey_supppuaa_pPtr = _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint32)>>('nckey_supppuaa_p');
  late final _nckey_supppuaa_p = _nckey_supppuaa_pPtr.asFunction<int Function(int)>();

  int nckey_supppuab_p(
    int w,
  ) {
    return _nckey_supppuab_p(
      w,
    );
  }

  late final _nckey_supppuab_pPtr = _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint32)>>('nckey_supppuab_p');
  late final _nckey_supppuab_p = _nckey_supppuab_pPtr.asFunction<int Function(int)>();

  int nckey_synthesized_p(
    int w,
  ) {
    return _nckey_synthesized_p(
      w,
    );
  }

  late final _nckey_synthesized_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Uint32)>>('nckey_synthesized_p');
  late final _nckey_synthesized_p = _nckey_synthesized_pPtr.asFunction<int Function(int)>();

  int ncplane_bg_default_p(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_bg_default_p(
      n,
    );
  }

  late final _ncplane_bg_default_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncplane>)>>('ncplane_bg_default_p');
  late final _ncplane_bg_default_p = _ncplane_bg_default_pPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_fg_default_p(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_fg_default_p(
      n,
    );
  }

  late final _ncplane_fg_default_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ncplane>)>>('ncplane_fg_default_p');
  late final _ncplane_fg_default_p = _ncplane_fg_default_pPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int notcurses_canbraille(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_canbraille(
      nc,
    );
  }

  late final _notcurses_canbraillePtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_canbraille');
  late final _notcurses_canbraille = _notcurses_canbraillePtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_canchangecolor(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_canchangecolor(
      nc,
    );
  }

  late final _notcurses_canchangecolorPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_canchangecolor');
  late final _notcurses_canchangecolor =
      _notcurses_canchangecolorPtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_canfade(
    ffi.Pointer<notcurses> n,
  ) {
    return _notcurses_canfade(
      n,
    );
  }

  late final _notcurses_canfadePtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_canfade');
  late final _notcurses_canfade = _notcurses_canfadePtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_canhalfblock(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_canhalfblock(
      nc,
    );
  }

  late final _notcurses_canhalfblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_canhalfblock');
  late final _notcurses_canhalfblock = _notcurses_canhalfblockPtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_canpixel(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_canpixel(
      nc,
    );
  }

  late final _notcurses_canpixelPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_canpixel');
  late final _notcurses_canpixel = _notcurses_canpixelPtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_canquadrant(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_canquadrant(
      nc,
    );
  }

  late final _notcurses_canquadrantPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_canquadrant');
  late final _notcurses_canquadrant = _notcurses_canquadrantPtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_cansextant(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_cansextant(
      nc,
    );
  }

  late final _notcurses_cansextantPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_cansextant');
  late final _notcurses_cansextant = _notcurses_cansextantPtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_cantruecolor(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_cantruecolor(
      nc,
    );
  }

  late final _notcurses_cantruecolorPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_cantruecolor');
  late final _notcurses_cantruecolor = _notcurses_cantruecolorPtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_canutf8(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_canutf8(
      nc,
    );
  }

  late final _notcurses_canutf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<notcurses>)>>('notcurses_canutf8');
  late final _notcurses_canutf8 = _notcurses_canutf8Ptr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<ffi.Int8> nccell_extract(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    ffi.Pointer<ffi.Uint16> stylemask,
    ffi.Pointer<ffi.Uint64> channels,
  ) {
    return _nccell_extract(
      n,
      c,
      stylemask,
      channels,
    );
  }

  late final _nccell_extractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint64>)>>('nccell_extract');
  late final _nccell_extract = _nccell_extractPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint64>)>();

  ffi.Pointer<ffi.Int8> nccell_strdup(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_strdup(
      n,
      c,
    );
  }

  late final _nccell_strdupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>>(
          'nccell_strdup');
  late final _nccell_strdup =
      _nccell_strdupPtr.asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>();

  ffi.Pointer<ffi.Int8> ncwcsrtombs(
    ffi.Pointer<wchar_t> src,
  ) {
    return _ncwcsrtombs(
      src,
    );
  }

  late final _ncwcsrtombsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<wchar_t>)>>('ncwcsrtombs');
  late final _ncwcsrtombs = _ncwcsrtombsPtr.asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<ffi.Int8> ncbprefix(
    int val,
    int decimal,
    ffi.Pointer<ffi.Int8> buf,
    int omitdec,
  ) {
    return _ncbprefix(
      val,
      decimal,
      buf,
      omitdec,
    );
  }

  late final _ncbprefixPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(uintmax_t, uintmax_t, ffi.Pointer<ffi.Int8>, ffi.Int32)>>(
      'ncbprefix');
  late final _ncbprefix =
      _ncbprefixPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int, int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> nciprefix(
    int val,
    int decimal,
    ffi.Pointer<ffi.Int8> buf,
    int omitdec,
  ) {
    return _nciprefix(
      val,
      decimal,
      buf,
      omitdec,
    );
  }

  late final _nciprefixPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(uintmax_t, uintmax_t, ffi.Pointer<ffi.Int8>, ffi.Int32)>>(
      'nciprefix');
  late final _nciprefix =
      _nciprefixPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int, int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> ncqprefix(
    int val,
    int decimal,
    ffi.Pointer<ffi.Int8> buf,
    int omitdec,
  ) {
    return _ncqprefix(
      val,
      decimal,
      buf,
      omitdec,
    );
  }

  late final _ncqprefixPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(uintmax_t, uintmax_t, ffi.Pointer<ffi.Int8>, ffi.Int32)>>(
      'ncqprefix');
  late final _ncqprefix =
      _ncqprefixPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int, int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ncplane> notcurses_stddim_yx_const(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ffi.Uint32> y,
    ffi.Pointer<ffi.Uint32> x,
  ) {
    return _notcurses_stddim_yx_const(
      nc,
      y,
      x,
    );
  }

  late final _notcurses_stddim_yx_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>>('notcurses_stddim_yx_const');
  late final _notcurses_stddim_yx_const = _notcurses_stddim_yx_constPtr.asFunction<
      ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int nccell_load_char(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    int ch,
  ) {
    return _nccell_load_char(
      n,
      c,
      ch,
    );
  }

  late final _nccell_load_charPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Int8)>>(
          'nccell_load_char');
  late final _nccell_load_char =
      _nccell_load_charPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, int)>();

  int nccell_load_egc32(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    int egc,
  ) {
    return _nccell_load_egc32(
      n,
      c,
      egc,
    );
  }

  late final _nccell_load_egc32Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Uint32)>>(
          'nccell_load_egc32');
  late final _nccell_load_egc32 =
      _nccell_load_egc32Ptr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, int)>();

  int nccell_load_ucs32(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    int u,
  ) {
    return _nccell_load_ucs32(
      n,
      c,
      u,
    );
  }

  late final _nccell_load_ucs32Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Uint32)>>(
          'nccell_load_ucs32');
  late final _nccell_load_ucs32 =
      _nccell_load_ucs32Ptr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, int)>();

  int nccell_prime(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    ffi.Pointer<ffi.Int8> gcluster,
    int stylemask,
    int channels,
  ) {
    return _nccell_prime(
      n,
      c,
      gcluster,
      stylemask,
      channels,
    );
  }

  late final _nccell_primePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<ffi.Int8>, ffi.Uint16,
              ffi.Uint64)>>('nccell_prime');
  late final _nccell_prime = _nccell_primePtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<ffi.Int8>, int, int)>();

  int nccell_set_bg_alpha(
    ffi.Pointer<nccell> c,
    int alpha,
  ) {
    return _nccell_set_bg_alpha(
      c,
      alpha,
    );
  }

  late final _nccell_set_bg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_bg_alpha');
  late final _nccell_set_bg_alpha = _nccell_set_bg_alphaPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int nccell_set_bg_palindex(
    ffi.Pointer<nccell> cl,
    int idx,
  ) {
    return _nccell_set_bg_palindex(
      cl,
      idx,
    );
  }

  late final _nccell_set_bg_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_bg_palindex');
  late final _nccell_set_bg_palindex = _nccell_set_bg_palindexPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int nccell_set_bg_rgb(
    ffi.Pointer<nccell> c,
    int channel,
  ) {
    return _nccell_set_bg_rgb(
      c,
      channel,
    );
  }

  late final _nccell_set_bg_rgbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_bg_rgb');
  late final _nccell_set_bg_rgb = _nccell_set_bg_rgbPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int nccell_set_bg_rgb8(
    ffi.Pointer<nccell> cl,
    int r,
    int g,
    int b,
  ) {
    return _nccell_set_bg_rgb8(
      cl,
      r,
      g,
      b,
    );
  }

  late final _nccell_set_bg_rgb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nccell>, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'nccell_set_bg_rgb8');
  late final _nccell_set_bg_rgb8 =
      _nccell_set_bg_rgb8Ptr.asFunction<int Function(ffi.Pointer<nccell>, int, int, int)>();

  int nccell_set_fg_alpha(
    ffi.Pointer<nccell> c,
    int alpha,
  ) {
    return _nccell_set_fg_alpha(
      c,
      alpha,
    );
  }

  late final _nccell_set_fg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_fg_alpha');
  late final _nccell_set_fg_alpha = _nccell_set_fg_alphaPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int nccell_set_fg_palindex(
    ffi.Pointer<nccell> cl,
    int idx,
  ) {
    return _nccell_set_fg_palindex(
      cl,
      idx,
    );
  }

  late final _nccell_set_fg_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_fg_palindex');
  late final _nccell_set_fg_palindex = _nccell_set_fg_palindexPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int nccell_set_fg_rgb(
    ffi.Pointer<nccell> c,
    int channel,
  ) {
    return _nccell_set_fg_rgb(
      c,
      channel,
    );
  }

  late final _nccell_set_fg_rgbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_fg_rgb');
  late final _nccell_set_fg_rgb = _nccell_set_fg_rgbPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int nccell_set_fg_rgb8(
    ffi.Pointer<nccell> cl,
    int r,
    int g,
    int b,
  ) {
    return _nccell_set_fg_rgb8(
      cl,
      r,
      g,
      b,
    );
  }

  late final _nccell_set_fg_rgb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<nccell>, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'nccell_set_fg_rgb8');
  late final _nccell_set_fg_rgb8 =
      _nccell_set_fg_rgb8Ptr.asFunction<int Function(ffi.Pointer<nccell>, int, int, int)>();

  int nccells_ascii_box(
    ffi.Pointer<ncplane> n,
    int attr,
    int channels,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hl,
    ffi.Pointer<nccell> vl,
  ) {
    return _nccells_ascii_box(
      n,
      attr,
      channels,
      ul,
      ur,
      ll,
      lr,
      hl,
      vl,
    );
  }

  late final _nccells_ascii_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Uint16,
              ffi.Uint64,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>)>>('nccells_ascii_box');
  late final _nccells_ascii_box = _nccells_ascii_boxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
          ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>)>();

  int nccells_double_box(
    ffi.Pointer<ncplane> n,
    int attr,
    int channels,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hl,
    ffi.Pointer<nccell> vl,
  ) {
    return _nccells_double_box(
      n,
      attr,
      channels,
      ul,
      ur,
      ll,
      lr,
      hl,
      vl,
    );
  }

  late final _nccells_double_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Uint16,
              ffi.Uint64,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>)>>('nccells_double_box');
  late final _nccells_double_box = _nccells_double_boxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
          ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>)>();

  int nccells_heavy_box(
    ffi.Pointer<ncplane> n,
    int attr,
    int channels,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hl,
    ffi.Pointer<nccell> vl,
  ) {
    return _nccells_heavy_box(
      n,
      attr,
      channels,
      ul,
      ur,
      ll,
      lr,
      hl,
      vl,
    );
  }

  late final _nccells_heavy_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Uint16,
              ffi.Uint64,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>)>>('nccells_heavy_box');
  late final _nccells_heavy_box = _nccells_heavy_boxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
          ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>)>();

  int nccells_light_box(
    ffi.Pointer<ncplane> n,
    int attr,
    int channels,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hl,
    ffi.Pointer<nccell> vl,
  ) {
    return _nccells_light_box(
      n,
      attr,
      channels,
      ul,
      ur,
      ll,
      lr,
      hl,
      vl,
    );
  }

  late final _nccells_light_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Uint16,
              ffi.Uint64,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>)>>('nccells_light_box');
  late final _nccells_light_box = _nccells_light_boxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
          ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>)>();

  int nccells_load_box(
    ffi.Pointer<ncplane> n,
    int styles,
    int channels,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hl,
    ffi.Pointer<nccell> vl,
    ffi.Pointer<ffi.Int8> gclusters,
  ) {
    return _nccells_load_box(
      n,
      styles,
      channels,
      ul,
      ur,
      ll,
      lr,
      hl,
      vl,
      gclusters,
    );
  }

  late final _nccells_load_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Uint16,
              ffi.Uint64,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<ffi.Int8>)>>('nccells_load_box');
  late final _nccells_load_box = _nccells_load_boxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
          ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<ffi.Int8>)>();

  int nccells_rounded_box(
    ffi.Pointer<ncplane> n,
    int attr,
    int channels,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hl,
    ffi.Pointer<nccell> vl,
  ) {
    return _nccells_rounded_box(
      n,
      attr,
      channels,
      ul,
      ur,
      ll,
      lr,
      hl,
      vl,
    );
  }

  late final _nccells_rounded_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Uint16,
              ffi.Uint64,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>)>>('nccells_rounded_box');
  late final _nccells_rounded_box = _nccells_rounded_boxPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
          ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>)>();

  int ncchannel_set(
    ffi.Pointer<ffi.Uint32> channel,
    int rgb,
  ) {
    return _ncchannel_set(
      channel,
      rgb,
    );
  }

  late final _ncchannel_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('ncchannel_set');
  late final _ncchannel_set = _ncchannel_setPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int ncchannel_set_alpha(
    ffi.Pointer<ffi.Uint32> channel,
    int alpha,
  ) {
    return _ncchannel_set_alpha(
      channel,
      alpha,
    );
  }

  late final _ncchannel_set_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('ncchannel_set_alpha');
  late final _ncchannel_set_alpha = _ncchannel_set_alphaPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int ncchannel_set_palindex(
    ffi.Pointer<ffi.Uint32> channel,
    int idx,
  ) {
    return _ncchannel_set_palindex(
      channel,
      idx,
    );
  }

  late final _ncchannel_set_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('ncchannel_set_palindex');
  late final _ncchannel_set_palindex =
      _ncchannel_set_palindexPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int ncchannel_set_rgb8(
    ffi.Pointer<ffi.Uint32> channel,
    int r,
    int g,
    int b,
  ) {
    return _ncchannel_set_rgb8(
      channel,
      r,
      g,
      b,
    );
  }

  late final _ncchannel_set_rgb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'ncchannel_set_rgb8');
  late final _ncchannel_set_rgb8 =
      _ncchannel_set_rgb8Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int, int, int)>();

  int ncchannels_set_bg_alpha(
    ffi.Pointer<ffi.Uint64> channels,
    int alpha,
  ) {
    return _ncchannels_set_bg_alpha(
      channels,
      alpha,
    );
  }

  late final _ncchannels_set_bg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32)>>('ncchannels_set_bg_alpha');
  late final _ncchannels_set_bg_alpha =
      _ncchannels_set_bg_alphaPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_bg_palindex(
    ffi.Pointer<ffi.Uint64> channels,
    int idx,
  ) {
    return _ncchannels_set_bg_palindex(
      channels,
      idx,
    );
  }

  late final _ncchannels_set_bg_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32)>>(
          'ncchannels_set_bg_palindex');
  late final _ncchannels_set_bg_palindex =
      _ncchannels_set_bg_palindexPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_bg_rgb(
    ffi.Pointer<ffi.Uint64> channels,
    int rgb,
  ) {
    return _ncchannels_set_bg_rgb(
      channels,
      rgb,
    );
  }

  late final _ncchannels_set_bg_rgbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32)>>('ncchannels_set_bg_rgb');
  late final _ncchannels_set_bg_rgb =
      _ncchannels_set_bg_rgbPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_bg_rgb8(
    ffi.Pointer<ffi.Uint64> channels,
    int r,
    int g,
    int b,
  ) {
    return _ncchannels_set_bg_rgb8(
      channels,
      r,
      g,
      b,
    );
  }

  late final _ncchannels_set_bg_rgb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'ncchannels_set_bg_rgb8');
  late final _ncchannels_set_bg_rgb8 =
      _ncchannels_set_bg_rgb8Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int, int, int)>();

  int ncchannels_set_fg_alpha(
    ffi.Pointer<ffi.Uint64> channels,
    int alpha,
  ) {
    return _ncchannels_set_fg_alpha(
      channels,
      alpha,
    );
  }

  late final _ncchannels_set_fg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32)>>('ncchannels_set_fg_alpha');
  late final _ncchannels_set_fg_alpha =
      _ncchannels_set_fg_alphaPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_fg_palindex(
    ffi.Pointer<ffi.Uint64> channels,
    int idx,
  ) {
    return _ncchannels_set_fg_palindex(
      channels,
      idx,
    );
  }

  late final _ncchannels_set_fg_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32)>>(
          'ncchannels_set_fg_palindex');
  late final _ncchannels_set_fg_palindex =
      _ncchannels_set_fg_palindexPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_fg_rgb(
    ffi.Pointer<ffi.Uint64> channels,
    int rgb,
  ) {
    return _ncchannels_set_fg_rgb(
      channels,
      rgb,
    );
  }

  late final _ncchannels_set_fg_rgbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32)>>('ncchannels_set_fg_rgb');
  late final _ncchannels_set_fg_rgb =
      _ncchannels_set_fg_rgbPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_fg_rgb8(
    ffi.Pointer<ffi.Uint64> channels,
    int r,
    int g,
    int b,
  ) {
    return _ncchannels_set_fg_rgb8(
      channels,
      r,
      g,
      b,
    );
  }

  late final _ncchannels_set_fg_rgb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'ncchannels_set_fg_rgb8');
  late final _ncchannels_set_fg_rgb8 =
      _ncchannels_set_fg_rgb8Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int, int, int)>();

  int ncdirect_ascii_box(
    ffi.Pointer<ncdirect> n,
    int ul,
    int ur,
    int ll,
    int lr,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncdirect_ascii_box(
      n,
      ul,
      ur,
      ll,
      lr,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncdirect_ascii_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Uint64, ffi.Uint64, ffi.Uint64, ffi.Uint64, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('ncdirect_ascii_box');
  late final _ncdirect_ascii_box =
      _ncdirect_ascii_boxPtr.asFunction<int Function(ffi.Pointer<ncdirect>, int, int, int, int, int, int, int)>();

  int ncdirect_heavy_box(
    ffi.Pointer<ncdirect> n,
    int ul,
    int ur,
    int ll,
    int lr,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncdirect_heavy_box(
      n,
      ul,
      ur,
      ll,
      lr,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncdirect_heavy_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Uint64, ffi.Uint64, ffi.Uint64, ffi.Uint64, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('ncdirect_heavy_box');
  late final _ncdirect_heavy_box =
      _ncdirect_heavy_boxPtr.asFunction<int Function(ffi.Pointer<ncdirect>, int, int, int, int, int, int, int)>();

  int ncdirect_light_box(
    ffi.Pointer<ncdirect> n,
    int ul,
    int ur,
    int ll,
    int lr,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncdirect_light_box(
      n,
      ul,
      ur,
      ll,
      lr,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncdirect_light_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Uint64, ffi.Uint64, ffi.Uint64, ffi.Uint64, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('ncdirect_light_box');
  late final _ncdirect_light_box =
      _ncdirect_light_boxPtr.asFunction<int Function(ffi.Pointer<ncdirect>, int, int, int, int, int, int, int)>();

  int ncdirect_set_bg_rgb8(
    ffi.Pointer<ncdirect> nc,
    int r,
    int g,
    int b,
  ) {
    return _ncdirect_set_bg_rgb8(
      nc,
      r,
      g,
      b,
    );
  }

  late final _ncdirect_set_bg_rgb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'ncdirect_set_bg_rgb8');
  late final _ncdirect_set_bg_rgb8 =
      _ncdirect_set_bg_rgb8Ptr.asFunction<int Function(ffi.Pointer<ncdirect>, int, int, int)>();

  int ncdirect_set_fg_rgb8(
    ffi.Pointer<ncdirect> nc,
    int r,
    int g,
    int b,
  ) {
    return _ncdirect_set_fg_rgb8(
      nc,
      r,
      g,
      b,
    );
  }

  late final _ncdirect_set_fg_rgb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncdirect>, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'ncdirect_set_fg_rgb8');
  late final _ncdirect_set_fg_rgb8 =
      _ncdirect_set_fg_rgb8Ptr.asFunction<int Function(ffi.Pointer<ncdirect>, int, int, int)>();

  int ncpalette_get(
    ffi.Pointer<ncpalette> p,
    int idx,
    ffi.Pointer<ffi.Uint32> palent,
  ) {
    return _ncpalette_get(
      p,
      idx,
      palent,
    );
  }

  late final _ncpalette_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncpalette>, ffi.Int32, ffi.Pointer<ffi.Uint32>)>>(
          'ncpalette_get');
  late final _ncpalette_get =
      _ncpalette_getPtr.asFunction<int Function(ffi.Pointer<ncpalette>, int, ffi.Pointer<ffi.Uint32>)>();

  int ncpalette_get_rgb8(
    ffi.Pointer<ncpalette> p,
    int idx,
    ffi.Pointer<ffi.Uint32> r,
    ffi.Pointer<ffi.Uint32> g,
    ffi.Pointer<ffi.Uint32> b,
  ) {
    return _ncpalette_get_rgb8(
      p,
      idx,
      r,
      g,
      b,
    );
  }

  late final _ncpalette_get_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncpalette>, ffi.Int32, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncpalette_get_rgb8');
  late final _ncpalette_get_rgb8 = _ncpalette_get_rgb8Ptr.asFunction<
      int Function(
          ffi.Pointer<ncpalette>, int, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int ncpalette_set(
    ffi.Pointer<ncpalette> p,
    int idx,
    int rgb,
  ) {
    return _ncpalette_set(
      p,
      idx,
      rgb,
    );
  }

  late final _ncpalette_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncpalette>, ffi.Int32, ffi.Uint32)>>('ncpalette_set');
  late final _ncpalette_set = _ncpalette_setPtr.asFunction<int Function(ffi.Pointer<ncpalette>, int, int)>();

  int ncpalette_set_rgb8(
    ffi.Pointer<ncpalette> p,
    int idx,
    int r,
    int g,
    int b,
  ) {
    return _ncpalette_set_rgb8(
      p,
      idx,
      r,
      g,
      b,
    );
  }

  late final _ncpalette_set_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncpalette>, ffi.Int32, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>('ncpalette_set_rgb8');
  late final _ncpalette_set_rgb8 =
      _ncpalette_set_rgb8Ptr.asFunction<int Function(ffi.Pointer<ncpalette>, int, int, int, int)>();

  int ncpixel_set_a(
    ffi.Pointer<ffi.Uint32> pixel,
    int a,
  ) {
    return _ncpixel_set_a(
      pixel,
      a,
    );
  }

  late final _ncpixel_set_aPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('ncpixel_set_a');
  late final _ncpixel_set_a = _ncpixel_set_aPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int ncpixel_set_b(
    ffi.Pointer<ffi.Uint32> pixel,
    int b,
  ) {
    return _ncpixel_set_b(
      pixel,
      b,
    );
  }

  late final _ncpixel_set_bPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('ncpixel_set_b');
  late final _ncpixel_set_b = _ncpixel_set_bPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int ncpixel_set_g(
    ffi.Pointer<ffi.Uint32> pixel,
    int g,
  ) {
    return _ncpixel_set_g(
      pixel,
      g,
    );
  }

  late final _ncpixel_set_gPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('ncpixel_set_g');
  late final _ncpixel_set_g = _ncpixel_set_gPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int ncpixel_set_r(
    ffi.Pointer<ffi.Uint32> pixel,
    int r,
  ) {
    return _ncpixel_set_r(
      pixel,
      r,
    );
  }

  late final _ncpixel_set_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('ncpixel_set_r');
  late final _ncpixel_set_r = _ncpixel_set_rPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int ncpixel_set_rgb8(
    ffi.Pointer<ffi.Uint32> pixel,
    int r,
    int g,
    int b,
  ) {
    return _ncpixel_set_rgb8(
      pixel,
      r,
      g,
      b,
    );
  }

  late final _ncpixel_set_rgb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'ncpixel_set_rgb8');
  late final _ncpixel_set_rgb8 =
      _ncpixel_set_rgb8Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint32>, int, int, int)>();

  int ncplane_ascii_box(
    ffi.Pointer<ncplane> n,
    int styles,
    int channels,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncplane_ascii_box(
      n,
      styles,
      channels,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncplane_ascii_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Uint16, ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>('ncplane_ascii_box');
  late final _ncplane_ascii_box =
      _ncplane_ascii_boxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int, int, int)>();

  int ncplane_box_sized(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hline,
    ffi.Pointer<nccell> vline,
    int ystop,
    int xstop,
    int ctlword,
  ) {
    return _ncplane_box_sized(
      n,
      ul,
      ur,
      ll,
      lr,
      hline,
      vline,
      ystop,
      xstop,
      ctlword,
    );
  }

  late final _ncplane_box_sizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Pointer<nccell>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ncplane_box_sized');
  late final _ncplane_box_sized = _ncplane_box_sizedPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
          ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>, int, int, int)>();

  int ncplane_descendant_p(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ncplane> ancestor,
  ) {
    return _ncplane_descendant_p(
      n,
      ancestor,
    );
  }

  late final _ncplane_descendant_pPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>>(
          'ncplane_descendant_p');
  late final _ncplane_descendant_p =
      _ncplane_descendant_pPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ncplane>)>();

  int ncplane_double_box(
    ffi.Pointer<ncplane> n,
    int styles,
    int channels,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncplane_double_box(
      n,
      styles,
      channels,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncplane_double_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Uint16, ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>('ncplane_double_box');
  late final _ncplane_double_box =
      _ncplane_double_boxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int, int, int)>();

  int ncplane_double_box_sized(
    ffi.Pointer<ncplane> n,
    int styles,
    int channels,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncplane_double_box_sized(
      n,
      styles,
      channels,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncplane_double_box_sizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Uint16, ffi.Uint64, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('ncplane_double_box_sized');
  late final _ncplane_double_box_sized =
      _ncplane_double_box_sizedPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int, int, int)>();

  int ncplane_halign(
    ffi.Pointer<ncplane> n,
    int align,
    int c,
  ) {
    return _ncplane_halign(
      n,
      align,
      c,
    );
  }

  late final _ncplane_halignPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32)>>('ncplane_halign');
  late final _ncplane_halign = _ncplane_halignPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int)>();

  int ncplane_hline(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    int len,
  ) {
    return _ncplane_hline(
      n,
      c,
      len,
    );
  }

  late final _ncplane_hlinePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Uint32)>>(
          'ncplane_hline');
  late final _ncplane_hline =
      _ncplane_hlinePtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, int)>();

  int ncplane_move_rel(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
  ) {
    return _ncplane_move_rel(
      n,
      y,
      x,
    );
  }

  late final _ncplane_move_relPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32)>>('ncplane_move_rel');
  late final _ncplane_move_rel = _ncplane_move_relPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int)>();

  int ncplane_perimeter(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> ul,
    ffi.Pointer<nccell> ur,
    ffi.Pointer<nccell> ll,
    ffi.Pointer<nccell> lr,
    ffi.Pointer<nccell> hline,
    ffi.Pointer<nccell> vline,
    int ctlword,
  ) {
    return _ncplane_perimeter(
      n,
      ul,
      ur,
      ll,
      lr,
      hline,
      vline,
      ctlword,
    );
  }

  late final _ncplane_perimeterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
              ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Uint32)>>('ncplane_perimeter');
  late final _ncplane_perimeter = _ncplane_perimeterPtr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>,
          ffi.Pointer<nccell>, ffi.Pointer<nccell>, ffi.Pointer<nccell>, int)>();

  int ncplane_perimeter_double(
    ffi.Pointer<ncplane> n,
    int stylemask,
    int channels,
    int ctlword,
  ) {
    return _ncplane_perimeter_double(
      n,
      stylemask,
      channels,
      ctlword,
    );
  }

  late final _ncplane_perimeter_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Uint16, ffi.Uint64, ffi.Uint32)>>(
          'ncplane_perimeter_double');
  late final _ncplane_perimeter_double =
      _ncplane_perimeter_doublePtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int)>();

  int ncplane_perimeter_rounded(
    ffi.Pointer<ncplane> n,
    int stylemask,
    int channels,
    int ctlword,
  ) {
    return _ncplane_perimeter_rounded(
      n,
      stylemask,
      channels,
      ctlword,
    );
  }

  late final _ncplane_perimeter_roundedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Uint16, ffi.Uint64, ffi.Uint32)>>(
          'ncplane_perimeter_rounded');
  late final _ncplane_perimeter_rounded =
      _ncplane_perimeter_roundedPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int)>();

  int ncplane_printf(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _ncplane_printf(
      n,
      format,
    );
  }

  late final _ncplane_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>>('ncplane_printf');
  late final _ncplane_printf =
      _ncplane_printfPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>();

  int ncplane_printf_aligned(
    ffi.Pointer<ncplane> n,
    int y,
    int align,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _ncplane_printf_aligned(
      n,
      y,
      align,
      format,
    );
  }

  late final _ncplane_printf_alignedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>(
      'ncplane_printf_aligned');
  late final _ncplane_printf_aligned =
      _ncplane_printf_alignedPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<ffi.Int8>)>();

  int ncplane_printf_stained(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _ncplane_printf_stained(
      n,
      format,
    );
  }

  late final _ncplane_printf_stainedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>>(
          'ncplane_printf_stained');
  late final _ncplane_printf_stained =
      _ncplane_printf_stainedPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>();

  int ncplane_printf_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _ncplane_printf_yx(
      n,
      y,
      x,
      format,
    );
  }

  late final _ncplane_printf_yxPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>(
      'ncplane_printf_yx');
  late final _ncplane_printf_yx =
      _ncplane_printf_yxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<ffi.Int8>)>();

  int ncplane_putc(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
  ) {
    return _ncplane_putc(
      n,
      c,
    );
  }

  late final _ncplane_putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>>('ncplane_putc');
  late final _ncplane_putc = _ncplane_putcPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>)>();

  int ncplane_putchar(
    ffi.Pointer<ncplane> n,
    int c,
  ) {
    return _ncplane_putchar(
      n,
      c,
    );
  }

  late final _ncplane_putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int8)>>('ncplane_putchar');
  late final _ncplane_putchar = _ncplane_putcharPtr.asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_putchar_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    int c,
  ) {
    return _ncplane_putchar_yx(
      n,
      y,
      x,
      c,
    );
  }

  late final _ncplane_putchar_yxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Int8)>>(
          'ncplane_putchar_yx');
  late final _ncplane_putchar_yx =
      _ncplane_putchar_yxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int)>();

  int ncplane_putegc(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> gclust,
    ffi.Pointer<size_t> sbytes,
  ) {
    return _ncplane_putegc(
      n,
      gclust,
      sbytes,
    );
  }

  late final _ncplane_putegcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>, ffi.Pointer<size_t>)>>(
          'ncplane_putegc');
  late final _ncplane_putegc =
      _ncplane_putegcPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>, ffi.Pointer<size_t>)>();

  int ncplane_putnstr(
    ffi.Pointer<ncplane> n,
    int s,
    ffi.Pointer<ffi.Int8> gclustarr,
  ) {
    return _ncplane_putnstr(
      n,
      s,
      gclustarr,
    );
  }

  late final _ncplane_putnstrPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, size_t, ffi.Pointer<ffi.Int8>)>>(
          'ncplane_putnstr');
  late final _ncplane_putnstr =
      _ncplane_putnstrPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, ffi.Pointer<ffi.Int8>)>();

  int ncplane_putnstr_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    int s,
    ffi.Pointer<ffi.Int8> gclusters,
  ) {
    return _ncplane_putnstr_yx(
      n,
      y,
      x,
      s,
      gclusters,
    );
  }

  late final _ncplane_putnstr_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, size_t, ffi.Pointer<ffi.Int8>)>>('ncplane_putnstr_yx');
  late final _ncplane_putnstr_yx =
      _ncplane_putnstr_yxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int, ffi.Pointer<ffi.Int8>)>();

  int ncplane_putstr(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> gclustarr,
  ) {
    return _ncplane_putstr(
      n,
      gclustarr,
    );
  }

  late final _ncplane_putstrPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>>('ncplane_putstr');
  late final _ncplane_putstr =
      _ncplane_putstrPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>();

  int ncplane_putstr_aligned(
    ffi.Pointer<ncplane> n,
    int y,
    int align,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _ncplane_putstr_aligned(
      n,
      y,
      align,
      s,
    );
  }

  late final _ncplane_putstr_alignedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>(
      'ncplane_putstr_aligned');
  late final _ncplane_putstr_aligned =
      _ncplane_putstr_alignedPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<ffi.Int8>)>();

  int ncplane_putstr_stained(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> gclusters,
  ) {
    return _ncplane_putstr_stained(
      n,
      gclusters,
    );
  }

  late final _ncplane_putstr_stainedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>>(
          'ncplane_putstr_stained');
  late final _ncplane_putstr_stained =
      _ncplane_putstr_stainedPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>)>();

  int ncplane_putstr_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<ffi.Int8> gclusters,
  ) {
    return _ncplane_putstr_yx(
      n,
      y,
      x,
      gclusters,
    );
  }

  late final _ncplane_putstr_yxPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>(
      'ncplane_putstr_yx');
  late final _ncplane_putstr_yx =
      _ncplane_putstr_yxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<ffi.Int8>)>();

  int ncplane_pututf32_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    int u,
  ) {
    return _ncplane_pututf32_yx(
      n,
      y,
      x,
      u,
    );
  }

  late final _ncplane_pututf32_yxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Uint32)>>(
          'ncplane_pututf32_yx');
  late final _ncplane_pututf32_yx =
      _ncplane_pututf32_yxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int)>();

  int ncplane_putwc(
    ffi.Pointer<ncplane> n,
    int w,
  ) {
    return _ncplane_putwc(
      n,
      w,
    );
  }

  late final _ncplane_putwcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, wchar_t)>>('ncplane_putwc');
  late final _ncplane_putwc = _ncplane_putwcPtr.asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_putwc_stained(
    ffi.Pointer<ncplane> n,
    int w,
  ) {
    return _ncplane_putwc_stained(
      n,
      w,
    );
  }

  late final _ncplane_putwc_stainedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, wchar_t)>>('ncplane_putwc_stained');
  late final _ncplane_putwc_stained = _ncplane_putwc_stainedPtr.asFunction<int Function(ffi.Pointer<ncplane>, int)>();

  int ncplane_putwc_utf32(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<wchar_t> w,
    ffi.Pointer<ffi.Uint32> wchars,
  ) {
    return _ncplane_putwc_utf32(
      n,
      w,
      wchars,
    );
  }

  late final _ncplane_putwc_utf32Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Uint32>)>>(
      'ncplane_putwc_utf32');
  late final _ncplane_putwc_utf32 = _ncplane_putwc_utf32Ptr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Uint32>)>();

  int ncplane_putwc_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    int w,
  ) {
    return _ncplane_putwc_yx(
      n,
      y,
      x,
      w,
    );
  }

  late final _ncplane_putwc_yxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, wchar_t)>>(
          'ncplane_putwc_yx');
  late final _ncplane_putwc_yx = _ncplane_putwc_yxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int)>();

  int ncplane_putwegc(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<wchar_t> gclust,
    ffi.Pointer<size_t> sbytes,
  ) {
    return _ncplane_putwegc(
      n,
      gclust,
      sbytes,
    );
  }

  late final _ncplane_putwegcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>, ffi.Pointer<size_t>)>>(
          'ncplane_putwegc');
  late final _ncplane_putwegc =
      _ncplane_putwegcPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>, ffi.Pointer<size_t>)>();

  int ncplane_putwegc_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<wchar_t> gclust,
    ffi.Pointer<size_t> sbytes,
  ) {
    return _ncplane_putwegc_yx(
      n,
      y,
      x,
      gclust,
      sbytes,
    );
  }

  late final _ncplane_putwegc_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Pointer<wchar_t>,
              ffi.Pointer<size_t>)>>('ncplane_putwegc_yx');
  late final _ncplane_putwegc_yx = _ncplane_putwegc_yxPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<wchar_t>, ffi.Pointer<size_t>)>();

  int ncplane_putwstr(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<wchar_t> gclustarr,
  ) {
    return _ncplane_putwstr(
      n,
      gclustarr,
    );
  }

  late final _ncplane_putwstrPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>)>>('ncplane_putwstr');
  late final _ncplane_putwstr =
      _ncplane_putwstrPtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<wchar_t>)>();

  int ncplane_putwstr_aligned(
    ffi.Pointer<ncplane> n,
    int y,
    int align,
    ffi.Pointer<wchar_t> gclustarr,
  ) {
    return _ncplane_putwstr_aligned(
      n,
      y,
      align,
      gclustarr,
    );
  }

  late final _ncplane_putwstr_alignedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Pointer<wchar_t>)>>(
          'ncplane_putwstr_aligned');
  late final _ncplane_putwstr_aligned =
      _ncplane_putwstr_alignedPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<wchar_t>)>();

  int ncplane_putwstr_yx(
    ffi.Pointer<ncplane> n,
    int y,
    int x,
    ffi.Pointer<wchar_t> gclustarr,
  ) {
    return _ncplane_putwstr_yx(
      n,
      y,
      x,
      gclustarr,
    );
  }

  late final _ncplane_putwstr_yxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32, ffi.Pointer<wchar_t>)>>(
          'ncplane_putwstr_yx');
  late final _ncplane_putwstr_yx =
      _ncplane_putwstr_yxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, ffi.Pointer<wchar_t>)>();

  int ncplane_resize_simple(
    ffi.Pointer<ncplane> n,
    int ylen,
    int xlen,
  ) {
    return _ncplane_resize_simple(
      n,
      ylen,
      xlen,
    );
  }

  late final _ncplane_resize_simplePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Uint32, ffi.Uint32)>>(
          'ncplane_resize_simple');
  late final _ncplane_resize_simple =
      _ncplane_resize_simplePtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int)>();

  int ncplane_rounded_box(
    ffi.Pointer<ncplane> n,
    int styles,
    int channels,
    int ystop,
    int xstop,
    int ctlword,
  ) {
    return _ncplane_rounded_box(
      n,
      styles,
      channels,
      ystop,
      xstop,
      ctlword,
    );
  }

  late final _ncplane_rounded_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Uint16, ffi.Uint64, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('ncplane_rounded_box');
  late final _ncplane_rounded_box =
      _ncplane_rounded_boxPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int, int, int)>();

  int ncplane_rounded_box_sized(
    ffi.Pointer<ncplane> n,
    int styles,
    int channels,
    int ylen,
    int xlen,
    int ctlword,
  ) {
    return _ncplane_rounded_box_sized(
      n,
      styles,
      channels,
      ylen,
      xlen,
      ctlword,
    );
  }

  late final _ncplane_rounded_box_sizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Uint16, ffi.Uint64, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('ncplane_rounded_box_sized');
  late final _ncplane_rounded_box_sized =
      _ncplane_rounded_box_sizedPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int, int, int, int)>();

  int ncplane_valign(
    ffi.Pointer<ncplane> n,
    int align,
    int r,
  ) {
    return _ncplane_valign(
      n,
      align,
      r,
    );
  }

  late final _ncplane_valignPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Int32, ffi.Int32)>>('ncplane_valign');
  late final _ncplane_valign = _ncplane_valignPtr.asFunction<int Function(ffi.Pointer<ncplane>, int, int)>();

  int ncplane_vline(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<nccell> c,
    int len,
  ) {
    return _ncplane_vline(
      n,
      c,
      len,
    );
  }

  late final _ncplane_vlinePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, ffi.Uint32)>>(
          'ncplane_vline');
  late final _ncplane_vline =
      _ncplane_vlinePtr.asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<nccell>, int)>();

  int ncplane_vprintf(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<__va_list_tag> ap,
  ) {
    return _ncplane_vprintf(
      n,
      format,
      ap,
    );
  }

  late final _ncplane_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('ncplane_vprintf');
  late final _ncplane_vprintf = _ncplane_vprintfPtr
      .asFunction<int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int notcurses_align(
    int availu,
    int align,
    int u,
  ) {
    return _notcurses_align(
      availu,
      align,
      u,
    );
  }

  late final _notcurses_alignPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>('notcurses_align');
  late final _notcurses_align = _notcurses_alignPtr.asFunction<int Function(int, int, int)>();

  int notcurses_mice_disable(
    ffi.Pointer<notcurses> n,
  ) {
    return _notcurses_mice_disable(
      n,
    );
  }

  late final _notcurses_mice_disablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>('notcurses_mice_disable');
  late final _notcurses_mice_disable = _notcurses_mice_disablePtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  int notcurses_render(
    ffi.Pointer<notcurses> nc,
  ) {
    return _notcurses_render(
      nc,
    );
  }

  late final _notcurses_renderPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<notcurses>)>>('notcurses_render');
  late final _notcurses_render = _notcurses_renderPtr.asFunction<int Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<ncplane> ncvisualplane_create(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ncplane_options> opts,
    ffi.Pointer<ncvisual> ncv,
    ffi.Pointer<ncvisual_options> vopts,
  ) {
    return _ncvisualplane_create(
      nc,
      opts,
      ncv,
      vopts,
    );
  }

  late final _ncvisualplane_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>, ffi.Pointer<ncplane_options>, ffi.Pointer<ncvisual>,
              ffi.Pointer<ncvisual_options>)>>('ncvisualplane_create');
  late final _ncvisualplane_create = _ncvisualplane_createPtr.asFunction<
      ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>, ffi.Pointer<ncplane_options>, ffi.Pointer<ncvisual>,
          ffi.Pointer<ncvisual_options>)>();

  ffi.Pointer<ncplane> notcurses_bottom(
    ffi.Pointer<notcurses> n,
  ) {
    return _notcurses_bottom(
      n,
    );
  }

  late final _notcurses_bottomPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>)>>('notcurses_bottom');
  late final _notcurses_bottom =
      _notcurses_bottomPtr.asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>)>();

  ffi.Pointer<ncplane> notcurses_stddim_yx(
    ffi.Pointer<notcurses> nc,
    ffi.Pointer<ffi.Uint32> y,
    ffi.Pointer<ffi.Uint32> x,
  ) {
    return _notcurses_stddim_yx(
      nc,
      y,
      x,
    );
  }

  late final _notcurses_stddim_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ncplane> Function(
              ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>>('notcurses_stddim_yx');
  late final _notcurses_stddim_yx = _notcurses_stddim_yxPtr.asFunction<
      ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<ncplane> notcurses_top(
    ffi.Pointer<notcurses> n,
  ) {
    return _notcurses_top(
      n,
    );
  }

  late final _notcurses_topPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>)>>('notcurses_top');
  late final _notcurses_top = _notcurses_topPtr.asFunction<ffi.Pointer<ncplane> Function(ffi.Pointer<notcurses>)>();

  int nccell_styles(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_styles(
      c,
    );
  }

  late final _nccell_stylesPtr = _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<nccell>)>>('nccell_styles');
  late final _nccell_styles = _nccell_stylesPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_bchannel(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_bchannel(
      cl,
    );
  }

  late final _nccell_bchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_bchannel');
  late final _nccell_bchannel = _nccell_bchannelPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_bg_alpha(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_bg_alpha(
      cl,
    );
  }

  late final _nccell_bg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_bg_alpha');
  late final _nccell_bg_alpha = _nccell_bg_alphaPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_bg_palindex(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_bg_palindex(
      cl,
    );
  }

  late final _nccell_bg_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_bg_palindex');
  late final _nccell_bg_palindex = _nccell_bg_palindexPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_bg_rgb(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_bg_rgb(
      cl,
    );
  }

  late final _nccell_bg_rgbPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_bg_rgb');
  late final _nccell_bg_rgb = _nccell_bg_rgbPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_bg_rgb8(
    ffi.Pointer<nccell> cl,
    ffi.Pointer<ffi.Uint32> r,
    ffi.Pointer<ffi.Uint32> g,
    ffi.Pointer<ffi.Uint32> b,
  ) {
    return _nccell_bg_rgb8(
      cl,
      r,
      g,
      b,
    );
  }

  late final _nccell_bg_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<nccell>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('nccell_bg_rgb8');
  late final _nccell_bg_rgb8 = _nccell_bg_rgb8Ptr.asFunction<
      int Function(ffi.Pointer<nccell>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int nccell_fchannel(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_fchannel(
      cl,
    );
  }

  late final _nccell_fchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_fchannel');
  late final _nccell_fchannel = _nccell_fchannelPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_fg_alpha(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_fg_alpha(
      cl,
    );
  }

  late final _nccell_fg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_fg_alpha');
  late final _nccell_fg_alpha = _nccell_fg_alphaPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_fg_palindex(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_fg_palindex(
      cl,
    );
  }

  late final _nccell_fg_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_fg_palindex');
  late final _nccell_fg_palindex = _nccell_fg_palindexPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_fg_rgb(
    ffi.Pointer<nccell> cl,
  ) {
    return _nccell_fg_rgb(
      cl,
    );
  }

  late final _nccell_fg_rgbPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_fg_rgb');
  late final _nccell_fg_rgb = _nccell_fg_rgbPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_fg_rgb8(
    ffi.Pointer<nccell> cl,
    ffi.Pointer<ffi.Uint32> r,
    ffi.Pointer<ffi.Uint32> g,
    ffi.Pointer<ffi.Uint32> b,
  ) {
    return _nccell_fg_rgb8(
      cl,
      r,
      g,
      b,
    );
  }

  late final _nccell_fg_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<nccell>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('nccell_fg_rgb8');
  late final _nccell_fg_rgb8 = _nccell_fg_rgb8Ptr.asFunction<
      int Function(ffi.Pointer<nccell>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int ncchannel_rgb(
    int channel,
  ) {
    return _ncchannel_rgb(
      channel,
    );
  }

  late final _ncchannel_rgbPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncchannel_rgb');
  late final _ncchannel_rgb = _ncchannel_rgbPtr.asFunction<int Function(int)>();

  int ncchannel_rgb8(
    int channel,
    ffi.Pointer<ffi.Uint32> r,
    ffi.Pointer<ffi.Uint32> g,
    ffi.Pointer<ffi.Uint32> b,
  ) {
    return _ncchannel_rgb8(
      channel,
      r,
      g,
      b,
    );
  }

  late final _ncchannel_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Uint32, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncchannel_rgb8');
  late final _ncchannel_rgb8 = _ncchannel_rgb8Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int ncchannel_set_default(
    ffi.Pointer<ffi.Uint32> channel,
  ) {
    return _ncchannel_set_default(
      channel,
    );
  }

  late final _ncchannel_set_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Uint32>)>>('ncchannel_set_default');
  late final _ncchannel_set_default = _ncchannel_set_defaultPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>)>();

  int ncchannels_bchannel(
    int channels,
  ) {
    return _ncchannels_bchannel(
      channels,
    );
  }

  late final _ncchannels_bchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>('ncchannels_bchannel');
  late final _ncchannels_bchannel = _ncchannels_bchannelPtr.asFunction<int Function(int)>();

  int ncchannels_bg_rgb(
    int channels,
  ) {
    return _ncchannels_bg_rgb(
      channels,
    );
  }

  late final _ncchannels_bg_rgbPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>('ncchannels_bg_rgb');
  late final _ncchannels_bg_rgb = _ncchannels_bg_rgbPtr.asFunction<int Function(int)>();

  int ncchannels_bg_rgb8(
    int channels,
    ffi.Pointer<ffi.Uint32> r,
    ffi.Pointer<ffi.Uint32> g,
    ffi.Pointer<ffi.Uint32> b,
  ) {
    return _ncchannels_bg_rgb8(
      channels,
      r,
      g,
      b,
    );
  }

  late final _ncchannels_bg_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncchannels_bg_rgb8');
  late final _ncchannels_bg_rgb8 = _ncchannels_bg_rgb8Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int ncchannels_fchannel(
    int channels,
  ) {
    return _ncchannels_fchannel(
      channels,
    );
  }

  late final _ncchannels_fchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>('ncchannels_fchannel');
  late final _ncchannels_fchannel = _ncchannels_fchannelPtr.asFunction<int Function(int)>();

  int ncchannels_fg_rgb(
    int channels,
  ) {
    return _ncchannels_fg_rgb(
      channels,
    );
  }

  late final _ncchannels_fg_rgbPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>('ncchannels_fg_rgb');
  late final _ncchannels_fg_rgb = _ncchannels_fg_rgbPtr.asFunction<int Function(int)>();

  int ncchannels_fg_rgb8(
    int channels,
    ffi.Pointer<ffi.Uint32> r,
    ffi.Pointer<ffi.Uint32> g,
    ffi.Pointer<ffi.Uint32> b,
  ) {
    return _ncchannels_fg_rgb8(
      channels,
      r,
      g,
      b,
    );
  }

  late final _ncchannels_fg_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncchannels_fg_rgb8');
  late final _ncchannels_fg_rgb8 = _ncchannels_fg_rgb8Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int ncdirect_get_blocking(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ncinput> ni,
  ) {
    return _ncdirect_get_blocking(
      n,
      ni,
    );
  }

  late final _ncdirect_get_blockingPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncdirect>, ffi.Pointer<ncinput>)>>(
          'ncdirect_get_blocking');
  late final _ncdirect_get_blocking =
      _ncdirect_get_blockingPtr.asFunction<int Function(ffi.Pointer<ncdirect>, ffi.Pointer<ncinput>)>();

  int ncdirect_get_nblock(
    ffi.Pointer<ncdirect> n,
    ffi.Pointer<ncinput> ni,
  ) {
    return _ncdirect_get_nblock(
      n,
      ni,
    );
  }

  late final _ncdirect_get_nblockPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncdirect>, ffi.Pointer<ncinput>)>>(
          'ncdirect_get_nblock');
  late final _ncdirect_get_nblock =
      _ncdirect_get_nblockPtr.asFunction<int Function(ffi.Pointer<ncdirect>, ffi.Pointer<ncinput>)>();

  int ncpixel(
    int r,
    int g,
    int b,
  ) {
    return _ncpixel(
      r,
      g,
      b,
    );
  }

  late final _ncpixelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32, ffi.Uint32, ffi.Uint32)>>('ncpixel');
  late final _ncpixel = _ncpixelPtr.asFunction<int Function(int, int, int)>();

  int ncplane_bchannel(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_bchannel(
      n,
    );
  }

  late final _ncplane_bchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_bchannel');
  late final _ncplane_bchannel = _ncplane_bchannelPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_bg_alpha(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_bg_alpha(
      n,
    );
  }

  late final _ncplane_bg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_bg_alpha');
  late final _ncplane_bg_alpha = _ncplane_bg_alphaPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_bg_rgb(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_bg_rgb(
      n,
    );
  }

  late final _ncplane_bg_rgbPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_bg_rgb');
  late final _ncplane_bg_rgb = _ncplane_bg_rgbPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_bg_rgb8(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Uint32> r,
    ffi.Pointer<ffi.Uint32> g,
    ffi.Pointer<ffi.Uint32> b,
  ) {
    return _ncplane_bg_rgb8(
      n,
      r,
      g,
      b,
    );
  }

  late final _ncplane_bg_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncplane_bg_rgb8');
  late final _ncplane_bg_rgb8 = _ncplane_bg_rgb8Ptr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int ncplane_fchannel(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_fchannel(
      n,
    );
  }

  late final _ncplane_fchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_fchannel');
  late final _ncplane_fchannel = _ncplane_fchannelPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_fg_alpha(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_fg_alpha(
      n,
    );
  }

  late final _ncplane_fg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_fg_alpha');
  late final _ncplane_fg_alpha = _ncplane_fg_alphaPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_fg_rgb(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_fg_rgb(
      n,
    );
  }

  late final _ncplane_fg_rgbPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_fg_rgb');
  late final _ncplane_fg_rgb = _ncplane_fg_rgbPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_fg_rgb8(
    ffi.Pointer<ncplane> n,
    ffi.Pointer<ffi.Uint32> r,
    ffi.Pointer<ffi.Uint32> g,
    ffi.Pointer<ffi.Uint32> b,
  ) {
    return _ncplane_fg_rgb8(
      n,
      r,
      g,
      b,
    );
  }

  late final _ncplane_fg_rgb8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('ncplane_fg_rgb8');
  late final _ncplane_fg_rgb8 = _ncplane_fg_rgb8Ptr.asFunction<
      int Function(ffi.Pointer<ncplane>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int notcurses_get_blocking(
    ffi.Pointer<notcurses> n,
    ffi.Pointer<ncinput> ni,
  ) {
    return _notcurses_get_blocking(
      n,
      ni,
    );
  }

  late final _notcurses_get_blockingPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<notcurses>, ffi.Pointer<ncinput>)>>(
          'notcurses_get_blocking');
  late final _notcurses_get_blocking =
      _notcurses_get_blockingPtr.asFunction<int Function(ffi.Pointer<notcurses>, ffi.Pointer<ncinput>)>();

  int notcurses_get_nblock(
    ffi.Pointer<notcurses> n,
    ffi.Pointer<ncinput> ni,
  ) {
    return _notcurses_get_nblock(
      n,
      ni,
    );
  }

  late final _notcurses_get_nblockPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<notcurses>, ffi.Pointer<ncinput>)>>(
          'notcurses_get_nblock');
  late final _notcurses_get_nblock =
      _notcurses_get_nblockPtr.asFunction<int Function(ffi.Pointer<notcurses>, ffi.Pointer<ncinput>)>();

  int nccell_channels(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_channels(
      c,
    );
  }

  late final _nccell_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nccell>)>>('nccell_channels');
  late final _nccell_channels = _nccell_channelsPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int nccell_set_bchannel(
    ffi.Pointer<nccell> c,
    int channel,
  ) {
    return _nccell_set_bchannel(
      c,
      channel,
    );
  }

  late final _nccell_set_bchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_bchannel');
  late final _nccell_set_bchannel = _nccell_set_bchannelPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int nccell_set_channels(
    ffi.Pointer<nccell> c,
    int channels,
  ) {
    return _nccell_set_channels(
      c,
      channels,
    );
  }

  late final _nccell_set_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nccell>, ffi.Uint64)>>('nccell_set_channels');
  late final _nccell_set_channels = _nccell_set_channelsPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int nccell_set_fchannel(
    ffi.Pointer<nccell> c,
    int channel,
  ) {
    return _nccell_set_fchannel(
      c,
      channel,
    );
  }

  late final _nccell_set_fchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_fchannel');
  late final _nccell_set_fchannel = _nccell_set_fchannelPtr.asFunction<int Function(ffi.Pointer<nccell>, int)>();

  int ncchannels_channels(
    int channels,
  ) {
    return _ncchannels_channels(
      channels,
    );
  }

  late final _ncchannels_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>('ncchannels_channels');
  late final _ncchannels_channels = _ncchannels_channelsPtr.asFunction<int Function(int)>();

  int ncchannels_combine(
    int fchan,
    int bchan,
  ) {
    return _ncchannels_combine(
      fchan,
      bchan,
    );
  }

  late final _ncchannels_combinePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint32, ffi.Uint32)>>('ncchannels_combine');
  late final _ncchannels_combine = _ncchannels_combinePtr.asFunction<int Function(int, int)>();

  int ncchannels_reverse(
    int channels,
  ) {
    return _ncchannels_reverse(
      channels,
    );
  }

  late final _ncchannels_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>('ncchannels_reverse');
  late final _ncchannels_reverse = _ncchannels_reversePtr.asFunction<int Function(int)>();

  int ncchannels_set_bchannel(
    ffi.Pointer<ffi.Uint64> channels,
    int channel,
  ) {
    return _ncchannels_set_bchannel(
      channels,
      channel,
    );
  }

  late final _ncchannels_set_bchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32)>>('ncchannels_set_bchannel');
  late final _ncchannels_set_bchannel =
      _ncchannels_set_bchannelPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_bg_default(
    ffi.Pointer<ffi.Uint64> channels,
  ) {
    return _ncchannels_set_bg_default(
      channels,
    );
  }

  late final _ncchannels_set_bg_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Uint64>)>>('ncchannels_set_bg_default');
  late final _ncchannels_set_bg_default =
      _ncchannels_set_bg_defaultPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>)>();

  int ncchannels_set_channels(
    ffi.Pointer<ffi.Uint64> dst,
    int channels,
  ) {
    return _ncchannels_set_channels(
      dst,
      channels,
    );
  }

  late final _ncchannels_set_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint64)>>('ncchannels_set_channels');
  late final _ncchannels_set_channels =
      _ncchannels_set_channelsPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_fchannel(
    ffi.Pointer<ffi.Uint64> channels,
    int channel,
  ) {
    return _ncchannels_set_fchannel(
      channels,
      channel,
    );
  }

  late final _ncchannels_set_fchannelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Uint64>, ffi.Uint32)>>('ncchannels_set_fchannel');
  late final _ncchannels_set_fchannel =
      _ncchannels_set_fchannelPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>, int)>();

  int ncchannels_set_fg_default(
    ffi.Pointer<ffi.Uint64> channels,
  ) {
    return _ncchannels_set_fg_default(
      channels,
    );
  }

  late final _ncchannels_set_fg_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Uint64>)>>('ncchannels_set_fg_default');
  late final _ncchannels_set_fg_default =
      _ncchannels_set_fg_defaultPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>)>();

  int nctabbed_hdrchan(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_hdrchan(
      nt,
    );
  }

  late final _nctabbed_hdrchanPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nctabbed>)>>('nctabbed_hdrchan');
  late final _nctabbed_hdrchan = _nctabbed_hdrchanPtr.asFunction<int Function(ffi.Pointer<nctabbed>)>();

  int nctabbed_selchan(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_selchan(
      nt,
    );
  }

  late final _nctabbed_selchanPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nctabbed>)>>('nctabbed_selchan');
  late final _nctabbed_selchan = _nctabbed_selchanPtr.asFunction<int Function(ffi.Pointer<nctabbed>)>();

  int nctabbed_sepchan(
    ffi.Pointer<nctabbed> nt,
  ) {
    return _nctabbed_sepchan(
      nt,
    );
  }

  late final _nctabbed_sepchanPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<nctabbed>)>>('nctabbed_sepchan');
  late final _nctabbed_sepchan = _nctabbed_sepchanPtr.asFunction<int Function(ffi.Pointer<nctabbed>)>();

  int nccell_cols(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_cols(
      c,
    );
  }

  late final _nccell_colsPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<nccell>)>>('nccell_cols');
  late final _nccell_cols = _nccell_colsPtr.asFunction<int Function(ffi.Pointer<nccell>)>();

  int ncchannel_alpha(
    int channel,
  ) {
    return _ncchannel_alpha(
      channel,
    );
  }

  late final _ncchannel_alphaPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncchannel_alpha');
  late final _ncchannel_alpha = _ncchannel_alphaPtr.asFunction<int Function(int)>();

  int ncchannel_b(
    int channel,
  ) {
    return _ncchannel_b(
      channel,
    );
  }

  late final _ncchannel_bPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncchannel_b');
  late final _ncchannel_b = _ncchannel_bPtr.asFunction<int Function(int)>();

  int ncchannel_g(
    int channel,
  ) {
    return _ncchannel_g(
      channel,
    );
  }

  late final _ncchannel_gPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncchannel_g');
  late final _ncchannel_g = _ncchannel_gPtr.asFunction<int Function(int)>();

  int ncchannel_palindex(
    int channel,
  ) {
    return _ncchannel_palindex(
      channel,
    );
  }

  late final _ncchannel_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncchannel_palindex');
  late final _ncchannel_palindex = _ncchannel_palindexPtr.asFunction<int Function(int)>();

  int ncchannel_r(
    int channel,
  ) {
    return _ncchannel_r(
      channel,
    );
  }

  late final _ncchannel_rPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncchannel_r');
  late final _ncchannel_r = _ncchannel_rPtr.asFunction<int Function(int)>();

  int ncchannels_bg_alpha(
    int channels,
  ) {
    return _ncchannels_bg_alpha(
      channels,
    );
  }

  late final _ncchannels_bg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>('ncchannels_bg_alpha');
  late final _ncchannels_bg_alpha = _ncchannels_bg_alphaPtr.asFunction<int Function(int)>();

  int ncchannels_bg_palindex(
    int channels,
  ) {
    return _ncchannels_bg_palindex(
      channels,
    );
  }

  late final _ncchannels_bg_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>('ncchannels_bg_palindex');
  late final _ncchannels_bg_palindex = _ncchannels_bg_palindexPtr.asFunction<int Function(int)>();

  int ncchannels_fg_alpha(
    int channels,
  ) {
    return _ncchannels_fg_alpha(
      channels,
    );
  }

  late final _ncchannels_fg_alphaPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>('ncchannels_fg_alpha');
  late final _ncchannels_fg_alpha = _ncchannels_fg_alphaPtr.asFunction<int Function(int)>();

  int ncchannels_fg_palindex(
    int channels,
  ) {
    return _ncchannels_fg_palindex(
      channels,
    );
  }

  late final _ncchannels_fg_palindexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>('ncchannels_fg_palindex');
  late final _ncchannels_fg_palindex = _ncchannels_fg_palindexPtr.asFunction<int Function(int)>();

  int ncpixel_a(
    int pixel,
  ) {
    return _ncpixel_a(
      pixel,
    );
  }

  late final _ncpixel_aPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncpixel_a');
  late final _ncpixel_a = _ncpixel_aPtr.asFunction<int Function(int)>();

  int ncpixel_b(
    int pixel,
  ) {
    return _ncpixel_b(
      pixel,
    );
  }

  late final _ncpixel_bPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncpixel_b');
  late final _ncpixel_b = _ncpixel_bPtr.asFunction<int Function(int)>();

  int ncpixel_g(
    int pixel,
  ) {
    return _ncpixel_g(
      pixel,
    );
  }

  late final _ncpixel_gPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncpixel_g');
  late final _ncpixel_g = _ncpixel_gPtr.asFunction<int Function(int)>();

  int ncpixel_r(
    int pixel,
  ) {
    return _ncpixel_r(
      pixel,
    );
  }

  late final _ncpixel_rPtr = _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ncpixel_r');
  late final _ncpixel_r = _ncpixel_rPtr.asFunction<int Function(int)>();

  int ncplane_cursor_x(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_cursor_x(
      n,
    );
  }

  late final _ncplane_cursor_xPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_cursor_x');
  late final _ncplane_cursor_x = _ncplane_cursor_xPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_cursor_y(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_cursor_y(
      n,
    );
  }

  late final _ncplane_cursor_yPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_cursor_y');
  late final _ncplane_cursor_y = _ncplane_cursor_yPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_dim_x(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_dim_x(
      n,
    );
  }

  late final _ncplane_dim_xPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_dim_x');
  late final _ncplane_dim_x = _ncplane_dim_xPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  int ncplane_dim_y(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_dim_y(
      n,
    );
  }

  late final _ncplane_dim_yPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ncplane>)>>('ncplane_dim_y');
  late final _ncplane_dim_y = _ncplane_dim_yPtr.asFunction<int Function(ffi.Pointer<ncplane>)>();

  void nccell_init(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_init(
      c,
    );
  }

  late final _nccell_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nccell>)>>('nccell_init');
  late final _nccell_init = _nccell_initPtr.asFunction<void Function(ffi.Pointer<nccell>)>();

  void nccell_off_styles(
    ffi.Pointer<nccell> c,
    int stylebits,
  ) {
    return _nccell_off_styles(
      c,
      stylebits,
    );
  }

  late final _nccell_off_stylesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_off_styles');
  late final _nccell_off_styles = _nccell_off_stylesPtr.asFunction<void Function(ffi.Pointer<nccell>, int)>();

  void nccell_on_styles(
    ffi.Pointer<nccell> c,
    int stylebits,
  ) {
    return _nccell_on_styles(
      c,
      stylebits,
    );
  }

  late final _nccell_on_stylesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_on_styles');
  late final _nccell_on_styles = _nccell_on_stylesPtr.asFunction<void Function(ffi.Pointer<nccell>, int)>();

  void nccell_set_bg_default(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_set_bg_default(
      c,
    );
  }

  late final _nccell_set_bg_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nccell>)>>('nccell_set_bg_default');
  late final _nccell_set_bg_default = _nccell_set_bg_defaultPtr.asFunction<void Function(ffi.Pointer<nccell>)>();

  void nccell_set_bg_rgb8_clipped(
    ffi.Pointer<nccell> cl,
    int r,
    int g,
    int b,
  ) {
    return _nccell_set_bg_rgb8_clipped(
      cl,
      r,
      g,
      b,
    );
  }

  late final _nccell_set_bg_rgb8_clippedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nccell>, ffi.Int32, ffi.Int32, ffi.Int32)>>(
          'nccell_set_bg_rgb8_clipped');
  late final _nccell_set_bg_rgb8_clipped =
      _nccell_set_bg_rgb8_clippedPtr.asFunction<void Function(ffi.Pointer<nccell>, int, int, int)>();

  void nccell_set_fg_default(
    ffi.Pointer<nccell> c,
  ) {
    return _nccell_set_fg_default(
      c,
    );
  }

  late final _nccell_set_fg_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nccell>)>>('nccell_set_fg_default');
  late final _nccell_set_fg_default = _nccell_set_fg_defaultPtr.asFunction<void Function(ffi.Pointer<nccell>)>();

  void nccell_set_fg_rgb8_clipped(
    ffi.Pointer<nccell> cl,
    int r,
    int g,
    int b,
  ) {
    return _nccell_set_fg_rgb8_clipped(
      cl,
      r,
      g,
      b,
    );
  }

  late final _nccell_set_fg_rgb8_clippedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nccell>, ffi.Int32, ffi.Int32, ffi.Int32)>>(
          'nccell_set_fg_rgb8_clipped');
  late final _nccell_set_fg_rgb8_clipped =
      _nccell_set_fg_rgb8_clippedPtr.asFunction<void Function(ffi.Pointer<nccell>, int, int, int)>();

  void nccell_set_styles(
    ffi.Pointer<nccell> c,
    int stylebits,
  ) {
    return _nccell_set_styles(
      c,
      stylebits,
    );
  }

  late final _nccell_set_stylesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nccell>, ffi.Uint32)>>('nccell_set_styles');
  late final _nccell_set_styles = _nccell_set_stylesPtr.asFunction<void Function(ffi.Pointer<nccell>, int)>();

  void ncchannel_set_rgb8_clipped(
    ffi.Pointer<ffi.Uint32> channel,
    int r,
    int g,
    int b,
  ) {
    return _ncchannel_set_rgb8_clipped(
      channel,
      r,
      g,
      b,
    );
  }

  late final _ncchannel_set_rgb8_clippedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint32>, ffi.Int32, ffi.Int32, ffi.Int32)>>(
          'ncchannel_set_rgb8_clipped');
  late final _ncchannel_set_rgb8_clipped =
      _ncchannel_set_rgb8_clippedPtr.asFunction<void Function(ffi.Pointer<ffi.Uint32>, int, int, int)>();

  void ncchannels_set_bg_rgb8_clipped(
    ffi.Pointer<ffi.Uint64> channels,
    int r,
    int g,
    int b,
  ) {
    return _ncchannels_set_bg_rgb8_clipped(
      channels,
      r,
      g,
      b,
    );
  }

  late final _ncchannels_set_bg_rgb8_clippedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint64>, ffi.Int32, ffi.Int32, ffi.Int32)>>(
          'ncchannels_set_bg_rgb8_clipped');
  late final _ncchannels_set_bg_rgb8_clipped =
      _ncchannels_set_bg_rgb8_clippedPtr.asFunction<void Function(ffi.Pointer<ffi.Uint64>, int, int, int)>();

  void ncchannels_set_fg_rgb8_clipped(
    ffi.Pointer<ffi.Uint64> channels,
    int r,
    int g,
    int b,
  ) {
    return _ncchannels_set_fg_rgb8_clipped(
      channels,
      r,
      g,
      b,
    );
  }

  late final _ncchannels_set_fg_rgb8_clippedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint64>, ffi.Int32, ffi.Int32, ffi.Int32)>>(
          'ncchannels_set_fg_rgb8_clipped');
  late final _ncchannels_set_fg_rgb8_clipped =
      _ncchannels_set_fg_rgb8_clippedPtr.asFunction<void Function(ffi.Pointer<ffi.Uint64>, int, int, int)>();

  void ncplane_move_bottom(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_move_bottom(
      n,
    );
  }

  late final _ncplane_move_bottomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>('ncplane_move_bottom');
  late final _ncplane_move_bottom = _ncplane_move_bottomPtr.asFunction<void Function(ffi.Pointer<ncplane>)>();

  void ncplane_move_family_bottom(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_move_family_bottom(
      n,
    );
  }

  late final _ncplane_move_family_bottomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>('ncplane_move_family_bottom');
  late final _ncplane_move_family_bottom =
      _ncplane_move_family_bottomPtr.asFunction<void Function(ffi.Pointer<ncplane>)>();

  void ncplane_move_family_top(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_move_family_top(
      n,
    );
  }

  late final _ncplane_move_family_topPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>('ncplane_move_family_top');
  late final _ncplane_move_family_top = _ncplane_move_family_topPtr.asFunction<void Function(ffi.Pointer<ncplane>)>();

  void ncplane_move_top(
    ffi.Pointer<ncplane> n,
  ) {
    return _ncplane_move_top(
      n,
    );
  }

  late final _ncplane_move_topPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ncplane>)>>('ncplane_move_top');
  late final _ncplane_move_top = _ncplane_move_topPtr.asFunction<void Function(ffi.Pointer<ncplane>)>();

  void notcurses_term_dim_yx(
    ffi.Pointer<notcurses> n,
    ffi.Pointer<ffi.Uint32> rows,
    ffi.Pointer<ffi.Uint32> cols,
  ) {
    return _notcurses_term_dim_yx(
      n,
      rows,
      cols,
    );
  }

  late final _notcurses_term_dim_yxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>>('notcurses_term_dim_yx');
  late final _notcurses_term_dim_yx = _notcurses_term_dim_yxPtr
      .asFunction<void Function(ffi.Pointer<notcurses>, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();
}

typedef wchar_t = ffi.Int32;
typedef uintmax_t = ffi.Uint64;
typedef size_t = ffi.Uint64;

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}
